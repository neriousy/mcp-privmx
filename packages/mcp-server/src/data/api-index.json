{
  "namespaces": [
    {
      "name": "Core",
      "description": "PrivMX Core API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "Endpoint",
          "description": "Class with the static factory methods to create instances of Connection and APIs",
          "namespace": "Core",
          "language": "javascript",
          "methods": [
            {
              "name": "setup",
              "description": "Load the Endpoint's WASM assets and initialize the Endpoint library.",
              "snippet": "setup(assetsBasePath)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "assetsBasePath",
                  "description": "base path/url to the Endpoint's WebAssembly assets (like: endpoint-wasm-module.js, driver-web-context.js and others)",
                  "type": {
                    "name": "string",
                    "optional": true
                  },
                  "optional": true
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "assetsBasePath must be a non-empty string"
              ]
            },
            {
              "name": "getEventQueue",
              "description": "Gets the EventQueue instance.",
              "snippet": "getEventQueue()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "EventQueue",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of EventQueue"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "connect",
              "description": "Connects to the platform backend.",
              "snippet": "connect(userPrivKey, solutionId, bridgeUrl)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "userPrivKey",
                  "description": "user's private key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "bridgeUrl",
                  "description": "the Bridge Server URL",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Connection",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of Connection"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [
                "initialization"
              ],
              "errorHandling": [
                "NetworkError",
                "TimeoutError",
                "AuthenticationError",
                "InvalidCredentialsError"
              ],
              "examples": [],
              "validation": [
                "userPrivKey is required",
                "userPrivKey must be a non-empty string",
                "solutionId is required",
                "solutionId must be a non-empty string",
                "bridgeUrl is required",
                "bridgeUrl must be a non-empty string"
              ]
            },
            {
              "name": "connectPublic",
              "description": "Connects to the Platform backend as a guest user.",
              "snippet": "connectPublic(solutionId, bridgeUrl)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "bridgeUrl",
                  "description": "the Bridge Server URL",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Connection",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of Connection"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [
                "initialization"
              ],
              "errorHandling": [
                "NetworkError",
                "TimeoutError",
                "AuthenticationError",
                "InvalidCredentialsError"
              ],
              "examples": [],
              "validation": [
                "solutionId is required",
                "solutionId must be a non-empty string",
                "bridgeUrl is required",
                "bridgeUrl must be a non-empty string"
              ]
            },
            {
              "name": "createThreadApi",
              "description": "Creates an instance of the Thread API.",
              "snippet": "createThreadApi(connection)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "connection",
                  "description": "instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ThreadApi",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of ThreadApi"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "connection is required"
              ]
            },
            {
              "name": "createStoreApi",
              "description": "Creates an instance of the Store API.",
              "snippet": "createStoreApi(connection)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "connection",
                  "description": "instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "StoreApi",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of StoreApi"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "connection is required"
              ]
            },
            {
              "name": "createInboxApi",
              "description": "Creates an instance of the Inbox API.",
              "snippet": "createInboxApi(connection, threadApi, storeApi)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "connection",
                  "description": "instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "threadApi",
                  "description": "instance of ThreadApi",
                  "type": {
                    "name": "ThreadApi",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "storeApi",
                  "description": "instance of StoreApi",
                  "type": {
                    "name": "StoreApi",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "InboxApi",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of InboxApi"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "connection is required",
                "threadApi is required",
                "storeApi is required"
              ]
            },
            {
              "name": "createCryptoApi",
              "description": "Creates an instance of the Crypto API.",
              "snippet": "createCryptoApi()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "CryptoApi",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of CryptoApi"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "createEventApi",
              "description": "Creates an instance of 'EventApi'.",
              "snippet": "createEventApi(connection)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "connection",
                  "description": "instance of 'Connection'",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "EventApi",
                        "optional": false
                      }
                    ]
                  },
                  "description": "instance of EventApi"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Endpoint",
              "prerequisites": [],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "connection is required"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [],
          "usedWith": [],
          "creationPattern": "new Endpoint()",
          "commonWorkflows": []
        },
        {
          "name": "Connection",
          "description": "Class representing instance of Connection",
          "namespace": "Core",
          "language": "javascript",
          "methods": [
            {
              "name": "getConnectionId",
              "description": "Gets the ID of the current connection.",
              "snippet": "getConnectionId()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of the connection"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Connection",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "listContexts",
              "description": "Gets a list of Contexts available for the user.",
              "snippet": "listContexts(pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<Context>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing a list of Contexts"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Connection",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "pagingQuery is required"
              ]
            },
            {
              "name": "getContextUsers",
              "description": "Gets a list of users of given context.",
              "snippet": "getContextUsers(contextId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "UserInfo[]",
                        "optional": false
                      }
                    ]
                  },
                  "description": "a list of the UserInfo objects"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "Connection",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string"
              ]
            },
            {
              "name": "disconnect",
              "description": "Disconnects from the Platform backend.",
              "snippet": "disconnect()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Core",
              "className": "Connection",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [
                "initialization"
              ],
              "errorHandling": [
                "NetworkError",
                "TimeoutError",
                "AuthenticationError",
                "InvalidCredentialsError"
              ],
              "examples": [],
              "validation": []
            },
            {
              "name": "setUserVerifier",
              "description": "Sets user's custom verification callback. The feature allows the developer to set up a callback for user verification. A developer can implement an interface and pass the implementation to the function. Each time data is read from the container, a callback will be triggered, allowing the developer to validate the sender in an external service, e.g. Developer's Application Server or PKI Server.",
              "snippet": "setUserVerifier(verifier)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "verifier",
                  "description": "an implementation of the UserVerifierInterface",
                  "type": {
                    "name": "UserVerifierInterface",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Core",
              "className": "Connection",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "verifier is required"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [],
          "usedWith": [],
          "creationPattern": "new Connection()",
          "commonWorkflows": []
        },
        {
          "name": "EventQueue",
          "description": "Class representing instance of Event Queue",
          "namespace": "Core",
          "language": "javascript",
          "methods": [
            {
              "name": "waitEvent",
              "description": "",
              "snippet": "waitEvent()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Event",
                        "optional": false
                      }
                    ]
                  },
                  "description": "undefined undefined"
                }
              ],
              "language": "javascript",
              "namespace": "Core",
              "className": "EventQueue",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "emitBreakEvent",
              "description": "",
              "snippet": "emitBreakEvent()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Core",
              "className": "EventQueue",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [],
          "usedWith": [],
          "creationPattern": "new EventQueue()",
          "commonWorkflows": []
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": [
        "initialization",
        "crud-operations"
      ]
    },
    {
      "name": "Threads",
      "description": "PrivMX Threads API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "ThreadApi",
          "description": "Class representing instance of Threads API",
          "namespace": "Threads",
          "language": "javascript",
          "methods": [
            {
              "name": "createThread",
              "description": "Creates a new Thread in given Context.",
              "snippet": "createThread(contextId, users, managers, publicMeta, privateMeta, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Thread in",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "array of UserWithPubKey structs which indicates who will have access to the created Thread",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Thread's policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of the created Thread"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "connect",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "policies is required"
              ]
            },
            {
              "name": "updateThread",
              "description": "Updates an existing Thread.",
              "snippet": "updateThread(threadId, users, managers, publicMeta, privateMeta, version, force, forceGenerateNewKey, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "array of UserWithPubKey structs which indicates who will have access to the created Thread",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "version",
                  "description": "current version of the updated Thread",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Thread",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Thread's policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "version is required",
                "force is required",
                "forceGenerateNewKey is required",
                "policies is required"
              ]
            },
            {
              "name": "deleteThread",
              "description": "Deletes a Thread by given Thread ID.",
              "snippet": "deleteThread(threadId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to delete",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string"
              ]
            },
            {
              "name": "getThread",
              "description": "Gets a Thread by given Thread ID.",
              "snippet": "getThread(threadId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of Thread to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Thread",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing info about the Thread"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string"
              ]
            },
            {
              "name": "listThreads",
              "description": "Gets a list of Threads in given Context.",
              "snippet": "listThreads(contextId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Threads from",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<Thread>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing a list of Threads"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "getMessage",
              "description": "Gets a message by given message ID.",
              "snippet": "getMessage(messageId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "messageId",
                  "description": "ID of the message to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Message",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing the message"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "messageId is required",
                "messageId must be a non-empty string"
              ]
            },
            {
              "name": "listMessages",
              "description": "Gets a list of messages from a Thread.",
              "snippet": "listMessages(threadId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to list messages from",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<Message>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing a list of messages"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "sendMessage",
              "description": "Sends a message in a Thread.",
              "snippet": "sendMessage(threadId, publicMeta, privateMeta, data)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to send message to",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public message metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private message metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "data",
                  "description": "content of the message",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of the new message"
                }
              ],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get"
              ],
              "usagePatterns": [
                "messaging"
              ],
              "errorHandling": [
                "NetworkError",
                "TimeoutError"
              ],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string",
                "publicMeta is required",
                "privateMeta is required",
                "data is required"
              ]
            },
            {
              "name": "deleteMessage",
              "description": "Deletes a message by given message ID.",
              "snippet": "deleteMessage(messageId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "messageId",
                  "description": "ID of the message to delete",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "messageId is required",
                "messageId must be a non-empty string"
              ]
            },
            {
              "name": "updateMessage",
              "description": "Update message in a Thread.",
              "snippet": "updateMessage(messageId, publicMeta, privateMeta, data)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "messageId",
                  "description": "ID of the message to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public message metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private message metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "data",
                  "description": "content of the message",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "messageId is required",
                "messageId must be a non-empty string",
                "publicMeta is required",
                "privateMeta is required",
                "data is required"
              ]
            },
            {
              "name": "subscribeForThreadEvents",
              "description": "Subscribes for the Thread module main events.",
              "snippet": "subscribeForThreadEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "unsubscribeFromThreadEvents",
              "description": "Unsubscribes from the Thread module main events.",
              "snippet": "unsubscribeFromThreadEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "subscribeForMessageEvents",
              "description": "Subscribes for events in given Thread.",
              "snippet": "subscribeForMessageEvents(threadId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to subscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string"
              ]
            },
            {
              "name": "unsubscribeFromMessageEvents",
              "description": "Unsubscribes from events in given Thread.",
              "snippet": "unsubscribeFromMessageEvents(threadId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to unsubscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Threads",
              "className": "ThreadApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "threadId is required",
                "threadId must be a non-empty string"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [
            "Connection"
          ],
          "usedWith": [
            "StoreApi",
            "InboxApi"
          ],
          "creationPattern": "await Endpoint.createThreadApi(connection)",
          "commonWorkflows": [
            "create-thread-and-send-message",
            "list-messages"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": [
        "crud-operations",
        "messaging"
      ]
    },
    {
      "name": "Stores",
      "description": "PrivMX Stores API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "StoreApi",
          "description": "Class representing instance of Stores API",
          "namespace": "Stores",
          "language": "javascript",
          "methods": [
            {
              "name": "createStore",
              "description": "Creates a new Store in given Context.",
              "snippet": "createStore(contextId, users, managers, publicMeta, privateMeta, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "array of UserWithPubKey structs which indicates who will have access to the created Store",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Store's policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "created Store ID"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "connect",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "policies is required"
              ]
            },
            {
              "name": "updateStore",
              "description": "Updates an existing Store.",
              "snippet": "updateStore(storeId, users, managers, publicMeta, privateMeta, version, force, forceGenerateNewKey, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "array of UserWithPubKey structs which indicates who will have access to the created Store",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "version",
                  "description": "current version of the updated Store",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Store",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Store's policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "version is required",
                "force is required",
                "forceGenerateNewKey is required",
                "policies is required"
              ]
            },
            {
              "name": "deleteStore",
              "description": "Deletes a Store by given Store ID.",
              "snippet": "deleteStore(storeId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to delete",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string"
              ]
            },
            {
              "name": "getStore",
              "description": "Gets a single Store by given Store ID.",
              "snippet": "getStore(storeId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Store",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing information about the Store"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string"
              ]
            },
            {
              "name": "listStores",
              "description": "Gets a list of Stores in given Context.",
              "snippet": "listStores(contextId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<Store>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing list of Stores"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "createFile",
              "description": "Creates a new file in a Store.",
              "snippet": "createFile(storeId, publicMeta, privateMeta, size)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to create the file in",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "size",
                  "description": "size of the file",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "handle to write data"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "connect",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string",
                "publicMeta is required",
                "privateMeta is required",
                "size is required"
              ]
            },
            {
              "name": "updateFile",
              "description": "Update an existing file in a Store.",
              "snippet": "updateFile(fileId, publicMeta, privateMeta, size)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "size",
                  "description": "size of the file",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "handle to write file data"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string",
                "publicMeta is required",
                "privateMeta is required",
                "size is required"
              ]
            },
            {
              "name": "updateFileMeta",
              "description": "Update metadata of an existing file in a Store.",
              "snippet": "updateFileMeta(fileId, publicMeta, privateMeta)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string",
                "publicMeta is required",
                "privateMeta is required"
              ]
            },
            {
              "name": "writeToFile",
              "description": "Writes a file data.",
              "snippet": "writeToFile(fileHandle, dataChunk)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to write file data",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "dataChunk",
                  "description": "file data chunk",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required",
                "dataChunk is required"
              ]
            },
            {
              "name": "deleteFile",
              "description": "Deletes a file by given ID.",
              "snippet": "deleteFile(fileId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to delete",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string"
              ]
            },
            {
              "name": "getFile",
              "description": "Gets a single file by the given file ID.",
              "snippet": "getFile(fileId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "File",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing information about the file"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string"
              ]
            },
            {
              "name": "listFiles",
              "description": "Gets a list of files in given Store.",
              "snippet": "listFiles(storeId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get files from",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<File>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing list of files"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "openFile(fileId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "handle to read file data"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string"
              ]
            },
            {
              "name": "readFromFile",
              "description": "Reads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.",
              "snippet": "readFromFile(fileHandle, length)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to write file data",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "length",
                  "description": "size of data to read",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "array buffer with file data chunk"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required",
                "length is required"
              ]
            },
            {
              "name": "seekInFile",
              "description": "Moves read cursor.",
              "snippet": "seekInFile(fileHandle, position)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to write file data",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "position",
                  "description": "new cursor position",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required",
                "position is required"
              ]
            },
            {
              "name": "closeFile",
              "description": "Closes the file handle.",
              "snippet": "closeFile(fileHandle)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to read/write file data",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of closed file"
                }
              ],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required"
              ]
            },
            {
              "name": "subscribeForStoreEvents",
              "description": "Subscribes for the Store module main events.",
              "snippet": "subscribeForStoreEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "unsubscribeFromStoreEvents",
              "description": "Unsubscribes from the Store module main events.",
              "snippet": "unsubscribeFromStoreEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "subscribeForFileEvents",
              "description": "Subscribes for events in given Store.",
              "snippet": "subscribeForFileEvents(storeId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to subscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string"
              ]
            },
            {
              "name": "unsubscribeFromFileEvents",
              "description": "Unsubscribes from events in given Store.",
              "snippet": "unsubscribeFromFileEvents(storeId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to unsubscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Stores",
              "className": "StoreApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "storeId is required",
                "storeId must be a non-empty string"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [
            "Connection"
          ],
          "usedWith": [
            "ThreadApi"
          ],
          "creationPattern": "await Endpoint.createStoreApi(connection)",
          "commonWorkflows": [
            "upload-file",
            "download-file"
          ]
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": [
        "crud-operations"
      ]
    },
    {
      "name": "Inboxes",
      "description": "PrivMX Inboxes API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "InboxApi",
          "description": "Class representing instance of Inboxes API",
          "namespace": "Inboxes",
          "language": "javascript",
          "methods": [
            {
              "name": "createInbox",
              "description": "Creates a new Inbox.",
              "snippet": "createInbox(contextId, users, managers, publicMeta, privateMeta, filesConfig, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context of the new Inbox",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "filesConfig",
                  "description": "struct to override default file configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Inbox policies",
                  "type": {
                    "name": "ContainerWithoutItemPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of the created Inbox"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "connect",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "filesConfig is required",
                "policies is required"
              ]
            },
            {
              "name": "updateInbox",
              "description": "Updates an existing Inbox.",
              "snippet": "updateInbox(inboxId, users, managers, publicMeta, privateMeta, filesConfig, version, force, forceGenerateNewKey, policies)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to update",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "managers",
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "filesConfig",
                  "description": "struct to override default files configuration",
                  "type": {
                    "name": "FilesConfig | undefined",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "version",
                  "description": "current version of the updated Inbox",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Inbox",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "policies",
                  "description": "Inbox policies",
                  "type": {
                    "name": "ContainerWithoutItemPolicy",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string",
                "users is required",
                "managers is required",
                "publicMeta is required",
                "privateMeta is required",
                "filesConfig is required",
                "version is required",
                "force is required",
                "forceGenerateNewKey is required",
                "policies is required"
              ]
            },
            {
              "name": "getInbox",
              "description": "Gets a single Inbox by given Inbox ID.",
              "snippet": "getInbox(inboxId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Inbox",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing information about the Inbox"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string"
              ]
            },
            {
              "name": "listInboxes",
              "description": "Gets s list of Inboxes in given Context.",
              "snippet": "listInboxes(contextId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get Inboxes from",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<Inbox>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing list of Inboxes"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "getInboxPublicView",
              "description": "Gets public data of given Inbox. You do not have to be logged in to call this function.",
              "snippet": "getInboxPublicView(inboxId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "InboxPublicView",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing public accessible information about the Inbox"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string"
              ]
            },
            {
              "name": "deleteInbox",
              "description": "Deletes an Inbox by given Inbox ID.",
              "snippet": "deleteInbox(inboxId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to delete",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string"
              ]
            },
            {
              "name": "prepareEntry",
              "description": "Prepares a request to send data to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "prepareEntry(inboxId, data, inboxFileHandles, userPrivKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "data",
                  "description": "entry data to send",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "inboxFileHandles",
                  "description": "optional list of file handles that will be sent with the request",
                  "type": {
                    "name": "number",
                    "optional": true,
                    "isArray": true
                  },
                  "optional": true
                },
                {
                  "name": "userPrivKey",
                  "description": "optional sender's private key which can be used later to encrypt data for that sender",
                  "type": {
                    "name": "string | undefined",
                    "optional": true
                  },
                  "optional": true
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "Inbox handle"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string",
                "data is required"
              ]
            },
            {
              "name": "sendEntry",
              "description": "Sends data to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "sendEntry(inboxHandle)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxHandle",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "create",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get"
              ],
              "usagePatterns": [
                "messaging"
              ],
              "errorHandling": [
                "NetworkError",
                "TimeoutError"
              ],
              "examples": [],
              "validation": [
                "inboxHandle is required"
              ]
            },
            {
              "name": "readEntry",
              "description": "Gets an entry from an Inbox.",
              "snippet": "readEntry(inboxEntryId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to read from the Inbox",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "InboxEntry",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing data of the selected entry stored in the Inbox"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxEntryId is required",
                "inboxEntryId must be a non-empty string"
              ]
            },
            {
              "name": "listEntries",
              "description": "Gets list of entries in given Inbox.",
              "snippet": "listEntries(inboxId, pagingQuery)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "pagingQuery",
                  "description": "struct with list query parameters",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "PagingList<InboxEntry>",
                        "optional": false
                      }
                    ]
                  },
                  "description": "struct containing list of entries"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string",
                "pagingQuery is required"
              ]
            },
            {
              "name": "deleteEntry",
              "description": "Delete an entry from an Inbox.",
              "snippet": "deleteEntry(inboxEntryId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to delete from the Inbox",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxEntryId is required",
                "inboxEntryId must be a non-empty string"
              ]
            },
            {
              "name": "createFileHandle",
              "description": "Creates a file handle to send a file to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "createFileHandle(publicMeta, privateMeta, fileSize)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "fileSize",
                  "description": "size of the file to send",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "file handle"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "connect",
                "Endpoint.connect"
              ],
              "relatedMethods": [
                "list",
                "get",
                "update",
                "delete"
              ],
              "usagePatterns": [
                "crud-operations"
              ],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "publicMeta is required",
                "privateMeta is required",
                "fileSize is required"
              ]
            },
            {
              "name": "writeToFile",
              "description": "Sends a file's data chunk to an Inbox. (note: To send the entire file - divide it into pieces of the desired size and call the function for each fragment.) You do not have to be logged in to call this function.",
              "snippet": "writeToFile(inboxHandle, inboxFileHandle, dataChunk)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxHandle",
                  "description": "Handle to the prepared Inbox entry",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "inboxFileHandle",
                  "description": "handle to the file where the uploaded chunk belongs",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "dataChunk",
                  "description": "- file chunk to send",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxHandle is required",
                "inboxFileHandle is required",
                "dataChunk is required"
              ]
            },
            {
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "openFile(fileId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "number",
                        "optional": false
                      }
                    ]
                  },
                  "description": "handle to read file data"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileId is required",
                "fileId must be a non-empty string"
              ]
            },
            {
              "name": "readFromFile",
              "description": "Reads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.",
              "snippet": "readFromFile(fileHandle, length)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "length",
                  "description": "size of data to read",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "buffer with file data chunk"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required",
                "length is required"
              ]
            },
            {
              "name": "seekInFile",
              "description": "Moves file's read cursor.",
              "snippet": "seekInFile(fileHandle, position)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "position",
                  "description": "sets new cursor position",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required",
                "position is required"
              ]
            },
            {
              "name": "closeFile",
              "description": "Closes a file by given handle.",
              "snippet": "closeFile(fileHandle)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ID of closed file"
                }
              ],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "fileHandle is required"
              ]
            },
            {
              "name": "subscribeForInboxEvents",
              "description": "Subscribes for the Inbox module main events.",
              "snippet": "subscribeForInboxEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "unsubscribeFromInboxEvents",
              "description": "Unsubscribes from the Inbox module main events.",
              "snippet": "unsubscribeFromInboxEvents()",
              "methodType": "method",
              "parameters": [],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "subscribeForEntryEvents",
              "description": "Subscribes for events in given Inbox.",
              "snippet": "subscribeForEntryEvents(inboxId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to subscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string"
              ]
            },
            {
              "name": "unsubscribeFromEntryEvents",
              "description": "Unsubscribes from events in given Inbox.",
              "snippet": "unsubscribeFromEntryEvents(inboxId)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to unsubscribe",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [],
              "language": "javascript",
              "namespace": "Inboxes",
              "className": "InboxApi",
              "prerequisites": [
                "Endpoint.connect"
              ],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "inboxId is required",
                "inboxId must be a non-empty string"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [
            "Connection",
            "ThreadApi",
            "StoreApi"
          ],
          "usedWith": [],
          "creationPattern": "await Endpoint.createInboxApi(connection)",
          "commonWorkflows": []
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": [
        "crud-operations",
        "messaging"
      ]
    },
    {
      "name": "Crypto",
      "description": "PrivMX Crypto API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "CryptoApi",
          "description": "Class representing instance of Crypto API",
          "namespace": "Crypto",
          "language": "javascript",
          "methods": [
            {
              "name": "signData",
              "description": "Creates a signature of data using given key.",
              "snippet": "signData(data, privateKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "data",
                  "description": "buffer to sign",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "privateKey",
                  "description": "key used to sign data",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "signature "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "data is required",
                "privateKey is required",
                "privateKey must be a non-empty string"
              ]
            },
            {
              "name": "verifySignature",
              "description": "Validate a signature of data using given key.",
              "snippet": "verifySignature(data, signature, publicKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "data",
                  "description": "buffer",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "signature",
                  "description": "signature of data to verify",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "publicKey",
                  "description": "public ECC key in BASE58DER format used to validate data",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "unknown",
                    "optional": true
                  },
                  "description": "data validation result"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "data is required",
                "signature is required",
                "publicKey is required",
                "publicKey must be a non-empty string"
              ]
            },
            {
              "name": "generatePrivateKey",
              "description": "Generates a new private ECC key.",
              "snippet": "generatePrivateKey(randomSeed)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "randomSeed",
                  "description": "optional string used as the base to generate the new key",
                  "type": {
                    "name": "string | undefined",
                    "optional": true
                  },
                  "optional": true
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated ECC key in WIF format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "derivePrivateKey",
              "description": "(deprecated) Generates a new private ECC key from a password using pbkdf2.",
              "snippet": "derivePrivateKey(password, salt)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "password",
                  "description": "the password used to generate the new key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "salt",
                  "description": "random string (additional input for the hashing function)",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated ECC key in WIF format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "password is required",
                "password must be a non-empty string",
                "salt is required",
                "salt must be a non-empty string"
              ]
            },
            {
              "name": "derivePrivateKey2",
              "description": "Generates a new private ECC key from a password using pbkdf2.",
              "snippet": "derivePrivateKey2(password, salt)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "password",
                  "description": "the password used to generate the new key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "salt",
                  "description": "random string (additional input for the hashing function)",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated ECC key in WIF format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "password is required",
                "password must be a non-empty string",
                "salt is required",
                "salt must be a non-empty string"
              ]
            },
            {
              "name": "derivePublicKey",
              "description": "Generates a new public ECC key as a pair to an existing private key.",
              "snippet": "derivePublicKey(privateKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "privateKey",
                  "description": "private ECC key in WIF format",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated ECC key in BASE58DER format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "privateKey is required",
                "privateKey must be a non-empty string"
              ]
            },
            {
              "name": "generateKeySymmetric",
              "description": "Generates a new symmetric key.",
              "snippet": "generateKeySymmetric()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated key."
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "encryptDataSymmetric",
              "description": "Encrypts buffer with a given key using AES.",
              "snippet": "encryptDataSymmetric(data, symmetricKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "data",
                  "description": "buffer to encrypt",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "symmetricKey",
                  "description": "key used to encrypt data",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "encrypted data buffer"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "data is required",
                "symmetricKey is required"
              ]
            },
            {
              "name": "decryptDataSymmetric",
              "description": "Decrypts buffer with a given key using AES.",
              "snippet": "decryptDataSymmetric(data, symmetricKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "data",
                  "description": "buffer to decrypt",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "symmetricKey",
                  "description": "key used to decrypt data",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "plain (decrypted) data buffer"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "data is required",
                "symmetricKey is required"
              ]
            },
            {
              "name": "convertPEMKeytoWIFKey",
              "description": "Converts given private key in PEM format to its WIF format.",
              "snippet": "convertPEMKeytoWIFKey(pemKey)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "pemKey",
                  "description": "private key to convert",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "private key in WIF format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "pemKey is required",
                "pemKey must be a non-empty string"
              ]
            },
            {
              "name": "generateBip39",
              "description": "Generates ECC key and BIP-39 mnemonic from a password using BIP-39.",
              "snippet": "generateBip39(strength, password)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "strength",
                  "description": "size of BIP-39 entropy, must be a multiple of 32",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "password",
                  "description": "the password used to generate the Key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "BIP39",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object containing ECC Key and associated with it BIP-39 mnemonic and entropy"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "strength is required",
                "password is required",
                "password must be a non-empty string"
              ]
            },
            {
              "name": "fromMnemonic",
              "description": "Generates ECC key using BIP-39 mnemonic.",
              "snippet": "fromMnemonic(mnemonic, password)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "mnemonic",
                  "description": "the BIP-39 entropy used to generate the Key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "password",
                  "description": "the password used to generate the Key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "BIP39",
                        "optional": false
                      }
                    ]
                  },
                  "description": "BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "mnemonic is required",
                "mnemonic must be a non-empty string",
                "password is required",
                "password must be a non-empty string"
              ]
            },
            {
              "name": "fromEntropy",
              "description": "Generates ECC key using BIP-39 entropy.",
              "snippet": "fromEntropy(entropy, password)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "entropy",
                  "description": "the BIP-39 entropy used to generate the Key",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "password",
                  "description": "the password used to generate the Key",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "BIP39",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object containing ECC Key and associated with it BIP-39 mnemonic and entropy"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "entropy is required",
                "password is required",
                "password must be a non-empty string"
              ]
            },
            {
              "name": "entropyToMnemonic",
              "description": "Converts BIP-39 entropy to mnemonic.",
              "snippet": "entropyToMnemonic(entropy)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "entropy",
                  "description": "BIP-39 entropy",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "BIP-39 mnemonic"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "entropy is required"
              ]
            },
            {
              "name": "mnemonicToEntropy",
              "description": "Converts BIP-39 mnemonic to entropy.",
              "snippet": "mnemonicToEntropy(mnemonic)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "mnemonic",
                  "description": "BIP-39 mnemonic",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "BIP-39 entropy"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "mnemonic is required",
                "mnemonic must be a non-empty string"
              ]
            },
            {
              "name": "mnemonicToSeed",
              "description": "Generates a seed used to generate a key using BIP-39 mnemonic with PBKDF2.",
              "snippet": "mnemonicToSeed(mnemonic, password)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "mnemonic",
                  "description": "BIP-39 mnemonic",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "password",
                  "description": "the password used to generate the seed",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "generated seed"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "CryptoApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "mnemonic is required",
                "mnemonic must be a non-empty string",
                "password is required",
                "password must be a non-empty string"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [
            "Connection"
          ],
          "usedWith": [],
          "creationPattern": "await Endpoint.createCryptoApi(connection)",
          "commonWorkflows": []
        },
        {
          "name": "ExtKey",
          "description": "Class representing instance of ExtKey",
          "namespace": "Crypto",
          "language": "javascript",
          "methods": [
            {
              "name": "fromSeed",
              "description": "Creates ExtKey from given seed.",
              "snippet": "fromSeed(seed)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "seed",
                  "description": "the seed used to generate Key",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ExtKey",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "seed is required"
              ]
            },
            {
              "name": "fromBase58",
              "description": "Decodes ExtKey from Base58 format.",
              "snippet": "fromBase58(base58)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "base58",
                  "description": "the ExtKey in Base58",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ExtKey",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "base58 is required",
                "base58 must be a non-empty string"
              ]
            },
            {
              "name": "generateRandom",
              "description": "Generates a new ExtKey.",
              "snippet": "generateRandom()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ExtKey",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "derive",
              "description": "Generates child ExtKey from a current ExtKey using BIP32.",
              "snippet": "derive(index)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "index",
                  "description": "number from 0 to 2^31-1",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ExtKey",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "index is required"
              ]
            },
            {
              "name": "deriveHardened",
              "description": "Generates hardened child ExtKey from a current ExtKey using BIP32.",
              "snippet": "deriveHardened(index)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "index",
                  "description": "number from 0 to 2^31-1",
                  "type": {
                    "name": "number",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "ExtKey",
                        "optional": false
                      }
                    ]
                  },
                  "description": "object "
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "index is required"
              ]
            },
            {
              "name": "getPrivatePartAsBase58",
              "description": "Converts ExtKey to Base58 string.",
              "snippet": "getPrivatePartAsBase58()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ExtKey in Base58 format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getPublicPartAsBase58",
              "description": "Converts the public part of ExtKey to Base58 string.",
              "snippet": "getPublicPartAsBase58()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ExtKey in Base58 format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getPrivateKey",
              "description": "Extracts ECC PrivateKey.",
              "snippet": "getPrivateKey()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ECC key in WIF format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getPublicKey",
              "description": "Extracts ECC PublicKey.",
              "snippet": "getPublicKey()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ECC key in BASE58DER format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getPrivateEncKey",
              "description": "Extracts raw ECC PrivateKey.",
              "snippet": "getPrivateEncKey()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ECC PrivateKey"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getPublicKeyAsBase58Address",
              "description": "Extracts ECC PublicKey Address.",
              "snippet": "getPublicKeyAsBase58Address()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "string",
                        "optional": false
                      }
                    ]
                  },
                  "description": "ECC Address in BASE58 format"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "getChainCode",
              "description": "Gets the chain code of Extended Key.",
              "snippet": "getChainCode()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "Uint8Array",
                        "optional": false
                      }
                    ]
                  },
                  "description": "Raw chain code"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            },
            {
              "name": "verifyCompactSignatureWithHash",
              "description": "Validates a signature of a message.",
              "snippet": "verifyCompactSignatureWithHash(message, signature)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "message",
                  "description": "data used on validation",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "signature",
                  "description": "signature of data to verify",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "boolean",
                        "optional": false
                      }
                    ]
                  },
                  "description": "message validation result"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "message is required",
                "signature is required"
              ]
            },
            {
              "name": "isPrivate",
              "description": "Checks if ExtKey is Private.",
              "snippet": "isPrivate()",
              "methodType": "method",
              "parameters": [],
              "returns": [
                {
                  "type": {
                    "name": "Promise",
                    "optional": false,
                    "generics": [
                      {
                        "name": "boolean",
                        "optional": false
                      }
                    ]
                  },
                  "description": "true if ExtKey is private"
                }
              ],
              "language": "javascript",
              "namespace": "Crypto",
              "className": "ExtKey",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": []
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [],
          "usedWith": [],
          "creationPattern": "new ExtKey()",
          "commonWorkflows": []
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": []
    },
    {
      "name": "Events",
      "description": "PrivMX Events API for javascript",
      "language": "javascript",
      "classes": [
        {
          "name": "EventApi",
          "description": "Class representing instance of Custom Events API",
          "namespace": "Events",
          "language": "javascript",
          "methods": [
            {
              "name": "emitEvent",
              "description": "Emits the custom event on the given Context and channel.",
              "snippet": "emitEvent(contextId, channelName, eventData, users)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "channelName",
                  "description": "name of the Channel",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "eventData",
                  "description": "event's data",
                  "type": {
                    "name": "Uint8Array",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey objects which defines the recipients of the event",
                  "type": {
                    "name": "UserWithPubKey",
                    "optional": false,
                    "isArray": true
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "unknown",
                    "optional": true
                  },
                  "description": "undefined undefined"
                }
              ],
              "language": "javascript",
              "namespace": "Events",
              "className": "EventApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "channelName is required",
                "channelName must be a non-empty string",
                "eventData is required",
                "users is required"
              ]
            },
            {
              "name": "subscribeForCustomEvents",
              "description": "Subscribe for the custom events on the given channel.",
              "snippet": "subscribeForCustomEvents(contextId, channelName)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "channelName",
                  "description": "name of the Channel",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "unknown",
                    "optional": true
                  },
                  "description": "undefined undefined"
                }
              ],
              "language": "javascript",
              "namespace": "Events",
              "className": "EventApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "channelName is required",
                "channelName must be a non-empty string"
              ]
            },
            {
              "name": "unsubscribeFromCustomEvents",
              "description": "Unsubscribe from the custom events on the given channel.",
              "snippet": "unsubscribeFromCustomEvents(contextId, channelName)",
              "methodType": "method",
              "parameters": [
                {
                  "name": "contextId",
                  "description": "ID of the Context",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                },
                {
                  "name": "channelName",
                  "description": "name of the Channel",
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "optional": false
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "unknown",
                    "optional": true
                  },
                  "description": "undefined undefined"
                }
              ],
              "language": "javascript",
              "namespace": "Events",
              "className": "EventApi",
              "prerequisites": [],
              "relatedMethods": [],
              "usagePatterns": [],
              "errorHandling": [],
              "examples": [],
              "validation": [
                "contextId is required",
                "contextId must be a non-empty string",
                "channelName is required",
                "channelName must be a non-empty string"
              ]
            }
          ],
          "staticMethods": [],
          "constructors": [],
          "properties": [],
          "dependencies": [
            "Connection"
          ],
          "usedWith": [],
          "creationPattern": "await Endpoint.createEventApi(connection)",
          "commonWorkflows": []
        }
      ],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": []
    },
    {
      "name": "Types",
      "description": "PrivMX Types API for javascript",
      "language": "javascript",
      "classes": [],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": []
    },
    {
      "name": "_meta",
      "description": "PrivMX _meta API for javascript",
      "language": "javascript",
      "classes": [],
      "functions": [],
      "constants": [],
      "types": [],
      "commonPatterns": []
    }
  ],
  "coverage": {
    "totalMethods": 104,
    "indexedMethods": 104,
    "languagesCovered": [
      "javascript"
    ],
    "examplesCount": 0,
    "workflowsCount": 0
  },
  "metadata": {
    "buildTime": "2025-06-05T20:26:27.446Z",
    "sourceFiles": [
      "../../spec/api/js/out.js.json"
    ],
    "version": "1.0.0"
  }
}