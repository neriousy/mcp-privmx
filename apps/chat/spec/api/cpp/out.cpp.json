{
  "core": [
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "BackendRequester",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::BackendRequester",
          "description": "'BackendRequester' provides functions to call PrivMX Bridge API. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "backendRequest",
              "description": "Sends a request to PrivMX Bridge API using access token for authorization.",
              "snippet": "static std::string backendRequest(\n const std::string &serverUrl\n const std::string &accessToken\n const std::string &method\n const std::string &paramsAsJson\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "serverUrl",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "PrivMX Bridge server URL "
                },
                {
                  "name": "accessToken",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "token for authorization (see PrivMX Bridge API for more details) "
                },
                {
                  "name": "method",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method to call "
                },
                {
                  "name": "paramsAsJson",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method's parameters in JSON format"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response "
                }
              ]
            },
            {
              "type": "method",
              "name": "backendRequest",
              "description": "Sends request to PrivMX Bridge API.",
              "snippet": "static std::string backendRequest(\n const std::string &serverUrl\n const std::string &method\n const std::string &paramsAsJson\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "serverUrl",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "PrivMX Bridge server URL "
                },
                {
                  "name": "method",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method to call "
                },
                {
                  "name": "paramsAsJson",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method's parameters in JSON format"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response "
                }
              ]
            },
            {
              "type": "method",
              "name": "backendRequest",
              "description": "Sends a request to PrivMX Bridge API using pair of API KEY ID and API KEY SECRET for authorization.",
              "snippet": "static std::string backendRequest(\n const std::string &serverUrl\n const std::string &apiKeyId\n const std::string &apiKeySecret\n const int64_t mode\n const std::string &method\n const std::string &paramsAsJson\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "serverUrl",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "PrivMX Bridge server URL "
                },
                {
                  "name": "apiKeyId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API KEY ID (see PrivMX Bridge API for more details) "
                },
                {
                  "name": "apiKeySecret",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API KEY SECRET (see PrivMX Bridge API for more details) "
                },
                {
                  "name": "mode",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "allows you to set whether the request should be signed (mode = 1) or plain (mode = 0) "
                },
                {
                  "name": "method",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method to call "
                },
                {
                  "name": "paramsAsJson",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "API method's parameters in JSON format"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Buffer",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::Buffer",
          "description": "'Buffer' provides simple string buffer implementation. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "from",
              "description": "Creates Buffer from `std::string`.",
              "snippet": "static Buffer from(\n const std::string &str\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "str",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "string to convert to Buffer"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Buffer",
                    "optional": false
                  },
                  "description": "Buffer object "
                }
              ]
            },
            {
              "type": "method",
              "name": "from",
              "description": "Creates Buffer from `char*`.",
              "snippet": "static Buffer from(\n const char *data\n std::size_t size\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "data",
                  "type": {
                    "name": "const char *",
                    "optional": false
                  },
                  "description": "the char* to convert to Buffer "
                },
                {
                  "name": "size",
                  "type": {
                    "name": "std::size_t",
                    "optional": false
                  },
                  "description": "data length"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Buffer",
                    "optional": false
                  },
                  "description": "Buffer object "
                }
              ]
            },
            {
              "type": "method",
              "name": "stdString",
              "description": "Gets data as `std::string` from Buffer.",
              "snippet": "const std::string & stdString() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "conststd::string&",
                    "optional": false
                  },
                  "description": "data as std::string "
                }
              ]
            },
            {
              "type": "method",
              "name": "stdString",
              "description": "Gets data as `std::string` from Buffer.",
              "snippet": "std::string & stdString()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string&",
                    "optional": false
                  },
                  "description": "data as std::string "
                }
              ]
            },
            {
              "type": "method",
              "name": "size",
              "description": "Gets Buffer data size.",
              "snippet": "std::size_t size() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::size_t",
                    "optional": false
                  },
                  "description": "data size "
                }
              ]
            },
            {
              "type": "method",
              "name": "data",
              "description": "Gets data as char* from Buffer.",
              "snippet": "const char * data() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "constchar*",
                    "optional": false
                  },
                  "description": "data as char* "
                }
              ]
            },
            {
              "type": "method",
              "name": "operator==",
              "description": "",
              "snippet": "bool operator==(\n const Buffer &obj\n) const",
              "methodType": "method",
              "params": [
                {
                  "name": "obj",
                  "type": {
                    "name": "const Buffer &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Config",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::Config",
          "description": "'Config' provides Endpoint's configuration functions. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "setCertsPath",
              "description": "Allows to set path to the SSL certificate file.",
              "snippet": "static void setCertsPath(\n const std::string &certsPath\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "certsPath",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "path to file "
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Connection",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::Connection",
          "description": "'Connection' represents and manages the current connection between the Endpoint and the Bridge server. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "connect",
              "description": "Connects to the PrivMX Bridge server.",
              "snippet": "static Connection connect(const std::string &userPrivKey\n const std::string &solutionId\n const std::string &bridgeUrl\n const PKIVerificationOptions &verificationOptions=PKIVerificationOptions())",
              "methodType": "static",
              "params": [
                {
                  "name": "userPrivKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "user's private key "
                },
                {
                  "name": "solutionId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Solution "
                },
                {
                  "name": "bridgeUrl",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "Bridge Server URL "
                },
                {
                  "name": "verificationOptions",
                  "type": {
                    "name": "const PKIVerificationOptions &",
                    "optional": false
                  },
                  "description": "PrivMX Bridge server instance verification options using a PKI server"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object "
                }
              ]
            },
            {
              "type": "method",
              "name": "connectPublic",
              "description": "Connects to the PrivMX Bridge Server as a guest user.",
              "snippet": "static Connection connectPublic(const std::string &solutionId\n const std::string &bridgeUrl\n const PKIVerificationOptions &verificationOptions=PKIVerificationOptions())",
              "methodType": "static",
              "params": [
                {
                  "name": "solutionId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Solution "
                },
                {
                  "name": "bridgeUrl",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "Bridge Server URL "
                },
                {
                  "name": "verificationOptions",
                  "type": {
                    "name": "const PKIVerificationOptions &",
                    "optional": false
                  },
                  "description": "PrivMX Bridge server instance verification options using a PKI server"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object "
                }
              ]
            },
            {
              "type": "method",
              "name": "getConnectionId",
              "description": "Gets the ID of the current connection.",
              "snippet": "int64_t getConnectionId()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "ID of the connection "
                }
              ]
            },
            {
              "type": "method",
              "name": "listContexts",
              "description": "Gets a list of Contexts available for the user.",
              "snippet": "PagingList< Context > listContexts(\n const PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList<Context>",
                    "optional": false
                  },
                  "description": "struct containing a list of Contexts "
                }
              ]
            },
            {
              "type": "method",
              "name": "getContextUsers",
              "description": "Gets a list of users of given context.",
              "snippet": "std::vector< UserInfo > getContextUsers(\n const std::string &contextId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the context"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::vector<UserInfo>",
                    "optional": false
                  },
                  "description": "vector containing a list of users Info "
                }
              ]
            },
            {
              "type": "method",
              "name": "disconnect",
              "description": "Disconnects from the PrivMX Bridge server. ",
              "snippet": "void disconnect()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "setUserVerifier",
              "description": "Sets user's custom verification callback.\n\nThe feature allows the developer to set up a callback for user verification. A developer can implement an interface and pass the implementation to the function. Each time data is read from the container, a callback will be triggered, allowing the developer to validate the sender in an external service, e.g. Developer's Application Server or PKI Server. ",
              "snippet": "void setUserVerifier(\n std::shared_ptr<UserVerifierInterface> verifier\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "verifier",
                  "type": {
                    "name": "std::shared_ptr<UserVerifierInterface>",
                    "optional": false
                  },
                  "description": "an implementation of the UserVerifierInterface "
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Event",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::core::Event",
          "description": "Holds the information about an event. ",
          "fields": [
            {
              "name": "type",
              "description": "Holds the type of the event ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string type"
            },
            {
              "name": "channel",
              "description": "Holds the channel of the event ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string channel"
            },
            {
              "name": "connectionId",
              "description": "ID of the connection (unique) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t connectionId"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "Event",
              "description": "'Event' class constructor",
              "snippet": "Event(\n const std::string &type\n)",
              "methodType": "constructor",
              "params": [
                {
                  "name": "type",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "event type "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Converts Event's data to JSON string",
              "snippet": "virtual std::string toJSON() const =0",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "EventHolder",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::EventHolder",
          "description": "'EventHolder' is an helper class containing functions to operate on 'Event' objects. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "EventHolder",
              "description": "'EventHolder' constructor",
              "snippet": "EventHolder(\n const std::shared_ptr<Event> &event\n)",
              "methodType": "constructor",
              "params": [
                {
                  "name": "event",
                  "type": {
                    "name": "const std::shared_ptr<Event> &",
                    "optional": false
                  },
                  "description": "pointer to the 'Event' object to use in the 'EventHolder' "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "type",
              "description": "Extracts Event's type",
              "snippet": "const std::string & type() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "conststd::string&",
                    "optional": false
                  },
                  "description": "type of the 'Event' "
                }
              ]
            },
            {
              "type": "method",
              "name": "channel",
              "description": "Extracts Event's channel",
              "snippet": "const std::string & channel() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "conststd::string&",
                    "optional": false
                  },
                  "description": "channel that the 'Event\" arrived "
                }
              ]
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Serializes an Event to the JSON string",
              "snippet": "std::string toJSON() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string representation of the 'Event' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "get",
              "description": "Gets 'Event' object",
              "snippet": "const std::shared_ptr< Event > & get() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "conststd::shared_ptr<Event>&",
                    "optional": false
                  },
                  "description": "pointer to the underlying 'Event' object "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "EventQueue",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::EventQueue",
          "description": "'EventQueue' is a singleton class representing a queue for storing events. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "getInstance",
              "description": "Gets the EventQueue instance.",
              "snippet": "static EventQueue getInstance()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "EventQueue",
                    "optional": false
                  },
                  "description": "EventQueue object "
                }
              ]
            },
            {
              "type": "method",
              "name": "emitBreakEvent",
              "description": "Puts the break event on the events queue.\n\nYou can use it to break the `waitEvent` loop. ",
              "snippet": "void emitBreakEvent()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "waitEvent",
              "description": "Starts a loop waiting for an Event.",
              "snippet": "EventHolder waitEvent()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "EventHolder",
                    "optional": false
                  },
                  "description": "EventHolder object "
                }
              ]
            },
            {
              "type": "method",
              "name": "getEvent",
              "description": "Gets the first event from the events queue.",
              "snippet": "std::optional< EventHolder > getEvent()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::optional<EventHolder>",
                    "optional": false
                  },
                  "description": "EventHolder object (optional) "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Events",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::core::Events",
          "description": "'Events' provides the helpers methods for module's events management. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "isLibBreakEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'LibBreakEvent'",
              "snippet": "static bool isLibBreakEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'LibBreakEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractLibBreakEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'LibBreakEvent'",
              "snippet": "static LibBreakEvent extractLibBreakEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "LibBreakEvent",
                    "optional": false
                  },
                  "description": "'LibBreakEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isLibPlatformDisconnectedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'LibPlatformDisconnectedEvent'",
              "snippet": "static bool isLibPlatformDisconnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'LibPlatformDisconnectedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractLibPlatformDisconnectedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'LibPlatformDisconnectedEvent'",
              "snippet": "static LibPlatformDisconnectedEvent extractLibPlatformDisconnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "LibPlatformDisconnectedEvent",
                    "optional": false
                  },
                  "description": "'LibPlatformDisconnectedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isLibConnectedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'LibConnectedEvent'",
              "snippet": "static bool isLibConnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'LibConnectedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractLibConnectedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'LibConnectedEvent'",
              "snippet": "static LibConnectedEvent extractLibConnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "LibConnectedEvent",
                    "optional": false
                  },
                  "description": "'LibConnectedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isLibDisconnectedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'LibDisconnectedEvent'",
              "snippet": "static bool isLibDisconnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'LibDisconnectedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractLibDisconnectedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'LibDisconnectedEvent'",
              "snippet": "static LibDisconnectedEvent extractLibDisconnectedEvent(\n const EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "LibDisconnectedEvent",
                    "optional": false
                  },
                  "description": "'LibDisconnectedEvent' object "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "LibBreakEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::core::LibBreakEvent",
          "description": "Event that can be emitted to break the waitEvent loop. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "LibBreakEvent",
              "description": "Event constructor ",
              "snippet": "LibBreakEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "LibConnectedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::core::LibConnectedEvent",
          "description": "Emitted after connection to the Bridge Server has been established ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "LibConnectedEvent",
              "description": "Event constructor ",
              "snippet": "LibConnectedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "LibDisconnectedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::core::LibDisconnectedEvent",
          "description": "Emitted after disconnection from the Endpoint by explicit disconnect call. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "LibDisconnectedEvent",
              "description": "Event constructor ",
              "snippet": "LibDisconnectedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BridgeIdentity",
          "description": "Bridge server identification details. ",
          "snippet": "struct privmx::endpoint::core::BridgeIdentity{...}",
          "fields": [
            {
              "name": "url",
              "description": "Bridge URL. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string url"
            },
            {
              "name": "pubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > pubKey"
            },
            {
              "name": "instanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > instanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicy{...} : ContainerPolicyWithoutItem",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container's items ",
              "type": {
                "name": "std::optional< ItemPolicy >",
                "optional": false
              },
              "snippet": "std::optional< ItemPolicy > item"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container's policies. ",
          "snippet": "struct privmx::endpoint::core::ContainerPolicyWithoutItem{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "update",
              "description": "Determine who can update a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete a container ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            },
            {
              "name": "updatePolicy",
              "description": "Determine who can update policy ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determine whether the updater can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > updaterCanBeRemovedFromManagers"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determine whether the owner can be removed from the list of managers ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > ownerCanBeRemovedFromManagers"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information. ",
          "snippet": "struct privmx::endpoint::core::Context{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user requesting information ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies. ",
          "snippet": "struct privmx::endpoint::core::ItemPolicy{...}",
          "fields": [
            {
              "name": "get",
              "description": "Determine who can get an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > get"
            },
            {
              "name": "listMy",
              "description": "Determine who can list items created by me ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listMy"
            },
            {
              "name": "listAll",
              "description": "Determine who can list all items ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > listAll"
            },
            {
              "name": "create",
              "description": "Determine who can create an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > create"
            },
            {
              "name": "update",
              "description": "Determine who can update an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > update"
            },
            {
              "name": "delete_",
              "description": "Determine who can delete an item ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > delete_"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods. ",
          "snippet": "struct privmx::endpoint::core::PagingList{...}",
          "fields": [
            {
              "name": "totalAvailable",
              "description": "total items available to get ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t totalAvailable"
            },
            {
              "name": "readItems",
              "description": "list of items read during single method call ",
              "type": {
                "name": "std::vector< T >",
                "optional": false
              },
              "snippet": "std::vector< T > readItems"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Contains query parameters for methods returning lists (PagingList). ",
          "snippet": "struct privmx::endpoint::core::PagingQuery{...}",
          "fields": [
            {
              "name": "skip",
              "description": "number of elements to skip from result ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t skip"
            },
            {
              "name": "limit",
              "description": "limit of elements to return for query ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t limit"
            },
            {
              "name": "sortOrder",
              "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending) ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string sortOrder"
            },
            {
              "name": "lastId",
              "description": "ID of the element from which query results should start ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > lastId"
            },
            {
              "name": "queryAsJson",
              "description": "extra query parameters in serialized JSON ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > queryAsJson"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "PKIVerificationOptions",
          "description": "PrivMX Bridge server instance verification options using a PKI server. ",
          "snippet": "struct privmx::endpoint::core::PKIVerificationOptions{...}",
          "fields": [
            {
              "name": "bridgePubKey",
              "description": "Bridge public Key. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgePubKey"
            },
            {
              "name": "bridgeInstanceId",
              "description": "Bridge instance Id given by PKI. ",
              "type": {
                "name": "std::optional< std::string >",
                "optional": false
              },
              "snippet": "std::optional< std::string > bridgeInstanceId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserInfo",
          "description": "Contains Information about user ",
          "snippet": "struct privmx::endpoint::core::UserInfo{...}",
          "fields": [
            {
              "name": "user",
              "description": "User publicKey and userId ",
              "type": {
                "name": "UserWithPubKey",
                "optional": false
              },
              "snippet": "UserWithPubKey user"
            },
            {
              "name": "isActive",
              "description": "is user connected to bridge ",
              "type": {
                "name": "bool",
                "optional": false
              },
              "snippet": "bool isActive"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of a user and the corresponding public key. ",
          "snippet": "struct privmx::endpoint::core::UserWithPubKey{...}",
          "fields": [
            {
              "name": "userId",
              "description": "ID of the user ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string userId"
            },
            {
              "name": "pubKey",
              "description": "user's public key ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string pubKey"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    },
    {
      "title": "LibPlatformDisconnectedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::core::LibPlatformDisconnectedEvent",
          "description": "Emitted when connection to the PrivMX Bridge Server has been lost ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "LibPlatformDisconnectedEvent",
              "description": "Event constructor ",
              "snippet": "LibPlatformDisconnectedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::core"
            }
          ]
        }
      ]
    }
  ],
  "crypto": [
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BIP39_t",
          "description": "Struct containing ECC generated key using BIP-39. ",
          "snippet": "struct privmx::endpoint::crypto::BIP39_t{...}",
          "fields": [
            {
              "name": "mnemonic",
              "description": "BIP-39 mnemonic. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string mnemonic"
            },
            {
              "name": "ext_key",
              "description": "Ecc Key. ",
              "type": {
                "name": "ExtKey",
                "optional": false
              },
              "snippet": "ExtKey ext_key"
            },
            {
              "name": "entropy",
              "description": "BIP-39 entropy. ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer entropy"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::crypto"
            }
          ]
        }
      ]
    },
    {
      "title": "CryptoApi",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::crypto::CryptoApi",
          "description": "'CryptoApi' is a class representing Endpoint's API for cryptographic operations. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "create",
              "description": "Creates instance of 'CryptoApi'.",
              "snippet": "static CryptoApi create()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "CryptoApi",
                    "optional": false
                  },
                  "description": "CryptoApi object "
                }
              ]
            },
            {
              "type": "method",
              "name": "signData",
              "description": "Creates a signature of data using given key.",
              "snippet": "core::Buffer signData(\n const core::Buffer &data\n const std::string &privateKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "buffer to sign "
                },
                {
                  "name": "privateKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "key used to sign data "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "signature of data "
                }
              ]
            },
            {
              "type": "method",
              "name": "verifySignature",
              "description": "Validate a signature of data using given key.",
              "snippet": "bool verifySignature(\n const core::Buffer &data\n const core::Buffer &signature\n const std::string &publicKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "buffer "
                },
                {
                  "name": "signature",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "signature of data to verify "
                },
                {
                  "name": "publicKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "public ECC key in BASE58DER format used to validate data "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "data validation result "
                }
              ]
            },
            {
              "type": "method",
              "name": "generatePrivateKey",
              "description": "Generates a new private ECC key.",
              "snippet": "std::string generatePrivateKey(\n const std::optional<std::string> &randomSeed\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "randomSeed",
                  "type": {
                    "name": "const std::optional<std::string> &",
                    "optional": false
                  },
                  "description": "optional string used as the base to generate the new key "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "generated ECC key in WIF format "
                }
              ]
            },
            {
              "type": "method",
              "name": "derivePrivateKey",
              "description": "Generates a new private ECC key from a password using pbkdf2.",
              "snippet": "std::string derivePrivateKey(\n const std::string &password\n const std::string &salt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the new key "
                },
                {
                  "name": "salt",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "random string (additional input for the hashing function)"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "generated ECC key in WIF format "
                }
              ]
            },
            {
              "type": "method",
              "name": "derivePrivateKey2",
              "description": "Generates a new private ECC key from a password using pbkdf2. This version of the derive function has a rounds count increased to 200k. This makes using this function a safer choice, but it makes the received key different than in the original version.",
              "snippet": "std::string derivePrivateKey2(\n const std::string &password\n const std::string &salt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the new key "
                },
                {
                  "name": "salt",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "random string (additional input for the hashing function)"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "generated ECC key in WIF format "
                }
              ]
            },
            {
              "type": "method",
              "name": "derivePublicKey",
              "description": "Generates a new public ECC key as a pair for an existing private key. ",
              "snippet": "std::string derivePublicKey(\n const std::string &privateKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "privateKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "generated ECC key in BASE58DER format "
                }
              ]
            },
            {
              "type": "method",
              "name": "generateKeySymmetric",
              "description": "Generates a new symmetric key. ",
              "snippet": "core::Buffer generateKeySymmetric()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "generated key "
                }
              ]
            },
            {
              "type": "method",
              "name": "encryptDataSymmetric",
              "description": "Encrypts buffer with a given key using AES.",
              "snippet": "core::Buffer encryptDataSymmetric(\n const core::Buffer &data\n const core::Buffer &symmetricKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "buffer to encrypt "
                },
                {
                  "name": "symmetricKey",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "key used to encrypt data "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "encrypted data buffer "
                }
              ]
            },
            {
              "type": "method",
              "name": "decryptDataSymmetric",
              "description": "Decrypts buffer with a given key using AES.",
              "snippet": "core::Buffer decryptDataSymmetric(\n const core::Buffer &data\n const core::Buffer &symmetricKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "buffer to decrypt "
                },
                {
                  "name": "symmetricKey",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "key used to decrypt data "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "plain (decrypted) data buffer "
                }
              ]
            },
            {
              "type": "method",
              "name": "convertPEMKeytoWIFKey",
              "description": "Converts given private key in PEM format to its WIF format.",
              "snippet": "std::string convertPEMKeytoWIFKey(\n const std::string &pemKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pemKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "private key to convert "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "private key in WIF format "
                }
              ]
            },
            {
              "type": "method",
              "name": "convertPGPAsn1KeyToBase58DERKey",
              "description": "Converts given public key in PGP format to its base58DER format.",
              "snippet": "std::string convertPGPAsn1KeyToBase58DERKey(\n const std::string &pgpKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pgpKey",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "private key in base58DER format "
                }
              ]
            },
            {
              "type": "method",
              "name": "generateBip39",
              "description": "Generates ECC key and BIP-39 mnemonic from a password using BIP-39.",
              "snippet": "BIP39_t generateBip39(std::size_t strength\n const std::string &password=std::string())",
              "methodType": "method",
              "params": [
                {
                  "name": "strength",
                  "type": {
                    "name": "std::size_t",
                    "optional": false
                  },
                  "description": "size of BIP-39 entropy, must be a multiple of 32 "
                },
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the Key "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "BIP39_t",
                    "optional": false
                  },
                  "description": "BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy "
                }
              ]
            },
            {
              "type": "method",
              "name": "fromMnemonic",
              "description": "Generates ECC key using BIP-39 mnemonic.",
              "snippet": "BIP39_t fromMnemonic(const std::string &mnemonic\n const std::string &password=std::string())",
              "methodType": "method",
              "params": [
                {
                  "name": "mnemonic",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the BIP-39 entropy used to generate the Key "
                },
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the Key "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "BIP39_t",
                    "optional": false
                  },
                  "description": "BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy "
                }
              ]
            },
            {
              "type": "method",
              "name": "fromEntropy",
              "description": "Generates ECC key using BIP-39 entropy.",
              "snippet": "BIP39_t fromEntropy(const core::Buffer &entropy\n const std::string &password=std::string())",
              "methodType": "method",
              "params": [
                {
                  "name": "entropy",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "the BIP-39 entropy used to generate the Key "
                },
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the Key "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "BIP39_t",
                    "optional": false
                  },
                  "description": "BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy "
                }
              ]
            },
            {
              "type": "method",
              "name": "entropyToMnemonic",
              "description": "Converts BIP-39 entropy to mnemonic.",
              "snippet": "std::string entropyToMnemonic(\n const core::Buffer &entropy\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "entropy",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "BIP-39 entropy "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "BIP-39 mnemonic "
                }
              ]
            },
            {
              "type": "method",
              "name": "mnemonicToEntropy",
              "description": "Converts BIP-39 mnemonic to entropy.",
              "snippet": "core::Buffer mnemonicToEntropy(\n const std::string &mnemonic\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "mnemonic",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "BIP-39 mnemonic "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "BIP-39 entropy "
                }
              ]
            },
            {
              "type": "method",
              "name": "mnemonicToSeed",
              "description": "Generates a seed used to generate a key using BIP-39 mnemonic with PBKDF2.",
              "snippet": "core::Buffer mnemonicToSeed(const std::string &mnemonic\n const std::string &password=std::string())",
              "methodType": "method",
              "params": [
                {
                  "name": "mnemonic",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "BIP-39 mnemonic "
                },
                {
                  "name": "password",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the password used to generate the seed "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "generated seed "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::crypto"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "BIP39_t",
          "description": "Struct containing ECC generated key using BIP-39. ",
          "snippet": "struct privmx::endpoint::crypto::BIP39_t{...}",
          "fields": [
            {
              "name": "mnemonic",
              "description": "BIP-39 mnemonic. ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string mnemonic"
            },
            {
              "name": "ext_key",
              "description": "Ecc Key. ",
              "type": {
                "name": "ExtKey",
                "optional": false
              },
              "snippet": "ExtKey ext_key"
            },
            {
              "name": "entropy",
              "description": "BIP-39 entropy. ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer entropy"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::crypto"
            }
          ]
        }
      ]
    },
    {
      "title": "ExtKey",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::crypto::ExtKey",
          "description": "'ExtKey' is a class representing Extended keys and operations on it. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "fromSeed",
              "description": "Creates ExtKey from given seed. ",
              "snippet": "static ExtKey fromSeed(\n const core::Buffer &seed\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "seed",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "the seed used to generate Key "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ExtKey",
                    "optional": false
                  },
                  "description": "ExtKey object "
                }
              ]
            },
            {
              "type": "method",
              "name": "fromBase58",
              "description": "Decodes ExtKey from Base58 format.",
              "snippet": "static ExtKey fromBase58(\n const std::string &base58\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "base58",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "the ExtKey in Base58 "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ExtKey",
                    "optional": false
                  },
                  "description": "ExtKey object "
                }
              ]
            },
            {
              "type": "method",
              "name": "generateRandom",
              "description": "Generates a new ExtKey.",
              "snippet": "static ExtKey generateRandom()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "ExtKey",
                    "optional": false
                  },
                  "description": "ExtKey object "
                }
              ]
            },
            {
              "type": "method",
              "name": "derive",
              "description": "Generates child ExtKey from a current ExtKey using BIP32.",
              "snippet": "ExtKey derive(\n uint32_t index\n) const",
              "methodType": "method",
              "params": [
                {
                  "name": "index",
                  "type": {
                    "name": "uint32_t",
                    "optional": false
                  },
                  "description": "number from 0 to 2^31-1"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ExtKey",
                    "optional": false
                  },
                  "description": "ExtKey object "
                }
              ]
            },
            {
              "type": "method",
              "name": "deriveHardened",
              "description": "Generates hardened child ExtKey from a current ExtKey using BIP32.",
              "snippet": "ExtKey deriveHardened(\n uint32_t index\n) const",
              "methodType": "method",
              "params": [
                {
                  "name": "index",
                  "type": {
                    "name": "uint32_t",
                    "optional": false
                  },
                  "description": "number from 0 to 2^31-1"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ExtKey",
                    "optional": false
                  },
                  "description": "ExtKey object "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPrivatePartAsBase58",
              "description": "Converts ExtKey to Base58 string.",
              "snippet": "std::string getPrivatePartAsBase58() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ExtKey in Base58 format "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPublicPartAsBase58",
              "description": "Converts the public part of ExtKey to Base58 string.",
              "snippet": "std::string getPublicPartAsBase58() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ExtKey in Base58 format "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPrivateKey",
              "description": "Extracts ECC PrivateKey.",
              "snippet": "std::string getPrivateKey() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ECC key in WIF format "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPublicKey",
              "description": "Extracts ECC PublicKey.",
              "snippet": "std::string getPublicKey() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ECC key in BASE58DER format "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPrivateEncKey",
              "description": "Extracts raw ECC PrivateKey.",
              "snippet": "core::Buffer getPrivateEncKey() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "ECC PrivateKey "
                }
              ]
            },
            {
              "type": "method",
              "name": "getPublicKeyAsBase58Address",
              "description": "Extracts ECC PublicKey Address.",
              "snippet": "std::string getPublicKeyAsBase58Address() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ECC Address in BASE58 format "
                }
              ]
            },
            {
              "type": "method",
              "name": "getChainCode",
              "description": "",
              "snippet": "core::Buffer getChainCode() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "Raw chain code "
                }
              ]
            },
            {
              "type": "method",
              "name": "verifyCompactSignatureWithHash",
              "description": "",
              "snippet": "bool verifyCompactSignatureWithHash(\n const core::Buffer &message\n const core::Buffer &signature\n) const",
              "methodType": "method",
              "params": [
                {
                  "name": "message",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "data used on validation "
                },
                {
                  "name": "signature",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "signature of data to verify "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "message validation result "
                }
              ]
            },
            {
              "type": "method",
              "name": "isPrivate",
              "description": "Checks if ExtKey is Private.",
              "snippet": "bool isPrivate() const",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "returns true if ExtKey is private "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::crypto"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "title": "EventApi",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::event::EventApi",
          "description": "'EventApi' is a class representing Endpoint's API for context custom events. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "create",
              "description": "Creates an instance of 'EventApi'.",
              "snippet": "static EventApi create(\n core::Connection &connection\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "type": {
                    "name": "core::Connection &",
                    "optional": false
                  },
                  "description": "instance of 'Connection'"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "EventApi",
                    "optional": false
                  },
                  "description": "EventApi object "
                }
              ]
            },
            {
              "type": "method",
              "name": "EventApi",
              "description": "",
              "snippet": "EventApi()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "emitEvent",
              "description": "Emits the custom event on the given Context and channel.",
              "snippet": "void emitEvent(\n const std::string &contextId\n const std::vector<core::UserWithPubKey> &users\n const std::string &channelName\n const core::Buffer &eventData\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "list of UserWithPubKey objects which defines the recipients of the event "
                },
                {
                  "name": "channelName",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "name of the Channel "
                },
                {
                  "name": "eventData",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "event's data "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "subscribeForCustomEvents",
              "description": "Subscribe for the custom events on the given channel.",
              "snippet": "void subscribeForCustomEvents(\n const std::string &contextId\n const std::string &channelName\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context "
                },
                {
                  "name": "channelName",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "name of the Channel "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromCustomEvents",
              "description": "Unsubscribe from the custom events on the given channel.",
              "snippet": "void unsubscribeFromCustomEvents(\n const std::string &contextId\n const std::string &channelName\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context "
                },
                {
                  "name": "channelName",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "name of the Channel "
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::event"
            }
          ]
        }
      ]
    }
  ],
  "inbox": [
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Events",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::inbox::Events",
          "description": "'Events' provides the helpers methods for module's events management. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "isInboxCreatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'InboxCreatedEvent'",
              "snippet": "static bool isInboxCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'InboxCreatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractInboxCreatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'InboxCreatedEvent'",
              "snippet": "static InboxCreatedEvent extractInboxCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxCreatedEvent",
                    "optional": false
                  },
                  "description": "'InboxCreatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isInboxUpdatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'InboxUpdatedEvent'",
              "snippet": "static bool isInboxUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'InboxUpdatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractInboxUpdatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'InboxUpdatedEvent'",
              "snippet": "static InboxUpdatedEvent extractInboxUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxUpdatedEvent",
                    "optional": false
                  },
                  "description": "'InboxUpdatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isInboxDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'InboxDeletedEvent'",
              "snippet": "static bool isInboxDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'InboxDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractInboxDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'InboxDeletedEvent'",
              "snippet": "static InboxDeletedEvent extractInboxDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxDeletedEvent",
                    "optional": false
                  },
                  "description": "'InboxDeletedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isInboxEntryCreatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'InboxEntryCreatedEvent'",
              "snippet": "static bool isInboxEntryCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'InboxEntryCreatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractInboxEntryCreatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'InboxEntryCreatedEvent'",
              "snippet": "static InboxEntryCreatedEvent extractInboxEntryCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxEntryCreatedEvent",
                    "optional": false
                  },
                  "description": "'InboxEntryCreatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isInboxEntryDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'InboxEntryDeletedEvent'",
              "snippet": "static bool isInboxEntryDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'InboxEntryDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractInboxEntryDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'InboxEntryDeletedEvent'",
              "snippet": "static InboxEntryDeletedEvent extractInboxEntryDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxEntryDeletedEvent",
                    "optional": false
                  },
                  "description": "'InboxEntryDeletedEvent' object "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxApi",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::inbox::InboxApi",
          "description": "'InboxApi' is a class representing Endpoint's API for Inboxes and their entries. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "create",
              "description": "Creates an instance of 'InboxApi'.",
              "snippet": "static InboxApi create(\n core::Connection &connection\n thread::ThreadApi &threadApi\n store::StoreApi &storeApi\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "type": {
                    "name": "core::Connection &",
                    "optional": false
                  },
                  "description": "instance of 'Connection' "
                },
                {
                  "name": "threadApi",
                  "type": {
                    "name": "thread::ThreadApi &",
                    "optional": false
                  },
                  "description": "instance of 'ThreadApi' "
                },
                {
                  "name": "storeApi",
                  "type": {
                    "name": "store::StoreApi &",
                    "optional": false
                  },
                  "description": "instance of 'StoreApi'"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxApi",
                    "optional": false
                  },
                  "description": "InboxApi object "
                }
              ]
            },
            {
              "type": "method",
              "name": "createInbox",
              "description": "Creates a new Inbox.",
              "snippet": "std::string createInbox(\n const std::string &contextId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const std::optional<inbox::FilesConfig> &filesConfig\n const std::optional<core::ContainerPolicyWithoutItem> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context of the new Inbox "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "filesConfig",
                  "type": {
                    "name": "const std::optional<inbox::FilesConfig> &",
                    "optional": false
                  },
                  "description": "struct to override default file configuration "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicyWithoutItem> &",
                    "optional": false
                  },
                  "description": "Inbox policies "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ID of the created Inbox "
                }
              ]
            },
            {
              "type": "method",
              "name": "updateInbox",
              "description": "Updates an existing Inbox.",
              "snippet": "void updateInbox(\n const std::string &inboxId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const std::optional<inbox::FilesConfig> &filesConfig\n const int64_t version\n const bool force\n const bool forceGenerateNewKey\n const std::optional<core::ContainerPolicyWithoutItem> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox to update "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "filesConfig",
                  "type": {
                    "name": "const std::optional<inbox::FilesConfig> &",
                    "optional": false
                  },
                  "description": "struct to override default files configuration "
                },
                {
                  "name": "version",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "current version of the updated Inbox "
                },
                {
                  "name": "force",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force update (without checking version) "
                },
                {
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force to regenerate a key for the Inbox "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicyWithoutItem> &",
                    "optional": false
                  },
                  "description": "Inbox policies "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "getInbox",
              "description": "Gets a single Inbox by given Inbox ID.",
              "snippet": "Inbox getInbox(\n const std::string &inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox to get "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Inbox",
                    "optional": false
                  },
                  "description": "struct containing information about the Inbox "
                }
              ]
            },
            {
              "type": "method",
              "name": "listInboxes",
              "description": "Gets s list of Inboxes in given Context.",
              "snippet": "core::PagingList< inbox::Inbox > listInboxes(\n const std::string &contextId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context to get Inboxes from "
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<inbox::Inbox>",
                    "optional": false
                  },
                  "description": "struct containing list of Inboxes "
                }
              ]
            },
            {
              "type": "method",
              "name": "getInboxPublicView",
              "description": "Gets public data of given Inbox. You do not have to be logged in to call this function.",
              "snippet": "inbox::InboxPublicView getInboxPublicView(\n const std::string &inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox to get "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "inbox::InboxPublicView",
                    "optional": false
                  },
                  "description": "struct containing public accessible information about the Inbox "
                }
              ]
            },
            {
              "type": "method",
              "name": "deleteInbox",
              "description": "Deletes an Inbox by given Inbox ID.",
              "snippet": "void deleteInbox(\n const std::string &inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox to delete "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "prepareEntry",
              "description": "Prepares a request to send data to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "int64_t prepareEntry(const std::string &inboxId\n const core::Buffer &data\n const std::vector<int64_t> &inboxFileHandles=std::vector<int64_t>()\n const std::optional<std::string> &userPrivKey=std::nullopt)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox to which the request applies "
                },
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "entry data to send "
                },
                {
                  "name": "inboxFileHandles",
                  "type": {
                    "name": "const std::vector<int64_t> &",
                    "optional": false
                  },
                  "description": "optional list of file handles that will be sent with the request "
                },
                {
                  "name": "userPrivKey",
                  "type": {
                    "name": "const std::optional<std::string> &",
                    "optional": false
                  },
                  "description": "sender can optionally provide a private key, which will be used: 1) to sign the sent data, 2) to derivation of the public key, which will then be transferred along with the sent data and can be used in the future for further secure communication with the sender "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "handle "
                }
              ]
            },
            {
              "type": "method",
              "name": "sendEntry",
              "description": "Sends data to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "void sendEntry(\n const int64_t inboxHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "ID of the Inbox to which the request applies "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "readEntry",
              "description": "Gets an entry from an Inbox.",
              "snippet": "inbox::InboxEntry readEntry(\n const std::string &inboxEntryId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of an entry to read from the Inbox "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "inbox::InboxEntry",
                    "optional": false
                  },
                  "description": "struct containing data of the selected entry stored in the Inbox "
                }
              ]
            },
            {
              "type": "method",
              "name": "listEntries",
              "description": "Gets list of entries in given Inbox.",
              "snippet": "core::PagingList< inbox::InboxEntry > listEntries(\n const std::string &inboxId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Inbox "
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<inbox::InboxEntry>",
                    "optional": false
                  },
                  "description": "struct containing list of entries "
                }
              ]
            },
            {
              "type": "method",
              "name": "deleteEntry",
              "description": "Delete an entry from an Inbox.",
              "snippet": "void deleteEntry(\n const std::string &inboxEntryId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "createFileHandle",
              "description": "Creates a file handle to send a file to an Inbox. You do not have to be logged in to call this function.",
              "snippet": "int64_t createFileHandle(\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const int64_t &fileSize\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "file's public metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "file's private metadata "
                },
                {
                  "name": "fileSize",
                  "type": {
                    "name": "const int64_t &",
                    "optional": false
                  },
                  "description": "size of the file to send "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "file handle "
                }
              ]
            },
            {
              "type": "method",
              "name": "writeToFile",
              "description": "Sends file's data chunk to an Inbox. (note: To send the entire file - divide it into pieces of the desired size and call the function for each fragment.) You do not have to be logged in to call this function.",
              "snippet": "void writeToFile(\n const int64_t inboxHandle\n const int64_t inboxFileHandle\n const core::Buffer &dataChunk\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "Handle to the prepared Inbox entry "
                },
                {
                  "name": "inboxFileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "handle to the file where the uploaded chunk belongs "
                },
                {
                  "name": "dataChunk",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "int64_t openFile(\n const std::string &fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to read "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "handle to read file data "
                }
              ]
            },
            {
              "type": "method",
              "name": "readFromFile",
              "description": "Reads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.",
              "snippet": "core::Buffer readFromFile(\n const int64_t fileHandle\n const int64_t length\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "handle to the file "
                },
                {
                  "name": "length",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "size of data to read "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "buffer with file data chunk "
                }
              ]
            },
            {
              "type": "method",
              "name": "seekInFile",
              "description": "Moves file's read cursor.",
              "snippet": "void seekInFile(\n const int64_t fileHandle\n const int64_t position\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "handle to the file "
                },
                {
                  "name": "position",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "sets new cursor position "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "closeFile",
              "description": "Closes a file by given handle.",
              "snippet": "std::string closeFile(\n const int64_t fileHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "handle to the file "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ID of closed file "
                }
              ]
            },
            {
              "type": "method",
              "name": "subscribeForInboxEvents",
              "description": "Subscribes for the Inbox module main events. ",
              "snippet": "void subscribeForInboxEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromInboxEvents",
              "description": "Unsubscribes from the Inbox module main events. ",
              "snippet": "void unsubscribeFromInboxEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "subscribeForEntryEvents",
              "description": "Subscribes for events in given Inbox. ",
              "snippet": "void subscribeForEntryEvents(\n const std::string &inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromEntryEvents",
              "description": "Unsubscribes from events in given Inbox. ",
              "snippet": "void unsubscribeFromEntryEvents(\n const std::string &inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxCreatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::inbox::InboxCreatedEvent",
          "description": "",
          "fields": [
            {
              "name": "data",
              "description": "detailed information about Inbox ",
              "type": {
                "name": "Inbox",
                "optional": false
              },
              "snippet": "Inbox data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "InboxCreatedEvent",
              "description": "Event constructor ",
              "snippet": "InboxCreatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::inbox::InboxDeletedEvent",
          "description": "",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "InboxDeletedEventData",
                "optional": false
              },
              "snippet": "InboxDeletedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "InboxDeletedEvent",
              "description": "Event constructor ",
              "snippet": "InboxDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxEntryCreatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::inbox::InboxEntryCreatedEvent",
          "description": "Holds data of event that arrives when Inbox entry is created. ",
          "fields": [
            {
              "name": "data",
              "description": "detailed information about InboxEntry ",
              "type": {
                "name": "inbox::InboxEntry",
                "optional": false
              },
              "snippet": "inbox::InboxEntry data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "InboxEntryCreatedEvent",
              "description": "Event constructor ",
              "snippet": "InboxEntryCreatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxEntryDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::inbox::InboxEntryDeletedEvent",
          "description": "Holds data of event that arrives when Thread message is deleted. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "InboxEntryDeletedEventData",
                "optional": false
              },
              "snippet": "InboxEntryDeletedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "InboxEntryDeletedEvent",
              "description": "Event constructor ",
              "snippet": "InboxEntryDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox file configuration. ",
          "snippet": "struct privmx::endpoint::inbox::FilesConfig{...}",
          "fields": [
            {
              "name": "minCount",
              "description": "minimum number of files required when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t minCount"
            },
            {
              "name": "maxCount",
              "description": "maximum number of files allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "maximum file size allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "maximum size of all files in total allowed when sending inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t maxWholeUploadSize"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::Inbox{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID ot the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Inbox ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration ",
              "type": {
                "name": "std::optional< FilesConfig >",
                "optional": false
              },
              "snippet": "std::optional< FilesConfig > filesConfig"
            },
            {
              "name": "policy",
              "description": "Inbox policies ",
              "type": {
                "name": "core::ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "core::ContainerPolicyWithoutItem policy"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Inbox data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::inbox::InboxDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntry{...}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "data",
              "description": "entry data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "files",
              "description": "list of files attached to the entry ",
              "type": {
                "name": "std::vector< store::File >",
                "optional": false
              },
              "snippet": "std::vector< store::File > files"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the entry ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Inbox entry ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Entry data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information of `InboxEntryDeleted` event data. ",
          "snippet": "struct privmx::endpoint::inbox::InboxEntryDeletedEventData{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "Inbox ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "entryId",
              "description": "Inbox Entry ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string entryId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds public information of an Inbox. ",
          "snippet": "struct privmx::endpoint::inbox::InboxPublicView{...}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string inboxId"
            },
            {
              "name": "version",
              "description": "version of the Inbox ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxUpdatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::inbox::InboxUpdatedEvent",
          "description": "",
          "fields": [
            {
              "name": "data",
              "description": "detailed information about Inbox ",
              "type": {
                "name": "Inbox",
                "optional": false
              },
              "snippet": "Inbox data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "InboxUpdatedEvent",
              "description": "Event constructor ",
              "snippet": "InboxUpdatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::inbox"
            }
          ]
        }
      ]
    }
  ],
  "store": [
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Events",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::store::Events",
          "description": "'Events' provides the helpers methods for module's events management. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "isStoreCreatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreCreatedEvent'",
              "snippet": "static bool isStoreCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreCreatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreCreatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreCreatedEvent'",
              "snippet": "static StoreCreatedEvent extractStoreCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreCreatedEvent",
                    "optional": false
                  },
                  "description": "'StoreCreatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreUpdatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreUpdatedEvent'",
              "snippet": "static bool isStoreUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreUpdatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreUpdatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreUpdatedEvent'",
              "snippet": "static StoreUpdatedEvent extractStoreUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreUpdatedEvent",
                    "optional": false
                  },
                  "description": "'StoreUpdatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreDeletedEvent'",
              "snippet": "static bool isStoreDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreDeletedEvent'",
              "snippet": "static StoreDeletedEvent extractStoreDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreDeletedEvent",
                    "optional": false
                  },
                  "description": "'StoreDeletedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreStatsChangedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreStatsChangedEvent'",
              "snippet": "static bool isStoreStatsChangedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreStatsChangedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreStatsChangedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreStatsChangedEvent'",
              "snippet": "static StoreStatsChangedEvent extractStoreStatsChangedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreStatsChangedEvent",
                    "optional": false
                  },
                  "description": "'StoreStatsChangedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreFileCreatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreFileCreatedEvent'",
              "snippet": "static bool isStoreFileCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreFileCreatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreFileCreatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreFileCreatedEvent'",
              "snippet": "static StoreFileCreatedEvent extractStoreFileCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreFileCreatedEvent",
                    "optional": false
                  },
                  "description": "'StoreFileCreatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreFileUpdatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreFileUpdatedEvent'",
              "snippet": "static bool isStoreFileUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreFileUpdatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreFileUpdatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreFileUpdatedEvent'",
              "snippet": "static StoreFileUpdatedEvent extractStoreFileUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreFileUpdatedEvent",
                    "optional": false
                  },
                  "description": "'StoreFileUpdatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isStoreFileDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'StoreFileDeletedEvent'",
              "snippet": "static bool isStoreFileDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'StoreFileDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractStoreFileDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'StoreFileDeletedEvent'",
              "snippet": "static StoreFileDeletedEvent extractStoreFileDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreFileDeletedEvent",
                    "optional": false
                  },
                  "description": "'StoreFileDeletedEvent' object "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreApi",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::store::StoreApi",
          "description": "'StoreApi' is a class representing Endpoint's API for Stores and their files. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "create",
              "description": "Creates an instance of 'StoreApi'.",
              "snippet": "static StoreApi create(\n core::Connection &connection\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "type": {
                    "name": "core::Connection &",
                    "optional": false
                  },
                  "description": "instance of 'Connection'"
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreApi",
                    "optional": false
                  },
                  "description": "StoreApi object "
                }
              ]
            },
            {
              "type": "method",
              "name": "createStore",
              "description": "Creates a new Store in given Context.",
              "snippet": "std::string createStore(\n const std::string &contextId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const std::optional<core::ContainerPolicy> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context to create the Store in "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Store "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicy> &",
                    "optional": false
                  },
                  "description": "Store's policies "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "created Store ID "
                }
              ]
            },
            {
              "type": "method",
              "name": "updateStore",
              "description": "Updates an existing Store.",
              "snippet": "void updateStore(\n const std::string &storeId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const int64_t version\n const bool force\n const bool forceGenerateNewKey\n const std::optional<core::ContainerPolicy> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Store to update "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Store "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "version",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "current version of the updated Store "
                },
                {
                  "name": "force",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force update (without checking version) "
                },
                {
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force to regenerate a key for the Store "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicy> &",
                    "optional": false
                  },
                  "description": "Store's policies "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "deleteStore",
              "description": "Deletes a Store by given Store ID.",
              "snippet": "void deleteStore(\n const std::string &storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Store to delete "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "getStore",
              "description": "Gets a single Store by given Store ID.",
              "snippet": "Store getStore(\n const std::string &storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Store to get "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Store",
                    "optional": false
                  },
                  "description": "struct containing information about the Store "
                }
              ]
            },
            {
              "type": "method",
              "name": "listStores",
              "description": "Gets a list of Stores in given Context.",
              "snippet": "core::PagingList< Store > listStores(\n const std::string &contextId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context to get the Stores from "
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<Store>",
                    "optional": false
                  },
                  "description": "struct containing list of Stores "
                }
              ]
            },
            {
              "type": "method",
              "name": "createFile",
              "description": "Creates a new file in a Store.",
              "snippet": "int64_t createFile(\n const std::string &storeId\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const int64_t size\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Store to create the file in "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public file metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private file metadata "
                },
                {
                  "name": "size",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "size of the file "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "handle to write data "
                }
              ]
            },
            {
              "type": "method",
              "name": "updateFile",
              "description": "Update an existing file in a Store.",
              "snippet": "int64_t updateFile(\n const std::string &fileId\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const int64_t size\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to update "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public file metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private file metadata "
                },
                {
                  "name": "size",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "size of the file "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "handle to write file data "
                }
              ]
            },
            {
              "type": "method",
              "name": "updateFileMeta",
              "description": "Update metadata of an existing file in a Store.",
              "snippet": "void updateFileMeta(\n const std::string &fileId\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to update "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public file metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private file metadata "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "writeToFile",
              "description": "Writes a file data.",
              "snippet": "void writeToFile(\n const int64_t fileHandle\n const core::Buffer &dataChunk\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": ""
                },
                {
                  "name": "dataChunk",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "file data chunk "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "deleteFile",
              "description": "Deletes a file by given ID.",
              "snippet": "void deleteFile(\n const std::string &fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to delete "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "getFile",
              "description": "Gets a single file by the given file ID.",
              "snippet": "File getFile(\n const std::string &fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to get "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "File",
                    "optional": false
                  },
                  "description": "struct containing information about the file "
                }
              ]
            },
            {
              "type": "method",
              "name": "listFiles",
              "description": "Gets a list of files in given Store.",
              "snippet": "core::PagingList< File > listFiles(\n const std::string &storeId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<File>",
                    "optional": false
                  },
                  "description": "struct containing list of files "
                }
              ]
            },
            {
              "type": "method",
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "int64_t openFile(\n const std::string &fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the file to read "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "int64_t",
                    "optional": false
                  },
                  "description": "handle to read file data "
                }
              ]
            },
            {
              "type": "method",
              "name": "readFromFile",
              "description": "Reads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.",
              "snippet": "core::Buffer readFromFile(\n const int64_t fileHandle\n const int64_t length\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": ""
                },
                {
                  "name": "length",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "size of data to read "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::Buffer",
                    "optional": false
                  },
                  "description": "buffer with file data chunk "
                }
              ]
            },
            {
              "type": "method",
              "name": "seekInFile",
              "description": "Moves read cursor.",
              "snippet": "void seekInFile(\n const int64_t fileHandle\n const int64_t position\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": ""
                },
                {
                  "name": "position",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "new cursor position "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "closeFile",
              "description": "Closes the file handle.",
              "snippet": "std::string closeFile(\n const int64_t fileHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ID of closed file "
                }
              ]
            },
            {
              "type": "method",
              "name": "subscribeForStoreEvents",
              "description": "Subscribes for the Store module main events. ",
              "snippet": "void subscribeForStoreEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromStoreEvents",
              "description": "Unsubscribes from the Store module main events. ",
              "snippet": "void unsubscribeFromStoreEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "subscribeForFileEvents",
              "description": "Subscribes for events in given Store. ",
              "snippet": "void subscribeForFileEvents(\n const std::string &storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromFileEvents",
              "description": "Unsubscribes from events in given Store. ",
              "snippet": "void unsubscribeFromFileEvents(\n const std::string &storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreCreatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreCreatedEvent",
          "description": "Holds data of event that arrives when Store is created. ",
          "fields": [
            {
              "name": "data",
              "description": "Store detailed info ",
              "type": {
                "name": "Store",
                "optional": false
              },
              "snippet": "Store data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreCreatedEvent",
              "description": "Event constructor ",
              "snippet": "StoreCreatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreDeletedEvent",
          "description": "Holds data of event that arrives when Store is deleted. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "StoreDeletedEventData",
                "optional": false
              },
              "snippet": "StoreDeletedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreDeletedEvent",
              "description": "Event constructor ",
              "snippet": "StoreDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreFileCreatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreFileCreatedEvent",
          "description": "Holds data of event that arrives when Store file is created. ",
          "fields": [
            {
              "name": "data",
              "description": "detailed Store file info ",
              "type": {
                "name": "store::File",
                "optional": false
              },
              "snippet": "store::File data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreFileCreatedEvent",
              "description": "Event constructor ",
              "snippet": "StoreFileCreatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreFileDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreFileDeletedEvent",
          "description": "Holds data of event that arrives when Store file is deleted. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "StoreFileDeletedEventData",
                "optional": false
              },
              "snippet": "StoreFileDeletedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreFileDeletedEvent",
              "description": "Event constructor ",
              "snippet": "StoreFileDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreFileUpdatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreFileUpdatedEvent",
          "description": "Holds data of event that arrives when Store file is updated. ",
          "fields": [
            {
              "name": "data",
              "description": "detailed Store file info ",
              "type": {
                "name": "store::File",
                "optional": false
              },
              "snippet": "store::File data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreFileUpdatedEvent",
              "description": "Event constructor ",
              "snippet": "StoreFileUpdatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreStatsChangedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreStatsChangedEvent",
          "description": "Holds data of event that arrives when Store statistical data changes. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "StoreStatsChangedEventData",
                "optional": false
              },
              "snippet": "StoreStatsChangedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreStatsChangedEvent",
              "description": "Event constructor ",
              "snippet": "StoreStatsChangedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file. ",
          "snippet": "struct privmx::endpoint::store::File{...}",
          "fields": [
            {
              "name": "info",
              "description": "file's information created by server ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "ServerFileInfo info"
            },
            {
              "name": "publicMeta",
              "description": "file's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "file's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "size",
              "description": "file's size ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t size"
            },
            {
              "name": "authorPubKey",
              "description": "public key of the author of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the file data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file's information created by server ",
          "snippet": "struct privmx::endpoint::store::ServerFileInfo{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "ID of the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            },
            {
              "name": "createDate",
              "description": "file's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the file ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store. ",
          "snippet": "struct privmx::endpoint::store::Store{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID ot the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastFileDate",
              "description": "timestamp of last created file ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Store ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "publicMeta",
              "description": "Store's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Store's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Store's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "filesCount",
              "description": "total number of files in the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Store ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Store data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information of `StoreDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreDeletedEventData{...}",
          "fields": [
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information of `StoreFileDeletedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreFileDeletedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "fileId",
              "description": "file ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string fileId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information of `StoreStatsChangedEvent`. ",
          "snippet": "struct privmx::endpoint::store::StoreStatsChangedEventData{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "Context ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "storeId",
              "description": "Store ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string storeId"
            },
            {
              "name": "lastFileDate",
              "description": "last uploaded file date timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastFileDate"
            },
            {
              "name": "filesCount",
              "description": "total number of files ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t filesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreUpdatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::store::StoreUpdatedEvent",
          "description": "Holds data of event that arrives when Store is updated. ",
          "fields": [
            {
              "name": "data",
              "description": "",
              "type": {
                "name": "Store",
                "optional": false
              },
              "snippet": "Store data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "StoreUpdatedEvent",
              "description": "Event constructor ",
              "snippet": "StoreUpdatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::store"
            }
          ]
        }
      ]
    }
  ],
  "thread": [
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Events",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::thread::Events",
          "description": "'Events' provides the helpers methods for module's events management. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "isThreadCreatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadCreatedEvent'",
              "snippet": "static bool isThreadCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadCreatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadCreatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadCreatedEvent'",
              "snippet": "static ThreadCreatedEvent extractThreadCreatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadCreatedEvent",
                    "optional": false
                  },
                  "description": "'ThreadCreatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadUpdatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadUpdatedEvent'",
              "snippet": "static bool isThreadUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadUpdatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadUpdatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadUpdatedEvent'",
              "snippet": "static ThreadUpdatedEvent extractThreadUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadUpdatedEvent",
                    "optional": false
                  },
                  "description": "'ThreadUpdatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadDeletedEvent'",
              "snippet": "static bool isThreadDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadDeletedEvent'",
              "snippet": "static ThreadDeletedEvent extractThreadDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadDeletedEvent",
                    "optional": false
                  },
                  "description": "'ThreadDeletedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadStatsEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadStatsChangedEvent'",
              "snippet": "static bool isThreadStatsEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadStatsChangedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadStatsEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadStatsChangedEvent'",
              "snippet": "static ThreadStatsChangedEvent extractThreadStatsEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadStatsChangedEvent",
                    "optional": false
                  },
                  "description": "'ThreadStatsChangedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadNewMessageEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadNewMessageEvent'",
              "snippet": "static bool isThreadNewMessageEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadNewMessageEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadNewMessageEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadNewMessageEvent'",
              "snippet": "static ThreadNewMessageEvent extractThreadNewMessageEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadNewMessageEvent",
                    "optional": false
                  },
                  "description": "'ThreadNewMessageEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadMessageUpdatedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadMessageUpdatedEvent'",
              "snippet": "static bool isThreadMessageUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadMessageUpdatedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadMessageUpdatedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadMessageUpdatedEvent'",
              "snippet": "static ThreadMessageUpdatedEvent extractThreadMessageUpdatedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadMessageUpdatedEvent",
                    "optional": false
                  },
                  "description": "'ThreadMessageUpdatedEvent' object "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadDeletedMessageEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadMessageDeletedEvent'",
              "snippet": "static bool isThreadDeletedMessageEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadMessageDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "isThreadMessageDeletedEvent",
              "description": "Checks whether event held in the 'EventHolder' is an 'ThreadMessageDeletedEvent'",
              "snippet": "static bool isThreadMessageDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "true for 'ThreadMessageDeletedEvent', else otherwise "
                }
              ]
            },
            {
              "type": "method",
              "name": "extractThreadMessageDeletedEvent",
              "description": "Gets Event held in the 'EventHolder' as an 'ThreadMessageDeletedEvent'",
              "snippet": "static ThreadMessageDeletedEvent extractThreadMessageDeletedEvent(\n const core::EventHolder &eventHolder\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventHolder",
                  "type": {
                    "name": "const core::EventHolder &",
                    "optional": false
                  },
                  "description": "holder object that wraps the 'Event' "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadMessageDeletedEvent",
                    "optional": false
                  },
                  "description": "'ThreadMessageDeletedEvent' object "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadApi",
      "content": [
        {
          "type": "class",
          "name": "privmx::endpoint::thread::ThreadApi",
          "description": "'ThreadApi' is a class representing Endpoint's API for Threads and their messages. ",
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "create",
              "description": "Creates an instance of 'ThreadApi'.",
              "snippet": "static ThreadApi create(\n core::Connection &connetion\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connetion",
                  "type": {
                    "name": "core::Connection &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadApi",
                    "optional": false
                  },
                  "description": "ThreadApi object "
                }
              ]
            },
            {
              "type": "method",
              "name": "createThread",
              "description": "Creates a new Thread in given Context.",
              "snippet": "std::string createThread(\n const std::string &contextId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const std::optional<core::ContainerPolicy> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context to create the Thread in "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Thread "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicy> &",
                    "optional": false
                  },
                  "description": "Thread's policies "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ID of the created Thread "
                }
              ]
            },
            {
              "type": "method",
              "name": "updateThread",
              "description": "Updates an existing Thread.",
              "snippet": "void updateThread(\n const std::string &threadId\n const std::vector<core::UserWithPubKey> &users\n const std::vector<core::UserWithPubKey> &managers\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const int64_t version\n const bool force\n const bool forceGenerateNewKey\n const std::optional<core::ContainerPolicy> &policies=std::nullopt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Thread to update "
                },
                {
                  "name": "users",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Thread "
                },
                {
                  "name": "managers",
                  "type": {
                    "name": "const std::vector<core::UserWithPubKey> &",
                    "optional": false
                  },
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public (unencrypted) metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private (encrypted) metadata "
                },
                {
                  "name": "version",
                  "type": {
                    "name": "const int64_t",
                    "optional": false
                  },
                  "description": "current version of the updated Thread "
                },
                {
                  "name": "force",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force update (without checking version) "
                },
                {
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "const bool",
                    "optional": false
                  },
                  "description": "force to regenerate a key for the Thread "
                },
                {
                  "name": "policies",
                  "type": {
                    "name": "const std::optional<core::ContainerPolicy> &",
                    "optional": false
                  },
                  "description": "Thread's policies "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "deleteThread",
              "description": "Deletes a Thread by given Thread ID.",
              "snippet": "void deleteThread(\n const std::string &threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Thread to delete "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "getThread",
              "description": "Gets a Thread by given Thread ID.",
              "snippet": "Thread getThread(\n const std::string &threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of Thread to get "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Thread",
                    "optional": false
                  },
                  "description": "Thread struct containing info about the Thread "
                }
              ]
            },
            {
              "type": "method",
              "name": "listThreads",
              "description": "Gets a list of Threads in given Context.",
              "snippet": "core::PagingList< Thread > listThreads(\n const std::string &contextId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Context to get the Threads from "
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<Thread>",
                    "optional": false
                  },
                  "description": "struct containing a list of Threads "
                }
              ]
            },
            {
              "type": "method",
              "name": "getMessage",
              "description": "Gets a message by given message ID.",
              "snippet": "Message getMessage(\n const std::string &messageId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Message",
                    "optional": false
                  },
                  "description": "struct containing the message "
                }
              ]
            },
            {
              "type": "method",
              "name": "listMessages",
              "description": "Gets a list of messages from a Thread.",
              "snippet": "core::PagingList< Message > listMessages(\n const std::string &threadId\n const core::PagingQuery &pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Thread to list messages from "
                },
                {
                  "name": "pagingQuery",
                  "type": {
                    "name": "const core::PagingQuery &",
                    "optional": false
                  },
                  "description": "struct with list query parameters "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "core::PagingList<Message>",
                    "optional": false
                  },
                  "description": "struct containing a list of messages "
                }
              ]
            },
            {
              "type": "method",
              "name": "sendMessage",
              "description": "Sends a message in a Thread.",
              "snippet": "std::string sendMessage(\n const std::string &threadId\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const core::Buffer &data\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the Thread to send message to "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public message metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private message metadata "
                },
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "content of the message "
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "ID of the new message "
                }
              ]
            },
            {
              "type": "method",
              "name": "deleteMessage",
              "description": "Deletes a message by given message ID.",
              "snippet": "void deleteMessage(\n const std::string &messageId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the message to delete "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "updateMessage",
              "description": "Update message in a Thread.",
              "snippet": "void updateMessage(\n const std::string &messageId\n const core::Buffer &publicMeta\n const core::Buffer &privateMeta\n const core::Buffer &data\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": "ID of the message to update "
                },
                {
                  "name": "publicMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "public message metadata "
                },
                {
                  "name": "privateMeta",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "private message metadata "
                },
                {
                  "name": "data",
                  "type": {
                    "name": "const core::Buffer &",
                    "optional": false
                  },
                  "description": "content of the message "
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "subscribeForThreadEvents",
              "description": "Subscribes for the Thread module main events. ",
              "snippet": "void subscribeForThreadEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromThreadEvents",
              "description": "Unsubscribes from the Thread module main events. ",
              "snippet": "void unsubscribeFromThreadEvents()",
              "methodType": "method",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "subscribeForMessageEvents",
              "description": "Subscribes for events in given Thread. ",
              "snippet": "void subscribeForMessageEvents(\n const std::string &threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            },
            {
              "type": "method",
              "name": "unsubscribeFromMessageEvents",
              "description": "Unsubscribes from events in given Thread. ",
              "snippet": "void unsubscribeFromMessageEvents(\n const std::string &threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "type": {
                    "name": "const std::string &",
                    "optional": false
                  },
                  "description": ""
                }
              ],
              "returns": null
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadCreatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadCreatedEvent",
          "description": "Holds data of event that arrives when Thread is created. ",
          "fields": [
            {
              "name": "data",
              "description": "all available Thread information ",
              "type": {
                "name": "Thread",
                "optional": false
              },
              "snippet": "Thread data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadCreatedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadCreatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadDeletedEvent",
          "description": "Holds data of event that arrives when Thread is deleted. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "ThreadDeletedEventData",
                "optional": false
              },
              "snippet": "ThreadDeletedEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadDeletedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadMessageDeletedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadMessageDeletedEvent",
          "description": "Holds data of event that arrives when Thread message is deleted. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "ThreadDeletedMessageEventData",
                "optional": false
              },
              "snippet": "ThreadDeletedMessageEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadMessageDeletedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadMessageDeletedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadMessageUpdatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadMessageUpdatedEvent",
          "description": "Holds data of event that arrives when Thread message is updated. ",
          "fields": [
            {
              "name": "data",
              "description": "detailed information about Message ",
              "type": {
                "name": "thread::Message",
                "optional": false
              },
              "snippet": "thread::Message data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadMessageUpdatedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadMessageUpdatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadNewMessageEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadNewMessageEvent",
          "description": "Holds data of event that arrives when Thread message is created. ",
          "fields": [
            {
              "name": "data",
              "description": "detailed information about Message ",
              "type": {
                "name": "thread::Message",
                "optional": false
              },
              "snippet": "thread::Message data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadNewMessageEvent",
              "description": "Event constructor ",
              "snippet": "ThreadNewMessageEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadStatsChangedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadStatsChangedEvent",
          "description": "Holds data of event that arrives when Thread stats change. ",
          "fields": [
            {
              "name": "data",
              "description": "event data ",
              "type": {
                "name": "ThreadStatsEventData",
                "optional": false
              },
              "snippet": "ThreadStatsEventData data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadStatsChangedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadStatsChangedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message. ",
          "snippet": "struct privmx::endpoint::thread::Message{...}",
          "fields": [
            {
              "name": "info",
              "description": "message's information created by server ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "ServerMessageInfo info"
            },
            {
              "name": "publicMeta",
              "description": "message's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "message's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "data",
              "description": "message's data ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer data"
            },
            {
              "name": "authorPubKey",
              "description": "public key of an author of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string authorPubKey"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Message data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message's information created by server. ",
          "snippet": "struct privmx::endpoint::thread::ServerMessageInfo{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "ID of the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            },
            {
              "name": "createDate",
              "description": "message's creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "author",
              "description": "ID of the user who created the message ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string author"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread. ",
          "snippet": "struct privmx::endpoint::thread::Thread{...}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string contextId"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t createDate"
            },
            {
              "name": "creator",
              "description": "ID of user who created the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string lastModifier"
            },
            {
              "name": "users",
              "description": "list of users (their IDs) with access to the Thread ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > users"
            },
            {
              "name": "managers",
              "description": "list of users (their IDs) with management rights ",
              "type": {
                "name": "std::vector< std::string >",
                "optional": false
              },
              "snippet": "std::vector< std::string > managers"
            },
            {
              "name": "version",
              "description": "version number (changes on updates) ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t version"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of last posted message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "publicMeta",
              "description": "Thread's public metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer publicMeta"
            },
            {
              "name": "privateMeta",
              "description": "Thread's private metadata ",
              "type": {
                "name": "core::Buffer",
                "optional": false
              },
              "snippet": "core::Buffer privateMeta"
            },
            {
              "name": "policy",
              "description": "Thread's policies ",
              "type": {
                "name": "core::ContainerPolicy",
                "optional": false
              },
              "snippet": "core::ContainerPolicy policy"
            },
            {
              "name": "messagesCount",
              "description": "total number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            },
            {
              "name": "statusCode",
              "description": "status code of retrieval and decryption of the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t statusCode"
            },
            {
              "name": "schemaVersion",
              "description": "Version of the Thread data structure and how it is encoded/encrypted ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t schemaVersion"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information of `ThreadDeletedMessageEvent`. ",
          "snippet": "struct privmx::endpoint::thread::ThreadDeletedMessageEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "messageId",
              "description": "message ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string messageId"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds Thread statistical data. ",
          "snippet": "struct privmx::endpoint::thread::ThreadStatsEventData{...}",
          "fields": [
            {
              "name": "threadId",
              "description": "Thread ID ",
              "type": {
                "name": "std::string",
                "optional": false
              },
              "snippet": "std::string threadId"
            },
            {
              "name": "lastMsgDate",
              "description": "timestamp of the most recent Thread message ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "updated number of messages in the Thread ",
              "type": {
                "name": "int64_t",
                "optional": false
              },
              "snippet": "int64_t messagesCount"
            }
          ],
          "generic": [],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadUpdatedEvent",
      "content": [
        {
          "type": "struct",
          "name": "privmx::endpoint::thread::ThreadUpdatedEvent",
          "description": "Holds data of event that arrives when Thread is updated. ",
          "fields": [
            {
              "name": "data",
              "description": "all available Thread information ",
              "type": {
                "name": "Thread",
                "optional": false
              },
              "snippet": "Thread data"
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "ThreadUpdatedEvent",
              "description": "Event constructor ",
              "snippet": "ThreadUpdatedEvent()",
              "methodType": "constructor",
              "params": [],
              "returns": null
            },
            {
              "type": "method",
              "name": "toJSON",
              "description": "Get Event as JSON string",
              "snippet": "std::string toJSON() const override",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "std::string",
                    "optional": false
                  },
                  "description": "JSON string "
                }
              ]
            }
          ],
          "tags": [
            {
              "name": "namespace",
              "value": "privmx::endpoint::thread"
            }
          ]
        }
      ]
    }
  ],
  "_meta": {
    "version": "2.3",
    "package": "endpoint",
    "lang": "c++",
    "name": "Endpoint"
  }
}