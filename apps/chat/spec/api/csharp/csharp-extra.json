{
  "_meta": {
    "version": "2",
    "package": "privmx-endpoint-csharp-extra",
    "lang": "csharp",
    "name": "PrivMX Endpoint C# Extra"
  },
  "core": [
    {
      "title": "AsyncConnection",
      "content": [
        {
          "type": "class",
          "name": "AsyncConnection",
          "description": "Connection container that manages connection and exposes asynchronous API. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Api"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "AsyncConnection",
              "description": "Wraps existing connection into async connection. It\u0027s user responsibility to provide valid (connected) connection. ",
              "snippet": "AsyncConnection(\n    IConnection connection\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "connection",
                  "description": "Connection to wrap",
                  "type": {
                    "name": "IConnection",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "GetConnectionId",
              "description": "Gets the ID of the current connection.ID of the connection.",
              "snippet": "long GetConnectionId()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListContexts",
              "description": "Gets a list of Contexts available for the user.pagingQueryList query parameterstokenCancellation token.A task that represents the asynchronous operation. The task result contains a paging list of contexts.",
              "snippet": "ValueTask\u003CPagingList\u003CContext\u003E\u003E ListContexts(\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CContext\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes async connection with all related resources. ",
              "snippet": "ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Connect",
              "description": "Connects to the PrivMX Bridge server. ",
              "snippet": "static async Task\u003CAsyncConnection\u003E Connect(\n    string userPrivateKey,\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "userPrivateKey",
                  "description": "User\u0027s private key.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancelation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async Task\u003CAsyncConnection\u003E",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection."
                }
              ]
            },
            {
              "type": "method",
              "name": "ConnectPublic",
              "description": "Connects to the PrivMX Bridge server as a guest user. ",
              "snippet": "static async Task\u003CAsyncConnection\u003E ConnectPublic(\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async Task\u003CAsyncConnection\u003E",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "AsyncEventQueue",
      "content": [
        {
          "type": "class",
          "name": "AsyncEventQueue",
          "description": "Wrapper for event queue that allows to iterate events asynchronously. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Api"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "AsyncEventQueue",
              "description": "Wraps exising event queue into async event queue. It\u0027s user responsibility to provide valid event queue. ",
              "snippet": "AsyncEventQueue(\n    IEventQueue eventQueue\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "eventQueue",
                  "description": "Event queue to wrap",
                  "type": {
                    "name": "IEventQueue",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Stops and disposes event queue. ",
              "snippet": "async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "WaitEventsAsync",
              "description": "Iterates events until eiter event queue breaks or cancellation token is cancelled. ",
              "snippet": "async IAsyncEnumerable\u003CEvent\u003E WaitEventsAsync(\n    [EnumeratorCancellation] CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async IAsyncEnumerable\u003CEvent\u003E",
                    "optional": false
                  },
                  "description": "Stream of incoming events."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "BackendRequesterAsyncExtensions",
      "content": [
        {
          "type": "class",
          "name": "BackendRequesterAsyncExtensions",
          "description": "Async extension methods for IBackendRequester interface. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "BackendRequestAsync",
              "description": "Sends a request to PrivMX Bridge API using access token for authorization. ",
              "snippet": "static ValueTask\u003Cstring\u003E BackendRequestAsync(\n    this IBackendRequester backendRequester,\n    string serverUrl,\n    string accessToken,\n    string method,\n    string paramsAsJson,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "backendRequester",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IBackendRequester",
                    "optional": false
                  }
                },
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "accessToken",
                  "description": "Token for authorization (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            },
            {
              "type": "method",
              "name": "BackendRequestAsync",
              "description": "Sends request to PrivMX Bridge API. ",
              "snippet": "static ValueTask\u003Cstring\u003E BackendRequestAsync(\n    this IBackendRequester backendRequester,\n    string serverUrl,\n    string method,\n    string paramsAsJson,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "backendRequester",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IBackendRequester",
                    "optional": false
                  }
                },
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            },
            {
              "type": "method",
              "name": "BackendRequestAsync",
              "description": "Sends a request to PrivMX Bridge API using pair of API KEY ID and API KEY SECRET for authorization. ",
              "snippet": "static ValueTask\u003Cstring\u003E BackendRequestAsync(\n    this IBackendRequester backendRequester,\n    string serverUrl,\n    string apiKeyId,\n    string apiKeySecret,\n    long mode,\n    string method,\n    string paramsAsJson,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "backendRequester",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IBackendRequester",
                    "optional": false
                  }
                },
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeyId",
                  "description": "API KEY ID (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeySecret",
                  "description": "API KEY SECRET (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "mode",
                  "description": "Allows you to set whether the request should be signed (mode = 1) or plain (mode = 0).",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "ConnectionAsyncExtensions",
      "content": [
        {
          "type": "class",
          "name": "ConnectionAsyncExtensions",
          "description": "Extension methods that provide asynchronous method execution for objects implementing IConnection interface. Internally operations are executed using default ThreadPool. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "ConnectAsync",
              "description": "Connects to the PrivMX Bridge server. ",
              "snippet": "static ValueTask\u003CConnection\u003E ConnectAsync(\n    string userPrivKey,\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "userPrivKey",
                  "description": "User\u0027s private key.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CConnection\u003E",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection"
                }
              ]
            },
            {
              "type": "method",
              "name": "ConnectPublicAsync",
              "description": "Connects to the PrivMX Bridge server as a guest user. ",
              "snippet": "static ValueTask\u003CConnection\u003E ConnectPublicAsync(\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CConnection\u003E",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListContextsAsync",
              "description": "Gets a list of Contexts available for the user. ",
              "snippet": "static ValueTask\u003CPagingList\u003CContext\u003E\u003E ListContextsAsync(\n    this IConnection connection,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IConnection",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CContext\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of contexts."
                }
              ]
            },
            {
              "type": "method",
              "name": "DisconnectAsync",
              "description": "Disconnects from the PrivMX Bridge. ",
              "snippet": "static ValueTask DisconnectAsync(\n    this IConnection connection,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "",
                  "type": {
                    "name": "this IConnection",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetConnectionIdAsync",
              "description": "Gets the ID of the current connection. ",
              "snippet": "static ValueTask\u003Clong\u003E GetConnectionIdAsync(\n    this IConnection connection,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "",
                  "type": {
                    "name": "this IConnection",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": "ID of the connection."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "ConnectionSession",
          "description": "Container class that wraps single connection and manages its state. Exposes all APIs that are available for the connection. Disposing connection session automatically disposes all APIs. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "snippet": "public class ConnectionSession : IAsyncDisposable\n{\n    string PublicKey {get; set;}\n    string PrivateKey {get; set;}\n    IAsyncConnection Connection {get; set;}\n    IAsyncThreadApi ThreadApi {get; set;}\n    IAsyncStoreApi StoreApi {get; set;}\n    IAsyncInboxApi InboxApi {get; set;}\n}",
          "fields": [
            {
              "name": "PublicKey",
              "description": "Public key of the user. If connection is anonymous, this will be empty. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "PrivateKey",
              "description": "Private key of the user. If connection is anonymous, this will be empty. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Connection",
              "description": "Connection asynchronous api. ",
              "type": {
                "name": "IAsyncConnection",
                "optional": false
              }
            },
            {
              "name": "ThreadApi",
              "description": "Threads asynchronous api. ",
              "type": {
                "name": "IAsyncThreadApi",
                "optional": false
              }
            },
            {
              "name": "StoreApi",
              "description": "Store asynchronous api. ",
              "type": {
                "name": "IAsyncStoreApi",
                "optional": false
              }
            },
            {
              "name": "InboxApi",
              "description": "Inbox asynchronous api. ",
              "type": {
                "name": "IAsyncInboxApi",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes session and frees are underlying resources. ",
              "snippet": "async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Create",
              "description": "Creates new session with authenticated user. ",
              "snippet": "static async ValueTask\u003CConnectionSession\u003E Create(\n    string userPrivateKey,\n    string publicKey,\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "userPrivateKey",
                  "description": "User private key.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicKey",
                  "description": "User public key.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "Bridge solution ID.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "Bridge url.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CConnectionSession\u003E",
                    "optional": false
                  },
                  "description": "Authorized connection session."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreatePublic",
              "description": "Creates new public session (not authenticated user). ",
              "snippet": "static async ValueTask\u003CConnectionSession\u003E CreatePublic(\n    string solutionId,\n    string platformUrl,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "solutionId",
                  "description": "Bridge solution ID.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "Bridge url.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CConnectionSession\u003E",
                    "optional": false
                  },
                  "description": "Not authorized connection session."
                }
              ]
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQueryExtension",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "snippet": "public class PagingQueryExtension\n{\n    PagingQuery DefaultQuery {get; set;}\n}",
          "fields": [
            {
              "name": "DefaultQuery",
              "description": "",
              "type": {
                "name": "PagingQuery",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "SetOrder",
              "description": "",
              "snippet": "static PagingQuery SetOrder(\n    this PagingQuery @object,\n    Order order\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "object",
                  "description": "",
                  "type": {
                    "name": "this PagingQuery @",
                    "optional": false
                  }
                },
                {
                  "name": "order",
                  "description": "",
                  "type": {
                    "name": "Order",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SetDefault",
              "description": "",
              "snippet": "static PagingQuery SetDefault(\n    this PagingQuery @object\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "object",
                  "description": "",
                  "type": {
                    "name": "this PagingQuery @",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        },
        {
          "type": "type",
          "name": "PrivmxFileStream",
          "description": "Abstract class representing a Privmx file stream. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Abstractions"
            }
          ],
          "snippet": "public class PrivmxFileStream : Stream\n{\n    string? FileId {get; set;}\n    ReadOnlySpan\u003Cbyte\u003E PublicMeta {get; set;}\n    ReadOnlySpan\u003Cbyte\u003E PrivateMeta {get; set;}\n}",
          "fields": [
            {
              "name": "FileId",
              "description": "Gets the file identifier. FileId may be null if the file is not yet uploaded. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Gets the public metadata. ",
              "type": {
                "name": "ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Gets the private metadata. ",
              "type": {
                "name": "ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            }
          ]
        }
      ]
    },
    {
      "title": "EventQueueAsyncExtensions",
      "content": [
        {
          "type": "class",
          "name": "EventQueueAsyncExtensions",
          "description": "Asynchronous extensions for IEventQueue. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "WaitEventAsync",
              "description": "Gets or waits for a new event from the queue. Waiting can be canceled by EmitBreakEventAsync. ",
              "snippet": "static ValueTask\u003CEvent\u003E WaitEventAsync(\n    this IEventQueue eventQueue,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventQueue",
                  "description": "",
                  "type": {
                    "name": "this IEventQueue",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CEvent\u003E",
                    "optional": false
                  },
                  "description": "A new event."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetEvent",
              "description": "Gets a new event from the queue. ",
              "snippet": "static ValueTask\u003CEvent?\u003E GetEvent(\n    this IEventQueue eventQueue,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventQueue",
                  "description": "",
                  "type": {
                    "name": "this IEventQueue",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CEvent?\u003E",
                    "optional": false
                  },
                  "description": "A new event, or null if no events in the queue."
                }
              ]
            },
            {
              "type": "method",
              "name": "EmitBreakEventAsync",
              "description": "Puts the LibBreakEvent event into the event queue. This method is useful for interrupting a blocking WaitEventAsync call and breaking an event processing loop. ",
              "snippet": "static ValueTask EmitBreakEventAsync(\n    this IEventQueue eventQueue,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "eventQueue",
                  "description": "",
                  "type": {
                    "name": "this IEventQueue",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "GlobalEvents",
      "content": [
        {
          "type": "class",
          "name": "GlobalEvents",
          "description": "Represents global events in the PrivMX platform. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Events"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "GlobalEvents",
              "description": "Initializes a new instance of the GlobalEvents class. ",
              "snippet": "GlobalEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "GlobalEvents",
              "description": "Initializes a new instance of the GlobalEvents class with a specified event dispatcher. ",
              "snippet": "GlobalEvents(\n    IEventDispatcher eventDispatcher\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "eventDispatcher",
                  "description": "The event dispatcher to use.",
                  "type": {
                    "name": "IEventDispatcher",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "Dispose",
              "description": "Disposes the resources used by the GlobalEvents class. ",
              "snippet": "void Dispose()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "AllEvents",
              "description": "Gets an observable stream of all events. ",
              "snippet": "IObservable\u003CEvent\u003E AllEvents()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CEvent\u003E",
                    "optional": false
                  },
                  "description": "An observable stream of Event."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "NonExistingChannelDispatcher",
      "content": [
        {
          "type": "class",
          "name": "NonExistingChannelDispatcher",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Events.GlobalEvents"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "NonExistingChannelDispatcher",
              "description": "",
              "snippet": "NonExistingChannelDispatcher(\n    IEventDispatcher eventDispatcher\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "eventDispatcher",
                  "description": "",
                  "type": {
                    "name": "IEventDispatcher",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "HandleEvent",
              "description": "",
              "snippet": "override void HandleEvent(\n    Event @event\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "event",
                  "description": "",
                  "type": {
                    "name": "Event @",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "threads": [
    {
      "title": "AsyncThreadApi",
      "content": [
        {
          "type": "class",
          "name": "AsyncThreadApi",
          "description": "Asynchronous wrapper over thread API. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Api"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "AsyncThreadApi",
              "description": "Creates async thread API over real PrivMX connection. ",
              "snippet": "AsyncThreadApi(\n    Connection connection\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "connection",
                  "description": "Connection used.",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "AsyncThreadApi",
              "description": "Wraps existing thread api into async thread api. This constructor is meant to be used in advanced scenarios like object mocking and testing. ",
              "snippet": "AsyncThreadApi(\n    IThreadApi threadApi,\n    long connectionId,\n    IEventDispatcher eventDispatcher\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadApi",
                  "description": "Existing thread API.",
                  "type": {
                    "name": "IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "connectionId",
                  "description": "ID of user connection.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "eventDispatcher",
                  "description": "Event dispatcher used as event source.",
                  "type": {
                    "name": "IEventDispatcher",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes async thread API with all related resources. ",
              "snippet": "ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateThreadAsync",
              "description": "Creates new Thread in given Context. ",
              "snippet": "ValueTask\u003Cstring\u003E CreateThreadAsync(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Thread in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey which indicates who will have access to the created Thread.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey which indicates who will have access (and management rights) to the created Thread. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) meta data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) meta data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Thread policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "ID of the created Thread."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateThreadAsync",
              "description": "Updates an existing Thread. ",
              "snippet": "ValueTask UpdateThreadAsync(\n    string threadId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Thread. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) meta data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) meta data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Thread.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update (without checking version).",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to regenerate a key for the Thread.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Thread policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteThreadAsync",
              "description": "Deletes a Thread by given Thread ID. ",
              "snippet": "ValueTask DeleteThreadAsync(\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetThreadAsync",
              "description": "Gets a Thread by given Thread ID. ",
              "snippet": "ValueTask\u003CThread\u003E GetThreadAsync(\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of Thread to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CThread\u003E",
                    "optional": false
                  },
                  "description": "Information about the Thread."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListThreadsAsync",
              "description": "Gets a list of Threads in given Context. ",
              "snippet": "ValueTask\u003CPagingList\u003CThread\u003E\u003E ListThreadsAsync(\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Threads from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CThread\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of Threads."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetMessageAsync",
              "description": "Gets a message by given message ID. ",
              "snippet": "ValueTask\u003CMessage\u003E GetMessageAsync(\n    string messageId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CMessage\u003E",
                    "optional": false
                  },
                  "description": "Message."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListMessagesAsync",
              "description": "Gets a list of messages from a Thread. ",
              "snippet": "ValueTask\u003CPagingList\u003CMessage\u003E\u003E ListMessagesAsync(\n    string threadId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to list messages from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CMessage\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of messages."
                }
              ]
            },
            {
              "type": "method",
              "name": "SendMessageAsync",
              "description": "Sends a message in a Thread. ",
              "snippet": "ValueTask\u003Cstring\u003E SendMessageAsync(\n    string threadId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to send message to.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "Content of the message.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "ID of the new message."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateMessageAsync",
              "description": "Updates a message in a Thread. ",
              "snippet": "ValueTask UpdateMessageAsync(\n    string messageId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "Content of the message.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteMessageAsync",
              "description": "Deletes a message by given message ID. ",
              "snippet": "ValueTask DeleteMessageAsync(\n    string messageId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetThreadEvents",
              "description": "Stream of threads related events. ",
              "snippet": "IObservable\u003CThreadEvent\u003E GetThreadEvents()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CThreadEvent\u003E",
                    "optional": false
                  },
                  "description": "Observable stream of events."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetThreadMessageEvents",
              "description": "Stream of events related to a particular thread. ",
              "snippet": "IObservable\u003CThreadMessageEvent\u003E GetThreadMessageEvents(\n    string threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the thread.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CThreadMessageEvent\u003E",
                    "optional": false
                  },
                  "description": "Observable stream of events."
                }
              ]
            },
            {
              "type": "method",
              "name": "Dispose",
              "description": "Dispose async thread API with all related resources. ",
              "snippet": "void Dispose()",
              "methodType": "method",
              "params": []
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadApiAsyncExtensions",
      "content": [
        {
          "type": "class",
          "name": "ThreadApiAsyncExtensions",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "CreateThreadAsync",
              "description": "",
              "snippet": "static ValueTask\u003Cstring\u003E CreateThreadAsync(\n    this IThreadApi threadApi,\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy containerPolicy,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "threadApi",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "containerPolicy",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateThreadAsync",
              "description": "",
              "snippet": "static ValueTask UpdateThreadAsync(\n    this IThreadApi threadApi,\n    string threadId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? containerPolicy = null,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "threadApi",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "containerPolicy",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteThreadAsync",
              "description": "",
              "snippet": "static ValueTask DeleteThreadAsync(\n    this IThreadApi threadApi,\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "threadApi",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetThreadAsync",
              "description": "",
              "snippet": "static ValueTask\u003CThread\u003E GetThreadAsync(\n    this IThreadApi threadApi,\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "threadApi",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CThread\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListThreadsAsync",
              "description": "",
              "snippet": "static ValueTask\u003CPagingList\u003CThread\u003E\u003E ListThreadsAsync(\n    this IThreadApi api,\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CThread\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetMessageAsync",
              "description": "",
              "snippet": "static ValueTask\u003CMessage\u003E GetMessageAsync(\n    this IThreadApi api,\n    string messageId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "messageId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CMessage\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListMessagesAsync",
              "description": "",
              "snippet": "static ValueTask\u003CPagingList\u003CMessage\u003E\u003E ListMessagesAsync(\n    this IThreadApi api,\n    string threadId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CMessage\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SendMessageAsync",
              "description": "",
              "snippet": "static ValueTask\u003Cstring\u003E SendMessageAsync(\n    this IThreadApi api,\n    string threadId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateMessageAsync",
              "description": "",
              "snippet": "static ValueTask UpdateMessageAsync(\n    this IThreadApi api,\n    string messageId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "messageId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteMessageAsync",
              "description": "",
              "snippet": "static ValueTask DeleteMessageAsync(\n    this IThreadApi api,\n    string messageId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "messageId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForThreadEventsAsync",
              "description": "",
              "snippet": "static ValueTask SubscribeForThreadEventsAsync(\n    this IThreadApi api,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromThreadEventsAsync",
              "description": "",
              "snippet": "static ValueTask UnsubscribeFromThreadEventsAsync(\n    this IThreadApi api,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForMessageEventsAsync",
              "description": "",
              "snippet": "static ValueTask SubscribeForMessageEventsAsync(\n    this IThreadApi api,\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromMessageEventsAsync",
              "description": "",
              "snippet": "static ValueTask UnsubscribeFromMessageEventsAsync(\n    this IThreadApi api,\n    string threadId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "threadId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "stores": [
    {
      "title": "AsyncStoreApi",
      "content": [
        {
          "type": "class",
          "name": "AsyncStoreApi",
          "description": "Store api container that manages connection and exposes asynchronous API. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Api"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "AsyncStoreApi",
              "description": "Wraps existing thread api into async thread api. This constructor is meant to be used in advanced scenarios like object mocking and testing. ",
              "snippet": "AsyncStoreApi(\n    IStoreApi storeApi,\n    long connectionId,\n    IEventDispatcher eventDispatcher\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeApi",
                  "description": "Existing thread API.",
                  "type": {
                    "name": "IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "connectionId",
                  "description": "ID of user connection.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "eventDispatcher",
                  "description": "Event dispatcher used as event source.",
                  "type": {
                    "name": "IEventDispatcher",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "AsyncStoreApi",
              "description": "Creates a new instance of the store api over real privmx connection. ",
              "snippet": "AsyncStoreApi(\n    Connection connection\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "connection",
                  "description": "",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes store api. ",
              "snippet": "ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateStore",
              "description": "Creates a new Store in given Context. ",
              "snippet": "ValueTask\u003Cstring\u003E CreateStore(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy containerPolicy,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "containerPolicy",
                  "description": "Store policy.",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "Created Store ID."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateStore",
              "description": "Updates an existing Store. ",
              "snippet": "ValueTask UpdateStore(\n    string storeId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? containerPolicy = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Store.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update (without checking version).",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to regenerate a key for the Store.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "containerPolicy",
                  "description": "(optional) Store policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteStore",
              "description": "Deletes a Store by given Store ID. ",
              "snippet": "ValueTask DeleteStore(\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetStore",
              "description": "Gets a single Store by given Store ID. ",
              "snippet": "ValueTask\u003CPrivMX.Endpoint.Store.Models.Store\u003E GetStore(\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the store to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPrivMX.Endpoint.Store.Models.Store\u003E",
                    "optional": false
                  },
                  "description": "Information about about the Store."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetFile",
              "description": "Gets information about existing file. ",
              "snippet": "ValueTask\u003CFile\u003E GetFile(\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CFile\u003E",
                    "optional": false
                  },
                  "description": "Store file metadata."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListStores",
              "description": "Gets a list of Stores in given Context. ",
              "snippet": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Store.Models.Store\u003E\u003E ListStores(\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Store.Models.Store\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of Stores."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListFiles",
              "description": "Gets a list of files in given Store.storeIdID of the Store to get files from.pagingQueryList query parameters.tokenCancellation token.List of files.",
              "snippet": "ValueTask\u003CPagingList\u003CFile\u003E\u003E ListFiles(\n    string storeId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CFile\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateFile",
              "description": "Creates a new file in a Store. ",
              "snippet": "async ValueTask\u003CPrivmxFileStream\u003E CreateFile(\n    string storeId,\n    long size,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte? fillValue = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to create the file in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "Size of the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "fillValue",
                  "description": "Optional value to fill empty space in file stream on close.",
                  "type": {
                    "name": "byte?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CPrivmxFileStream\u003E",
                    "optional": false
                  },
                  "description": "Fixed size file stream that supports write operations."
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteFile",
              "description": "Deletes a file by given file ID.fileIdID of the Store to delete.tokenCancellation token.",
              "snippet": "ValueTask DeleteFile(\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFileForWrite",
              "description": "Opens a file for write. ",
              "snippet": "async ValueTask\u003CPrivmxFileStream\u003E OpenFileForWrite(\n    string fileId,\n    long size,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte? fillValue = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "New file size.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta data.\u003E",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "fillValue",
                  "description": "Optional value to fill empty space in file stream on close.",
                  "type": {
                    "name": "byte?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CPrivmxFileStream\u003E",
                    "optional": false
                  },
                  "description": "Fixed size file stream that supports write operations."
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFileForRead",
              "description": "Opens a file for read.fileIdID of the file to read.tokenCancellation tokenFixed size readable stream that supports seek operation.",
              "snippet": "async ValueTask\u003CPrivmxFileStream\u003E OpenFileForRead(\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CPrivmxFileStream\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateFileMetaAsync",
              "description": "Updates meta data of an existing file in a Store.fileIdID of the file to update.publicMetaPublic file meta_data.privateMetaPrivate file meta_data.tokenCancellation token.",
              "snippet": "ValueTask UpdateFileMetaAsync(\n    string fileId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetStoreEvents",
              "description": "Gets store events.Stream of store events.",
              "snippet": "IObservable\u003CStoreEvent\u003E GetStoreEvents()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CStoreEvent\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetFileEvents",
              "description": "Gets store file events.storeIdID of the tracked store.Stream of store file events.",
              "snippet": "IObservable\u003CStoreFileEvent\u003E GetFileEvents(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CStoreFileEvent\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Dispose",
              "description": "Disposes store api. ",
              "snippet": "void Dispose()",
              "methodType": "method",
              "params": []
            }
          ]
        }
      ]
    },
    {
      "title": "StoreApiExtensions",
      "content": [
        {
          "type": "class",
          "name": "StoreApiExtensions",
          "description": "Asynchronous extensions for dtore API. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "CreateStoreAsync",
              "description": "Creates a new Store in given Context. ",
              "snippet": "static ValueTask\u003Cstring\u003E CreateStoreAsync(\n    this IStoreApi api,\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy policies,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Store policy.",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "Created Store ID."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateStoreAsync",
              "description": "Updates an existing Store. ",
              "snippet": "static ValueTask UpdateStoreAsync(\n    this IStoreApi api,\n    string storeId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the Store to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store. ",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public (unencrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private (encrypted) metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Store.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update (without checking version).",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to renenerate a key for the Store.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Store policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteStoreAsync",
              "description": "Deletes a Store by given Store ID. ",
              "snippet": "static ValueTask DeleteStoreAsync(\n    this IStoreApi api,\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the Store to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetStoreAsync",
              "description": "Gets a single Store by given Store ID. ",
              "snippet": "static ValueTask\u003CPrivMX.Endpoint.Store.Models.Store\u003E GetStoreAsync(\n    this IStoreApi api,\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the Store to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPrivMX.Endpoint.Store.Models.Store\u003E",
                    "optional": false
                  },
                  "description": "Information about about the Store."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListStoresAsync",
              "description": "Gets a list of Stores in given Context. ",
              "snippet": "static ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Store.Models.Store\u003E\u003E ListStoresAsync(\n    this IStoreApi api,\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Store.Models.Store\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of Stores."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateFileAsync",
              "description": "Creates a new file in a Store. ",
              "snippet": "static ValueTask\u003Clong\u003E CreateFileAsync(\n    this IStoreApi api,\n    string storeId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long size,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the Store to create the file in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "Size of the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": "Handle to write data."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateFileAsync",
              "description": "Updates an existing file in a Store. ",
              "snippet": "static ValueTask\u003Clong\u003E UpdateFileAsync(\n    this IStoreApi api,\n    string fileId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long size,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "ID of the file to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "Size of the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": "Handle to write file data."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateFileMetaAsync",
              "description": "Updates meta data of an existing file in a Store. ",
              "snippet": "static ValueTask UpdateFileMetaAsync(\n    this IStoreApi api,\n    string fileId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "ID of the file to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "WriteToFileAsync",
              "description": "Writes a file data. ",
              "snippet": "static ValueTask WriteToFileAsync(\n    this IStoreApi api,\n    long fileHandle,\n    byte[] dataChunk,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "File data chunk.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteFileAsync",
              "description": "Deletes a file by given ID. ",
              "snippet": "static ValueTask DeleteFileAsync(\n    this IStoreApi api,\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "ID of the file to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetFileAsync",
              "description": "Deletes a file by given ID. ",
              "snippet": "static ValueTask\u003CFile\u003E GetFileAsync(\n    this IStoreApi api,\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "ID of the file to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CFile\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListFilesAsync",
              "description": "Gets a list of files in given Store. ",
              "snippet": "static ValueTask\u003CPagingList\u003CFile\u003E\u003E ListFilesAsync(\n    this IStoreApi api,\n    string storeId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the Store to get files from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CFile\u003E\u003E",
                    "optional": false
                  },
                  "description": "List of files."
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFileAsync",
              "description": "Opens a file to read. ",
              "snippet": "static ValueTask\u003Clong\u003E OpenFileAsync(\n    this IStoreApi api,\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "ID of the file to read.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": "Handle to read file data."
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadFromFileAsync",
              "description": "Reads file data. ",
              "snippet": "static ValueTask\u003Cbyte[]\u003E ReadFromFileAsync(\n    this IStoreApi api,\n    long fileHandle,\n    long length,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "Size of data to read.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cbyte[]\u003E",
                    "optional": false
                  },
                  "description": "File data chunk."
                }
              ]
            },
            {
              "type": "method",
              "name": "SeekInFileAsync",
              "description": "Moves read cursor. ",
              "snippet": "static ValueTask SeekInFileAsync(\n    this IStoreApi api,\n    long fileHandle,\n    long position,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "New cursor position.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CloseFileAsync",
              "description": "Closes the file handle. ",
              "snippet": "static ValueTask\u003Cstring\u003E CloseFileAsync(\n    this IStoreApi api,\n    long fileHandle,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "Handle to read/write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": "ID of closed file."
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForStoreEventsAsync",
              "description": "Subscribes for the Store module main events. ",
              "snippet": "static ValueTask SubscribeForStoreEventsAsync(\n    this IStoreApi api,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromStoreEventsAsync",
              "description": "Unsubscribes from the Store module main events. ",
              "snippet": "static ValueTask UnsubscribeFromStoreEventsAsync(\n    this IStoreApi api,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForFileEventsAsync",
              "description": "Subscribes for the events in given Store. ",
              "snippet": "static ValueTask SubscribeForFileEventsAsync(\n    this IStoreApi api,\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object.",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the store to subscribe to.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromFileEventsAsync",
              "description": "Unsubscribes from the events in given Store. ",
              "snippet": "static ValueTask UnsubscribeFromFileEventsAsync(\n    this IStoreApi api,\n    string storeId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "api",
                  "description": "Extended object",
                  "type": {
                    "name": "this IStoreApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeId",
                  "description": "ID of the store to unsubscribe from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token.",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "StoreReadonlyFileStream",
          "description": "Stream that reads data from store file. This class is not thread safe. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Store"
            }
          ],
          "snippet": "public class StoreReadonlyFileStream : PrivmxEndpointCsharpExtra.Abstractions.PrivmxFileStream\n{\n    override bool CanRead {get; set;}\n    override bool CanSeek {get; set;}\n    override bool CanWrite {get; set;}\n    override long Length {get; set;}\n    override long Position {get; set;}\n    override? string FileId {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PublicMeta {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PrivateMeta {get; set;}\n}",
          "fields": [
            {
              "name": "CanRead",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanSeek",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanWrite",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "Length",
              "description": "",
              "type": {
                "name": "override long",
                "optional": false
              }
            },
            {
              "name": "Position",
              "description": "",
              "type": {
                "name": "override long",
                "optional": false
              }
            },
            {
              "name": "FileId",
              "description": "",
              "type": {
                "name": "override? string",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "Flush",
              "description": "",
              "snippet": "override void Flush()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Read",
              "description": "",
              "snippet": "override int Read(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override int",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Seek",
              "description": "",
              "snippet": "override long Seek(\n    long offset,\n    SeekOrigin origin\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "origin",
                  "description": "",
                  "type": {
                    "name": "SeekOrigin",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override long",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SetLength",
              "description": "",
              "snippet": "override void SetLength(\n    long value\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Write",
              "description": "",
              "snippet": "override void Write(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "",
              "snippet": "override async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreWriteFileStream",
          "description": "Stream that represents remote file in the store. All data is written to the store when file is closed/disposed. This class is not thread safe. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Store"
            }
          ],
          "snippet": "public class StoreWriteFileStream : PrivmxEndpointCsharpExtra.Abstractions.PrivmxFileStream\n{\n    override? string FileId {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PublicMeta {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PrivateMeta {get; set;}\n    override bool CanRead {get; set;}\n    override bool CanSeek {get; set;}\n    override bool CanWrite {get; set;}\n    override long Length {get; set;}\n    override long Position {get; set;}\n}",
          "fields": [
            {
              "name": "FileId",
              "description": "",
              "type": {
                "name": "override? string",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "CanRead",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanSeek",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanWrite",
              "description": "",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "Length",
              "description": "",
              "type": {
                "name": "override long",
                "optional": false
              }
            },
            {
              "name": "Position",
              "description": "",
              "type": {
                "name": "override long",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "Flush",
              "description": "",
              "snippet": "override void Flush()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Read",
              "description": "",
              "snippet": "override int Read(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override int",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Seek",
              "description": "",
              "snippet": "override long Seek(\n    long offset,\n    SeekOrigin origin\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "origin",
                  "description": "",
                  "type": {
                    "name": "SeekOrigin",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override long",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SetLength",
              "description": "",
              "snippet": "override void SetLength(\n    long value\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Write",
              "description": "",
              "snippet": "override void Write(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Fill",
              "description": "",
              "snippet": "void Fill(\n    byte value = 0x0\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "",
                  "type": {
                    "name": "byte",
                    "optional": true
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "FillAsync",
              "description": "",
              "snippet": "async ValueTask FillAsync(\n    byte value = 0x0,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "",
                  "type": {
                    "name": "byte",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "",
              "snippet": "override async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "inboxes": [
    {
      "title": "AsyncInboxApi",
      "content": [
        {
          "type": "class",
          "name": "AsyncInboxApi",
          "description": "Inbox API wrapper that provides asynchronous methods and manages resources. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Api"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "AsyncInboxApi",
              "description": "Wraps existing connection into async connection. It\u0027s user responsibility to provide valid (connected) connection. ",
              "snippet": "AsyncInboxApi(\n    Connection connection\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "connection",
                  "description": "Connection to wrap",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "AsyncInboxApi",
              "description": "Wraps existing inbox api. It\u0027s recommended to use this constructor in tests or custom scenarios. ",
              "snippet": "AsyncInboxApi(\n    IInboxApi inboxApi,\n    long connectionId,\n    IEventDispatcher eventDispatcher\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "Wrapped inbox api",
                  "type": {
                    "name": "IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "connectionId",
                  "description": "Connection ID",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "eventDispatcher",
                  "description": "Event dispatcher used in event streams",
                  "type": {
                    "name": "IEventDispatcher",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes async inbox api with all related resources. ",
              "snippet": "ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateInboxAsync",
              "description": "Creates a new Inbox.contextIdID of the Context of the new Inbox.usersVector of UserWithPubKey structs which indicates who will have access to the created Inbox.managersVector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox. publicMetaPublic (unencrypted) metadata.privateMetaPrivate (encrypted) metadata.filesConfigOptional configuration of files.policies(optional) Inbox policy.tokenCancellation token.ID of the created Inbox.",
              "snippet": "ValueTask\u003Cstring\u003E CreateInboxAsync(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig filesConfig,\n    ContainerPolicyWithoutItem? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateInboxAsync",
              "description": "Updates an existing Inbox.inboxIdID of the Inbox to update.usersVector of UserWithPubKey structs which indicates who will have access to the created Inbox.managersVector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox. publicMetaPublic (unencrypted) metadata.privateMetaPrivate (encrypted) metadata.filesConfigOptional configuration of files.versionCurrent version of the updated Inbox.forceForce update without checking version.forceGenerateNewKeyForce to regenerate a key for the Inbox.policies(optional) Inbox policy.tokenCancellation token.",
              "snippet": "ValueTask UpdateInboxAsync(\n    string inboxId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig filesConfig,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicyWithoutItem? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInboxAsync",
              "description": "Gets a Inbox by given Inbox ID.inboxIdID of the Inbox to get.tokenCancellation token.Information about about the Inbox.",
              "snippet": "ValueTask\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E GetInboxAsync(\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListInboxesAsync",
              "description": "Gets s list of Inboxes in given Context.contextIdID of the Context to get Inboxes from.pagingQueryList query parameters.tokenCancellation token.List of Inboxes.",
              "snippet": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E\u003E ListInboxesAsync(\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInboxPublicViewAsync",
              "description": "Gets public data of an Inbox. You do not have to be logged in to call this function.inboxIdID of the Inbox to get.tokenCancellation token.Public accessible information about the Inbox.",
              "snippet": "ValueTask\u003CInboxPublicView\u003E GetInboxPublicViewAsync(\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CInboxPublicView\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteInboxAsync",
              "description": "Deletes an Inbox by given Inbox ID.inboxIdID of the Inbox to delete.tokenCancellation token",
              "snippet": "ValueTask DeleteInboxAsync(\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetEntryBuilder",
              "description": "Returns entry builder that can be used to create new entries in the inbox.inboxIdID of inbox where entry will be created.Inbox entry builder.",
              "snippet": "InboxEntryWriterBuilder GetEntryBuilder(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxEntryWriterBuilder",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadEntryAsync",
              "description": "Gets an entry from an Inbox.inboxEntryIdID of an entry to read from the Inbox.tokenCancellation token.Data of the entry stored in the Inbox.",
              "snippet": "ValueTask\u003CInboxEntry\u003E ReadEntryAsync(\n    string inboxEntryId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CInboxEntry\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListEntriesAsync",
              "description": "Gets list of entries in given Inbox.inboxIdID of the Inbox.pagingQueryList query parameters.tokenCancellation token.List of entries.",
              "snippet": "ValueTask\u003CPagingList\u003CInboxEntry\u003E\u003E ListEntriesAsync(\n    string inboxId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CInboxEntry\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteEntryAsync",
              "description": "Delete an entry from an Inbox.inboxEntryIdID of an entry to delete.tokenCancellation token.",
              "snippet": "ValueTask DeleteEntryAsync(\n    string inboxEntryId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFileForRead",
              "description": "Opens file for user to read.entryEntry from which file will be opended.fileIdID of file to open.tokenCancellation token.Fixed size seekable and readable stream.",
              "snippet": "async ValueTask\u003CPrivmxFileStream\u003E OpenFileForRead(\n    InboxEntry entry,\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "entry",
                  "description": "",
                  "type": {
                    "name": "InboxEntry",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask\u003CPrivmxFileStream\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInboxEvents",
              "description": "Get inbox events.Stream of inbox events.",
              "snippet": "IObservable\u003CInboxEvent\u003E GetInboxEvents()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CInboxEvent\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetEntryEvents",
              "description": "Get events related to specific inbox entries.inboxIdID of the inbox.Stream of entries events.",
              "snippet": "IObservable\u003CInboxEntryEvent\u003E GetEntryEvents(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "IObservable\u003CInboxEntryEvent\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Dispose",
              "description": "",
              "snippet": "void Dispose()",
              "methodType": "method",
              "params": []
            }
          ]
        }
      ]
    },
    {
      "title": "InboxApiExtensions",
      "content": [
        {
          "type": "class",
          "name": "InboxApiExtensions",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "GetInboxAsync",
              "description": "",
              "snippet": "static ValueTask\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E GetInboxAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateInboxAsync",
              "description": "",
              "snippet": "static ValueTask\u003Cstring\u003E CreateInboxAsync(\n    this IInboxApi inboxApi,\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig filesConfig,\n    ContainerPolicyWithoutItem? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateInboxAsync",
              "description": "",
              "snippet": "static ValueTask UpdateInboxAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig filesConfig,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicyWithoutItem? policies = null,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListInboxesAsync",
              "description": "",
              "snippet": "static ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E\u003E ListInboxesAsync(\n    this IInboxApi inboxApi,\n    string contextId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "contextId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CPrivMX.Endpoint.Inbox.Models.Inbox\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInboxPublicViewAsync",
              "description": "",
              "snippet": "static ValueTask\u003CInboxPublicView\u003E GetInboxPublicViewAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CInboxPublicView\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteInboxAsync",
              "description": "",
              "snippet": "static ValueTask DeleteInboxAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "PrepareEntryAsync",
              "description": "",
              "snippet": "static ValueTask\u003Clong\u003E PrepareEntryAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    byte[] data,\n    List\u003Clong\u003E inboxFileHandles,\n    string userPrivKey,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandles",
                  "description": "",
                  "type": {
                    "name": "List\u003Clong\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "userPrivKey",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SendEntryAsync",
              "description": "",
              "snippet": "static ValueTask SendEntryAsync(\n    this IInboxApi inboxApi,\n    long inboxHandle,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadEntryAsync",
              "description": "",
              "snippet": "static ValueTask\u003CInboxEntry\u003E ReadEntryAsync(\n    this IInboxApi inboxApi,\n    string inboxEntryId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxEntryId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CInboxEntry\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ListEntriesAsync",
              "description": "",
              "snippet": "static ValueTask\u003CPagingList\u003CInboxEntry\u003E\u003E ListEntriesAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    PagingQuery pagingQuery,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003CPagingList\u003CInboxEntry\u003E\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteEntryAsync",
              "description": "",
              "snippet": "static ValueTask DeleteEntryAsync(\n    this IInboxApi inboxApi,\n    string inboxEntryId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxEntryId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateFileHandleAsync",
              "description": "",
              "snippet": "static ValueTask\u003Clong\u003E CreateFileHandleAsync(\n    this IInboxApi inboxApi,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long fileSize,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "fileSize",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "WriteToFileAsync",
              "description": "",
              "snippet": "static ValueTask WriteToFileAsync(\n    this IInboxApi inboxApi,\n    long inboxHandle,\n    long inboxFileHandle,\n    byte[] dataChunk,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFileAsync",
              "description": "",
              "snippet": "static ValueTask\u003Clong\u003E OpenFileAsync(\n    this IInboxApi inboxApi,\n    string fileId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Clong\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadFromFileAsync",
              "description": "",
              "snippet": "static ValueTask\u003Cbyte[]\u003E ReadFromFileAsync(\n    this IInboxApi inboxApi,\n    long fileHandle,\n    long length,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cbyte[]\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SeekInFileAsync",
              "description": "",
              "snippet": "static ValueTask SeekInFileAsync(\n    this IInboxApi inboxApi,\n    long fileHandle,\n    long position,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "CloseFileAsync",
              "description": "",
              "snippet": "static ValueTask\u003Cstring\u003E CloseFileAsync(\n    this IInboxApi inboxApi,\n    long fileHandle,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "fileHandle",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask\u003Cstring\u003E",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForInboxEventsAsync",
              "description": "",
              "snippet": "static ValueTask SubscribeForInboxEventsAsync(\n    this IInboxApi inboxApi,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromInboxEventsAsync",
              "description": "",
              "snippet": "static ValueTask UnsubscribeFromInboxEventsAsync(\n    this IInboxApi inboxApi,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForEntryEventsAsync",
              "description": "",
              "snippet": "static ValueTask SubscribeForEntryEventsAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromEntryEventsAsync",
              "description": "",
              "snippet": "static ValueTask UnsubscribeFromEntryEventsAsync(\n    this IInboxApi inboxApi,\n    string inboxId,\n    CancellationToken token = default\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "inboxApi",
                  "description": "",
                  "type": {
                    "name": "this IInboxApi",
                    "optional": false
                  }
                },
                {
                  "name": "inboxId",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "token",
                  "description": "",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "InboxReadFileStream",
          "description": "Stream that reads data from store file. This class is not thread safe. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Inbox"
            }
          ],
          "snippet": "public class InboxReadFileStream : PrivmxEndpointCsharpExtra.Abstractions.PrivmxFileStream\n{\n    override? string FileId {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PublicMeta {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PrivateMeta {get; set;}\n    override bool CanRead {get; set;}\n    override bool CanSeek {get; set;}\n    override bool CanWrite {get; set;}\n    override long Length {get; set;}\n    override long Position {get; set;}\n}",
          "fields": [
            {
              "name": "FileId",
              "description": "",
              "type": {
                "name": "override? string",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "CanRead",
              "description": "Returns if current stream supports reading. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanSeek",
              "description": "Returns if current stream supports seeking. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanWrite",
              "description": "Returns if current stream supports writing. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "Length",
              "description": "Returns total length of the stream. ",
              "type": {
                "name": "override long",
                "optional": false
              }
            },
            {
              "name": "Position",
              "description": "Sets or gets the position with the stream. ",
              "type": {
                "name": "override long",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "Flush",
              "description": "Does nothing. ",
              "snippet": "override void Flush()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Read",
              "description": "",
              "snippet": "override int Read(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override int",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Seek",
              "description": "",
              "snippet": "override long Seek(\n    long offset,\n    SeekOrigin origin\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "origin",
                  "description": "",
                  "type": {
                    "name": "SeekOrigin",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override long",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SetLength",
              "description": "Operation not supported. ",
              "snippet": "override void SetLength(\n    long value\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "Ignored.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Write",
              "description": "Opertation not supported. ",
              "snippet": "override void Write(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "Ignored.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "Ignored.",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "Ignored.",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Disposes stream asynchronously. ",
              "snippet": "override async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxWriteFileStream",
          "description": "Stream that represents remote file in the store. All data is written to the store when file is closed/disposed. This class is not thread safe. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Inbox"
            }
          ],
          "snippet": "public class InboxWriteFileStream : PrivmxEndpointCsharpExtra.Abstractions.PrivmxFileStream\n{\n    override? string FileId {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PublicMeta {get; set;}\n    override ReadOnlySpan\u003Cbyte\u003E PrivateMeta {get; set;}\n    override bool CanRead {get; set;}\n    override bool CanSeek {get; set;}\n    override bool CanWrite {get; set;}\n    override long Length {get; set;}\n    override long Position {get; set;}\n}",
          "fields": [
            {
              "name": "FileId",
              "description": "File ID. May be null if file is not yet created. May change after object disposal when the file is closed and saved on the server. ",
              "type": {
                "name": "override? string",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "File public metadata. ",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "File private (encrypted) metadata. ",
              "type": {
                "name": "override ReadOnlySpan\u003Cbyte\u003E",
                "optional": false
              }
            },
            {
              "name": "CanRead",
              "description": "Always false/. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanSeek",
              "description": "Always false/. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "CanWrite",
              "description": "True until file is disposed. ",
              "type": {
                "name": "override bool",
                "optional": false
              }
            },
            {
              "name": "Length",
              "description": "Fixed length of the file. ",
              "type": {
                "name": "override long",
                "optional": false
              }
            },
            {
              "name": "Position",
              "description": "Returns current position in the file. ",
              "type": {
                "name": "override long",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "Flush",
              "description": "Does nothing. ",
              "snippet": "override void Flush()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Read",
              "description": "Unsupported operation. ",
              "snippet": "override int Read(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override int",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Seek",
              "description": "Unsupported operation. ",
              "snippet": "override long Seek(\n    long offset,\n    SeekOrigin origin\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "offset",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "origin",
                  "description": "",
                  "type": {
                    "name": "SeekOrigin",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override long",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "SetLength",
              "description": "Unsupported operation. ",
              "snippet": "override void SetLength(\n    long value\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Write",
              "description": "Writes data to inbox file. ",
              "snippet": "override void Write(\n    byte[] buffer,\n    int offset,\n    int count\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "buffer",
                  "description": "Input buffer/",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "offset",
                  "description": "Offset in buffer.",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "count",
                  "description": "Number of bytes written.",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "override void",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "Fill",
              "description": "Fills rest of the file with given value. ",
              "snippet": "void Fill(\n    byte value = 0x0\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "Value to fill.",
                  "type": {
                    "name": "byte",
                    "optional": true
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "FillAsync",
              "description": "Fills rest of the file with given value. ",
              "snippet": "async ValueTask FillAsync(\n    byte value = 0x0,\n    CancellationToken token = default\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "value",
                  "description": "Value to fill.",
                  "type": {
                    "name": "byte",
                    "optional": true
                  }
                },
                {
                  "name": "token",
                  "description": "Cancellation token",
                  "type": {
                    "name": "CancellationToken",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            },
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "",
              "snippet": "override async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "override async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        },
        {
          "type": "type",
          "name": "ManagedInboxEntryWriter",
          "description": "Represents ongoing write operation for a single entry in the inbox. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivmxEndpointCsharpExtra.Inbox"
            }
          ],
          "snippet": "public class ManagedInboxEntryWriter : IAsyncDisposable\n{\n    IReadOnlyDictionary\u003Cstring, InboxWriteFileStream\u003E FileStreams {get; set;}\n}",
          "fields": [
            {
              "name": "FileStreams",
              "description": "Mapping of user selected usernames to file streams. ",
              "type": {
                "name": "IReadOnlyDictionary\u003Cstring, InboxWriteFileStream\u003E",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "DisposeAsync",
              "description": "Finishes writing the entry and sends it to the inbox. ",
              "snippet": "async ValueTask DisposeAsync()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "async ValueTask",
                    "optional": false
                  },
                  "description": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
