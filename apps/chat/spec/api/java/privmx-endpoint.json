{
  "core": [
    {
      "title": "Core",
      "content": [
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Contains container and its items policies.",
          "generics": [],
          "snippet": "public class ContainerPolicy{\n\tItemPolicy item\n}",
          "fields": [
            {
              "name": "item",
              "description": "Policy for container\u0027s items.",
              "type": {
                "name": "ItemPolicy",
                "optional": false
              },
              "snippet": "public final ItemPolicy item"
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Contains container\u0027s policies.",
          "generics": [],
          "snippet": "public class ContainerPolicyWithoutItem{\n\tString delete,\n\tString get,\n\tString ownerCanBeRemovedFromManagers,\n\tString update,\n\tString updatePolicy,\n\tString updaterCanBeRemovedFromManagers\n}",
          "fields": [
            {
              "name": "delete",
              "description": "Determines who can delete a container.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String delete"
            },
            {
              "name": "get",
              "description": "Determines who can get a container.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String get"
            },
            {
              "name": "ownerCanBeRemovedFromManagers",
              "description": "Determines whether the owner can be removed from the list of managers.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String ownerCanBeRemovedFromManagers"
            },
            {
              "name": "update",
              "description": "Determines who can update a container.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String update"
            },
            {
              "name": "updatePolicy",
              "description": "Determines who can update policy.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String updatePolicy"
            },
            {
              "name": "updaterCanBeRemovedFromManagers",
              "description": "Determines whether the updater can be removed from the list of managers.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String updaterCanBeRemovedFromManagers"
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Contains base Context information.",
          "generics": [],
          "snippet": "public class Context{\n\tString contextId,\n\tString userId\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String contextId"
            },
            {
              "name": "userId",
              "description": "ID of the user requesting information.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String userId"
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Contains container items policies.",
          "generics": [],
          "snippet": "public class ItemPolicy{\n\tString create,\n\tString delete,\n\tString get,\n\tString listAll,\n\tString listMy,\n\tString update\n}",
          "fields": [
            {
              "name": "create",
              "description": "Determines who can create an item.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String create"
            },
            {
              "name": "delete",
              "description": "Determines who can delete an item.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String delete"
            },
            {
              "name": "get",
              "description": "Determines who can get an item.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String get"
            },
            {
              "name": "listAll",
              "description": "Determines who can list all items.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String listAll"
            },
            {
              "name": "listMy",
              "description": "Determines who can list items created by themselves.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String listMy"
            },
            {
              "name": "update",
              "description": "Determines who can update an item.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String update"
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Contains results of listing methods.",
          "generics": [
            {
              "definition": "T extends Object"
            }
          ],
          "snippet": "public class PagingList\u003cT\u003e{\n\tList\u003cT\u003e readItems,\n\tLong totalAvailable\n}",
          "fields": [
            {
              "name": "readItems",
              "description": "List of items read during single method call.",
              "type": {
                "name": "List\u003cT\u003e",
                "optional": false
              },
              "snippet": "public List\u003cT\u003e readItems"
            },
            {
              "name": "totalAvailable",
              "description": "Total items available to get.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long totalAvailable"
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Contains ID of user and the corresponding public key.",
          "generics": [],
          "snippet": "public class UserWithPubKey{\n\tString pubKey,\n\tString userId\n}",
          "fields": [
            {
              "name": "pubKey",
              "description": "User\u0027s public key.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String pubKey"
            },
            {
              "name": "userId",
              "description": "ID of the user.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String userId"
            }
          ]
        }
      ]
    },
    {
      "title": "Events",
      "content": [
        {
          "type": "type",
          "name": "Event",
          "description": "Represents a generic event caught by PrivMX Endpoint.",
          "generics": [
            {
              "definition": "T extends Object"
            }
          ],
          "snippet": "public class Event\u003cT\u003e{\n\tString channel,\n\tLong connectionId,\n\tT data,\n\tString type\n}",
          "fields": [
            {
              "name": "channel",
              "description": "The event channel.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String channel"
            },
            {
              "name": "connectionId",
              "description": "ID of connection for this event.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long connectionId"
            },
            {
              "name": "data",
              "description": "The data payload associated with the event.\n The type of this data is determined by the generic type parameter `T`.",
              "type": {
                "name": "T",
                "optional": false
              },
              "snippet": "public T data"
            },
            {
              "name": "type",
              "description": "Type of the event.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String type"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "Holds information about deleted Inbox.",
          "generics": [],
          "snippet": "public class InboxDeletedEventData{\n\tString inboxId\n}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the deleted Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String inboxId"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Holds information about a entry deleted from Inbox.",
          "generics": [],
          "snippet": "public class InboxEntryDeletedEventData{\n\tString entryId,\n\tString inboxId\n}",
          "fields": [
            {
              "name": "entryId",
              "description": "ID of the deleted entry.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String entryId"
            },
            {
              "name": "inboxId",
              "description": "ID of the deleted entry\u0027s Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String inboxId"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Holds information about deleted Store.",
          "generics": [],
          "snippet": "public class StoreDeletedEventData{\n\tString storeId\n}",
          "fields": [
            {
              "name": "storeId",
              "description": "ID of the deleted Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String storeId"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Holds information about a file deleted from Store.",
          "generics": [],
          "snippet": "public class StoreFileDeletedEventData{\n\tString contextId,\n\tString fileId,\n\tString storeId\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Store\u0027s Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String contextId"
            },
            {
              "name": "fileId",
              "description": "ID of the deleted file.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String fileId"
            },
            {
              "name": "storeId",
              "description": "ID of the deleted file\u0027s Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String storeId"
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Holds information about changes in a Store\u0027s statistics.",
          "generics": [],
          "snippet": "public class StoreStatsChangedEventData{\n\tString contextId,\n\tLong filesCount,\n\tLong lastFileDate,\n\tString storeId\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the changed Store\u0027s Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String contextId"
            },
            {
              "name": "filesCount",
              "description": "Updated number of files in the Store.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public final Long filesCount"
            },
            {
              "name": "lastFileDate",
              "description": "Updated date of the last file in the Store.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public final Long lastFileDate"
            },
            {
              "name": "storeId",
              "description": "ID of the changed Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String storeId"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "Holds information about a deleted Thread.",
          "generics": [],
          "snippet": "public class ThreadDeletedEventData{\n\tString threadId\n}",
          "fields": [
            {
              "name": "threadId",
              "description": "ID of the deleted Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String threadId"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Holds information about a message deleted from a Thread.",
          "generics": [],
          "snippet": "public class ThreadDeletedMessageEventData{\n\tString messageId,\n\tString threadId\n}",
          "fields": [
            {
              "name": "messageId",
              "description": "ID of the deleted Message.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String messageId"
            },
            {
              "name": "threadId",
              "description": "ID of the deleted message\u0027s Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String threadId"
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Holds information about changes in a Thread\u0027s statistics.",
          "generics": [],
          "snippet": "public class ThreadStatsEventData{\n\tLong lastMsgDate,\n\tLong messagesCount,\n\tString threadId\n}",
          "fields": [
            {
              "name": "lastMsgDate",
              "description": "Timestamp of the most recent Thread message.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public final Long lastMsgDate"
            },
            {
              "name": "messagesCount",
              "description": "Updated number of messages in the Thread.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public final Long messagesCount"
            },
            {
              "name": "threadId",
              "description": "ID of the changed Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String threadId"
            }
          ]
        }
      ]
    },
    {
      "title": "EventQueue",
      "content": [
        {
          "type": "class",
          "name": "EventQueue",
          "generics": [],
          "description": "Defines methods to working with Events queue.",
          "fields": [],
          "methods": [
            {
              "name": "emitBreakEvent",
              "description": "Puts the break event on the events queue.\n You can use it to break the #waitEvent().",
              "snippet": "public static void emitBreakEvent()",
              "methodType": "static",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "getEvent",
              "description": "Gets the first event from the events queue.",
              "snippet": "public static Event\u003c?\u003e getEvent()",
              "methodType": "static",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Event\u003c?\u003e",
                    "optional": false
                  },
                  "description": "Event data if any available otherwise return null"
                }
              ]
            },
            {
              "name": "waitEvent",
              "description": "Waits for event on current thread.",
              "snippet": "public static Event\u003c?\u003e waitEvent()",
              "methodType": "static",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Event\u003c?\u003e",
                    "optional": false
                  },
                  "description": "Caught event"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Connection",
      "content": [
        {
          "type": "class",
          "name": "Connection",
          "generics": [],
          "description": "Manages a connection between the Endpoint and the Bridge server.",
          "fields": [],
          "methods": [
            {
              "name": "close",
              "description": "If there is an active connection then it\n disconnects from PrivMX Bridge and frees memory making this instance not reusable.",
              "snippet": "public void close()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": []
            },
            {
              "name": "connect",
              "description": "Connects to PrivMX Bridge server.",
              "snippet": "public static Connection connect(\n\tString userPrivKey,\n\tString solutionId,\n\tString bridgeUrl\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "userPrivKey",
                  "description": "user\u0027s private key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "bridgeUrl",
                  "description": "Bridge\u0027s Endpoint URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "libConnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object"
                }
              ]
            },
            {
              "name": "connectPublic",
              "description": "Connects to PrivMX Bridge server as a guest user.",
              "snippet": "public static Connection connectPublic(\n\tString solutionId,\n\tString bridgeUrl\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "bridgeUrl",
                  "description": "Bridge\u0027s Endpoint URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "libConnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object"
                }
              ]
            },
            {
              "name": "disconnect",
              "description": "Disconnects from PrivMX Bridge server.",
              "snippet": "public void disconnect()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when instance is not connected or closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "libDisconnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                },
                {
                  "type": "libPlatformDisconnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "getConnectionId",
              "description": "Gets the ID of the current connection.",
              "snippet": "public Long getConnectionId()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "ID of the connection"
                }
              ]
            },
            {
              "name": "listContexts",
              "description": "Gets a list of Contexts available for the user.",
              "snippet": "public PagingList\u003cContext\u003e listContexts(\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when instance is not connected.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cContext\u003e",
                    "optional": false
                  },
                  "description": "list of Contexts"
                }
              ]
            },
            {
              "name": "listContexts",
              "description": "Gets a list of Contexts available for the user.",
              "snippet": "public PagingList\u003cContext\u003e listContexts(\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when instance is not connected.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cContext\u003e",
                    "optional": false
                  },
                  "description": "list of Contexts"
                }
              ]
            },
            {
              "name": "platformConnect",
              "description": "Connects to PrivMX Bridge server.",
              "snippet": "public static Connection platformConnect(\n\tString userPrivKey,\n\tString solutionId,\n\tString platformUrl\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "userPrivKey",
                  "description": "user\u0027s private key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "Platform\u0027s Endpoint URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "libConnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object"
                }
              ]
            },
            {
              "name": "platformConnectPublic",
              "description": "Connects to PrivMX Bridge server as a guest user.",
              "snippet": "public static Connection platformConnectPublic(\n\tString solutionId,\n\tString platformUrl\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "platformUrl",
                  "description": "Platform\u0027s Endpoint URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "libConnected",
                  "channel": "-",
                  "payload": {
                    "name": "Void",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Connection object"
                }
              ]
            },
            {
              "name": "setCertsPath",
              "description": "Allows to set path to the SSL certificate file.",
              "snippet": "public static void setCertsPath(\n\tString certsPath\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "certsPath",
                  "description": "path to file",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": []
            }
          ]
        }
      ]
    },
    {
      "title": "BackendRequester",
      "content": [
        {
          "type": "class",
          "name": "BackendRequester",
          "generics": [],
          "description": "Defines methods sending requests to PrivMX Bridge API.",
          "fields": [],
          "methods": [
            {
              "name": "backendRequest",
              "description": "Sends a request to PrivMX Bridge API using access token for authorization.",
              "snippet": "public static String backendRequest(\n\tString serverUrl,\n\tString accessToken,\n\tString method,\n\tString paramsAsJson\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "accessToken",
                  "description": "token for authorization (see PrivMX Bridge API for more details)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response"
                }
              ]
            },
            {
              "name": "backendRequest",
              "description": "Sends request to PrivMX Bridge API.",
              "snippet": "public static String backendRequest(\n\tString serverUrl,\n\tString method,\n\tString paramsAsJson\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response"
                }
              ]
            },
            {
              "name": "backendRequest",
              "description": "Sends a request to PrivMX Bridge API using pair of API KEY ID and API KEY SECRET for authorization.",
              "snippet": "public static String backendRequest(\n\tString serverUrl,\n\tString apiKeyId,\n\tString apiKeySecret,\n\tlong mode,\n\tString method,\n\tString paramsAsJson\n)",
              "methodType": "static",
              "generic": [],
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeyId",
                  "description": "API KEY ID (see PrivMX Bridge API for more details)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeySecret",
                  "description": "API KEY SECRET (see PrivMX Bridge API for more details)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "mode",
                  "description": "allows you to set whether the request should be signed (mode \u003d 1) or plain (mode \u003d 0)",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "_meta": {
    "version": "2.2.0",
    "package": "privmx-endpoint-java",
    "lang": "java",
    "name": "PrivMX Endpoint Java"
  },
  "thread": [
    {
      "title": "Thread",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Holds information about the Message.",
          "generics": [],
          "snippet": "public class Message{\n\tString authorPubKey,\n\tbyte[] data,\n\tServerMessageInfo info,\n\tbyte[] privateMeta,\n\tbyte[] publicMeta,\n\tLong statusCode\n}",
          "fields": [
            {
              "name": "authorPubKey",
              "description": "Public key of the author of the message.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String authorPubKey"
            },
            {
              "name": "data",
              "description": "Message\u0027s data.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] data"
            },
            {
              "name": "info",
              "description": "Message\u0027s information created by server.",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              },
              "snippet": "public ServerMessageInfo info"
            },
            {
              "name": "privateMeta",
              "description": "Message\u0027s private metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] privateMeta"
            },
            {
              "name": "publicMeta",
              "description": "Message\u0027s public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the `Message`.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Holds message\u0027s information created by server.",
          "generics": [],
          "snippet": "public class ServerMessageInfo{\n\tString author,\n\tLong createDate,\n\tString messageId,\n\tString threadId\n}",
          "fields": [
            {
              "name": "author",
              "description": "ID of the user who created the message.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String author"
            },
            {
              "name": "createDate",
              "description": "Message\u0027s creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "messageId",
              "description": "ID of the message.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String messageId"
            },
            {
              "name": "threadId",
              "description": "ID of the message\u0027s Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String threadId"
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Holds all available information about a Thread.",
          "generics": [],
          "snippet": "public class Thread{\n\tString contextId,\n\tLong createDate,\n\tString creator,\n\tLong lastModificationDate,\n\tString lastModifier,\n\tLong lastMsgDate,\n\tList\u003cString\u003e managers,\n\tLong messagesCount,\n\tContainerPolicy policy,\n\tbyte[] privateMeta,\n\tbyte[] publicMeta,\n\tLong statusCode,\n\tString threadId,\n\tList\u003cString\u003e users,\n\tLong version\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Thread\u0027s Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String contextId"
            },
            {
              "name": "createDate",
              "description": "Thread creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "creator",
              "description": "ID of the user who created the Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String creator"
            },
            {
              "name": "lastModificationDate",
              "description": "Thread last modification timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String lastModifier"
            },
            {
              "name": "lastMsgDate",
              "description": "Timestamp of the last posted message.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long lastMsgDate"
            },
            {
              "name": "managers",
              "description": "List of users (their IDs) with management rights.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e managers"
            },
            {
              "name": "messagesCount",
              "description": "Total number of messages in the Thread.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long messagesCount"
            },
            {
              "name": "policy",
              "description": "Thread\u0027s policies",
              "type": {
                "name": "ContainerPolicy",
                "optional": false
              },
              "snippet": "public ContainerPolicy policy"
            },
            {
              "name": "privateMeta",
              "description": "Thread\u0027s private metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] privateMeta"
            },
            {
              "name": "publicMeta",
              "description": "Thread\u0027s public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the `Thread`.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            },
            {
              "name": "threadId",
              "description": "ID of the Thread.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String threadId"
            },
            {
              "name": "users",
              "description": "List of users (their IDs) with access to the Thread.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e users"
            },
            {
              "name": "version",
              "description": "Version number (changes on updates).",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long version"
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadApi",
      "content": [
        {
          "type": "class",
          "name": "ThreadApi",
          "generics": [],
          "description": "Manages Threads and messages.",
          "fields": [],
          "methods": [
            {
              "name": "ThreadApi",
              "description": "Initialize Thread module on given active connection.",
              "snippet": "public void ThreadApi(\n\tConnection connection\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "connection",
                  "description": "active connection to PrivMX Bridge",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when given Connection is not connected",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "close",
              "description": "Frees memory.",
              "snippet": "public void close()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when instance is currently closed.",
                  "type": {
                    "name": "Exception",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "createThread",
              "description": "Creates a new Thread in given Context.",
              "snippet": "public String createThread(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Thread in",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the created Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to\n the created Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadCreated",
                  "channel": "thread",
                  "payload": {
                    "name": "Thread",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the created Thread"
                }
              ]
            },
            {
              "name": "createThread",
              "description": "Creates a new Thread in given Context.",
              "snippet": "public String createThread(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tContainerPolicy policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Thread in",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the created Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to\n the created Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadCreated",
                  "channel": "thread",
                  "payload": {
                    "name": "Thread",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the created Thread"
                }
              ]
            },
            {
              "name": "deleteMessage",
              "description": "Deletes a message by given message ID.",
              "snippet": "public void deleteMessage(\n\tString messageId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadMessageDeleted",
                  "channel": "thread/\u003cthreadId\u003e/messages",
                  "payload": {
                    "name": "ThreadDeletedMessageEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "deleteThread",
              "description": "Deletes a Thread by given Thread ID.",
              "snippet": "public void deleteThread(\n\tString threadId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadDeleted",
                  "channel": "thread",
                  "payload": {
                    "name": "ThreadDeletedEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "getMessage",
              "description": "Gets a message by given message ID.",
              "snippet": "public Message getMessage(\n\tString messageId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Message",
                    "optional": false
                  },
                  "description": "Message with matching id"
                }
              ]
            },
            {
              "name": "getThread",
              "description": "Gets a Thread by given Thread ID.",
              "snippet": "public Thread getThread(\n\tString threadId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of Thread to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Thread",
                    "optional": false
                  },
                  "description": "Information about the Thread"
                }
              ]
            },
            {
              "name": "listMessages",
              "description": "Gets a list of messages from a Thread.",
              "snippet": "public PagingList\u003cMessage\u003e listMessages(\n\tString threadId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to list messages from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cMessage\u003e",
                    "optional": false
                  },
                  "description": "list of messages"
                }
              ]
            },
            {
              "name": "listMessages",
              "description": "Gets a list of messages from a Thread.",
              "snippet": "public PagingList\u003cMessage\u003e listMessages(\n\tString threadId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to list messages from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cMessage\u003e",
                    "optional": false
                  },
                  "description": "list of messages"
                }
              ]
            },
            {
              "name": "listThreads",
              "description": "Gets a list of Threads in given Context.",
              "snippet": "public PagingList\u003cThread\u003e listThreads(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Threads from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cThread\u003e",
                    "optional": false
                  },
                  "description": "list of Threads"
                }
              ]
            },
            {
              "name": "listThreads",
              "description": "Gets a list of Threads in given Context.",
              "snippet": "public PagingList\u003cThread\u003e listThreads(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Threads from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cThread\u003e",
                    "optional": false
                  },
                  "description": "list of Threads"
                }
              ]
            },
            {
              "name": "sendMessage",
              "description": "Sends a message in a Thread.",
              "snippet": "public String sendMessage(\n\tString threadId,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tbyte[] data\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to send message to",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public message metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private message metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "content of the message",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadNewMessage",
                  "channel": "thread/\u003cthreadId\u003e/messages",
                  "payload": {
                    "name": "Message",
                    "optional": false
                  }
                },
                {
                  "type": "threadStats",
                  "channel": "thread",
                  "payload": {
                    "name": "ThreadStatsEventData",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the new message"
                }
              ]
            },
            {
              "name": "subscribeForMessageEvents",
              "description": "Subscribes for events in given Thread.",
              "snippet": "public void subscribeForMessageEvents(\n\tString threadId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to subscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "subscribeForThreadEvents",
              "description": "Subscribes for the Thread module main events.",
              "snippet": "public void subscribeForThreadEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromMessageEvents",
              "description": "Unsubscribes from events in given Thread.",
              "snippet": "public void unsubscribeFromMessageEvents(\n\tString threadId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to unsubscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromThreadEvents",
              "description": "Unsubscribes from the Thread module main events.",
              "snippet": "public void unsubscribeFromThreadEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "updateMessage",
              "description": "Updates message in a Thread.",
              "snippet": "public void updateMessage(\n\tString messageId,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tbyte[] data\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public message metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private message metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "new content of the message",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadUpdatedMessage",
                  "channel": "thread/\u003cthreadId\u003e/messages",
                  "payload": {
                    "name": "Message",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateThread",
              "description": "Updates an existing Thread.",
              "snippet": "public void updateThread(\n\tString threadId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to\n the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Thread",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadUpdated",
                  "channel": "thread",
                  "payload": {
                    "name": "Thread",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateThread",
              "description": "Updates an existing Thread.",
              "snippet": "public void updateThread(\n\tString threadId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to\n the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Thread",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Thread",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadUpdated",
                  "channel": "thread",
                  "payload": {
                    "name": "Thread",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateThread",
              "description": "Updates an existing Thread.",
              "snippet": "public void updateThread(\n\tString threadId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey,\n\tContainerPolicy policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to\n the updated Thread",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Thread",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Thread",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "threadUpdated",
                  "channel": "thread",
                  "payload": {
                    "name": "Thread",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "store": [
    {
      "title": "Store",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Holds information about the file.",
          "generics": [],
          "snippet": "public class File{\n\tString authorPubKey,\n\tServerFileInfo info,\n\tbyte[] privateMeta,\n\tbyte[] publicMeta,\n\tLong size,\n\tLong statusCode\n}",
          "fields": [
            {
              "name": "authorPubKey",
              "description": "Public key of the author of the file.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String authorPubKey"
            },
            {
              "name": "info",
              "description": "File\u0027s information created by server.",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              },
              "snippet": "public ServerFileInfo info"
            },
            {
              "name": "privateMeta",
              "description": "File\u0027s private metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] privateMeta"
            },
            {
              "name": "publicMeta",
              "description": "File\u0027s public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "size",
              "description": "File\u0027s size.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long size"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the file.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Holds file\u0027s information created by server.",
          "generics": [],
          "snippet": "public class ServerFileInfo{\n\tString author,\n\tLong createDate,\n\tString fileId,\n\tString storeId\n}",
          "fields": [
            {
              "name": "author",
              "description": "ID of the user who created the file.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String author"
            },
            {
              "name": "createDate",
              "description": "File\u0027s creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "fileId",
              "description": "ID of the file.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String fileId"
            },
            {
              "name": "storeId",
              "description": "ID of the Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String storeId"
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Holds all available information about a Store.",
          "generics": [],
          "snippet": "public class Store{\n\tString contextId,\n\tLong createDate,\n\tString creator,\n\tLong filesCount,\n\tLong lastFileDate,\n\tLong lastModificationDate,\n\tString lastModifier,\n\tList\u003cString\u003e managers,\n\tContainerPolicy policy,\n\tbyte[] privateMeta,\n\tbyte[] publicMeta,\n\tLong statusCode,\n\tString storeId,\n\tList\u003cString\u003e users,\n\tLong version\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String contextId"
            },
            {
              "name": "createDate",
              "description": "Store creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "creator",
              "description": "ID of the user who created the Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String creator"
            },
            {
              "name": "filesCount",
              "description": "Total number of files in the Store.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long filesCount"
            },
            {
              "name": "lastFileDate",
              "description": "Timestamp of the last created file.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long lastFileDate"
            },
            {
              "name": "lastModificationDate",
              "description": "Store last modification timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String lastModifier"
            },
            {
              "name": "managers",
              "description": "List of users (their IDs) with management rights.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e managers"
            },
            {
              "name": "policy",
              "description": "Store\u0027s policies",
              "type": {
                "name": "ContainerPolicy",
                "optional": false
              },
              "snippet": "public ContainerPolicy policy"
            },
            {
              "name": "privateMeta",
              "description": "Store\u0027s private metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] privateMeta"
            },
            {
              "name": "publicMeta",
              "description": "Store\u0027s public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the `Store`.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            },
            {
              "name": "storeId",
              "description": "ID of the Store.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String storeId"
            },
            {
              "name": "users",
              "description": "List of users (their IDs) with access to the Store.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e users"
            },
            {
              "name": "version",
              "description": "Version number (changes on updates).",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long version"
            }
          ]
        }
      ]
    },
    {
      "title": "StoreApi",
      "content": [
        {
          "type": "class",
          "name": "StoreApi",
          "generics": [],
          "description": "Manages PrivMX Bridge Stores and Files.",
          "fields": [],
          "methods": [
            {
              "name": "StoreApi",
              "description": "Initialize Store module on passed active connection.",
              "snippet": "public void StoreApi(\n\tConnection connection\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "connection",
                  "description": "active connection to PrivMX Bridge",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when passed Connection is not connected.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "close",
              "description": "Frees memory.",
              "snippet": "public void close()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when instance is currently closed.",
                  "type": {
                    "name": "Exception",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "closeFile",
              "description": "Closes the file handle.",
              "snippet": "public String closeFile(\n\tlong fileHandle\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to read/write file data",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeStatsChanged",
                  "channel": "store",
                  "payload": {
                    "name": "StoreStatsChangedEventData",
                    "optional": false
                  }
                },
                {
                  "type": "storeFileCreated",
                  "channel": "store/\u003cstoreId\u003e/files",
                  "payload": {
                    "name": "File",
                    "optional": false
                  }
                },
                {
                  "type": "storeFileUpdated",
                  "channel": "store/\u003cstoreId\u003e/files",
                  "payload": {
                    "name": "File",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of closed file"
                }
              ]
            },
            {
              "name": "createFile",
              "description": "Creates a new file in a Store.",
              "snippet": "public Long createFile(\n\tString storeId,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong size\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to create the file in",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "size of the file",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Handle to write data"
                }
              ]
            },
            {
              "name": "createStore",
              "description": "Creates a new Store in given Context.",
              "snippet": "public String createStore(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the created Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to the\n created Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeCreated",
                  "channel": "store",
                  "payload": {
                    "name": "Store",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Created Store ID"
                }
              ]
            },
            {
              "name": "createStore",
              "description": "Creates a new Store in given Context.",
              "snippet": "public String createStore(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tContainerPolicy policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the created Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to the\n created Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeCreated",
                  "channel": "store",
                  "payload": {
                    "name": "Store",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Created Store ID"
                }
              ]
            },
            {
              "name": "deleteFile",
              "description": "Deletes a file by given ID.",
              "snippet": "public void deleteFile(\n\tString fileId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeFileDeleted",
                  "channel": "store/\u003cstoreId\u003e/files",
                  "payload": {
                    "name": "StoreFileDeletedEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "deleteStore",
              "description": "Deletes a Store by given Store ID.",
              "snippet": "public void deleteStore(\n\tString storeId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeDeleted",
                  "channel": "store",
                  "payload": {
                    "name": "StoreDeletedEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "getFile",
              "description": "Gets a single file by the given file ID.",
              "snippet": "public File getFile(\n\tString fileId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "File",
                    "optional": false
                  },
                  "description": "Information about the file"
                }
              ]
            },
            {
              "name": "getStore",
              "description": "Gets a single Store by given Store ID.",
              "snippet": "public Store getStore(\n\tString storeId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Store",
                    "optional": false
                  },
                  "description": "Information about the Store"
                }
              ]
            },
            {
              "name": "listFiles",
              "description": "Gets a list of files in given Store.",
              "snippet": "public PagingList\u003cFile\u003e listFiles(\n\tString storeId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get files from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cFile\u003e",
                    "optional": false
                  },
                  "description": "list of files"
                }
              ]
            },
            {
              "name": "listFiles",
              "description": "Gets a list of files in given Store.",
              "snippet": "public PagingList\u003cFile\u003e listFiles(\n\tString storeId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get files from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cFile\u003e",
                    "optional": false
                  },
                  "description": "list of files"
                }
              ]
            },
            {
              "name": "listStores",
              "description": "Gets a list of Stores in given Context.",
              "snippet": "public PagingList\u003cStore\u003e listStores(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cStore\u003e",
                    "optional": false
                  },
                  "description": "list of Stores"
                }
              ]
            },
            {
              "name": "listStores",
              "description": "Gets a list of Stores in given Context.",
              "snippet": "public PagingList\u003cStore\u003e listStores(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cStore\u003e",
                    "optional": false
                  },
                  "description": "list of Stores"
                }
              ]
            },
            {
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "public Long openFile(\n\tString fileId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Handle to read file data"
                }
              ]
            },
            {
              "name": "readFromFile",
              "description": "Reads file data.",
              "snippet": "public byte[] readFromFile(\n\tlong fileHandle,\n\tlong length\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to read file data",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "size of data to read",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "File data chunk"
                }
              ]
            },
            {
              "name": "seekInFile",
              "description": "Moves read cursor.",
              "snippet": "public void seekInFile(\n\tlong fileHandle,\n\tlong position\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to read/write file data",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "new cursor position",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "subscribeForFileEvents",
              "description": "Subscribes for events in given Store.",
              "snippet": "public void subscribeForFileEvents(\n\tString storeId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to subscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "subscribeForStoreEvents",
              "description": "Subscribes for the Store module main events.",
              "snippet": "public void subscribeForStoreEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromFileEvents",
              "description": "Unsubscribes from events in given Store.",
              "snippet": "public void unsubscribeFromFileEvents(\n\tString storeId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the `Store` to unsubscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromStoreEvents",
              "description": "Unsubscribes from the Store module main events.",
              "snippet": "public void unsubscribeFromStoreEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "updateFile",
              "description": "Updates an existing file in a Store.",
              "snippet": "public Long updateFile(\n\tString fileId,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong size\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "size of the file",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Handle to write file data"
                }
              ]
            },
            {
              "name": "updateFileMeta",
              "description": "Updates metadata of an existing file in a Store.",
              "snippet": "public void updateFileMeta(\n\tString fileId,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private file metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeFileUpdated",
                  "channel": "store/\u003cstoreId\u003e/files",
                  "payload": {
                    "name": "File",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateStore",
              "description": "Updates an existing Store.",
              "snippet": "public void updateStore(\n\tString storeId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to the\n updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Store",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeUpdated",
                  "channel": "store",
                  "payload": {
                    "name": "Store",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateStore",
              "description": "Updates an existing Store.",
              "snippet": "public void updateStore(\n\tString storeId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to the\n updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Store",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Store",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeUpdated",
                  "channel": "store",
                  "payload": {
                    "name": "Store",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateStore",
              "description": "Updates an existing Store.",
              "snippet": "public void updateStore(\n\tString storeId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey,\n\tContainerPolicy policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey which indicates who will have access to the updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey which indicates who will have access (and management rights) to the\n updated Store",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Store",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Store",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "storeUpdated",
                  "channel": "store",
                  "payload": {
                    "name": "Store",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "writeToFile",
              "description": "Writes a file data.",
              "snippet": "public void writeToFile(\n\tlong fileHandle,\n\tbyte[] dataChunk\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to write file data",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "file data chunk",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            }
          ]
        }
      ]
    }
  ],
  "inbox": [
    {
      "title": "Inbox",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Holds Inbox files configuration.",
          "generics": [],
          "snippet": "public class FilesConfig{\n\tLong maxCount,\n\tLong maxFileSize,\n\tLong maxWholeUploadSize,\n\tLong minCount\n}",
          "fields": [
            {
              "name": "maxCount",
              "description": "Maximum number of files allowed when sending Inbox entry.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long maxCount"
            },
            {
              "name": "maxFileSize",
              "description": "Maximum file size allowed when sending Inbox entry.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long maxFileSize"
            },
            {
              "name": "maxWholeUploadSize",
              "description": "Maximum size of all files in total allowed when sending Inbox entry.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long maxWholeUploadSize"
            },
            {
              "name": "minCount",
              "description": "Minimum number of files required when sending Inbox entry.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long minCount"
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Holds all available information about an Inbox.",
          "generics": [],
          "snippet": "public class Inbox{\n\tString contextId,\n\tLong createDate,\n\tString creator,\n\tFilesConfig filesConfig,\n\tString inboxId,\n\tLong lastModificationDate,\n\tString lastModifier,\n\tList\u003cString\u003e managers,\n\tContainerPolicyWithoutItem policy,\n\tbyte[] privateMeta,\n\tbyte[] publicMeta,\n\tLong statusCode,\n\tList\u003cString\u003e users,\n\tLong version\n}",
          "fields": [
            {
              "name": "contextId",
              "description": "ID of the Context.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String contextId"
            },
            {
              "name": "createDate",
              "description": "Inbox creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "creator",
              "description": "ID of the user who created the Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String creator"
            },
            {
              "name": "filesConfig",
              "description": "Inbox files configuration.",
              "type": {
                "name": "FilesConfig",
                "optional": false
              },
              "snippet": "public FilesConfig filesConfig"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String inboxId"
            },
            {
              "name": "lastModificationDate",
              "description": "Inbox last modification timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long lastModificationDate"
            },
            {
              "name": "lastModifier",
              "description": "ID of the user who last modified the Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String lastModifier"
            },
            {
              "name": "managers",
              "description": "List of users (their IDs) with management rights.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e managers"
            },
            {
              "name": "policy",
              "description": "Inbox policies.",
              "type": {
                "name": "ContainerPolicyWithoutItem",
                "optional": false
              },
              "snippet": "public ContainerPolicyWithoutItem policy"
            },
            {
              "name": "privateMeta",
              "description": "Inbox private metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] privateMeta"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the `Inbox`.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            },
            {
              "name": "users",
              "description": "List of users (their IDs) with access to the Inbox.",
              "type": {
                "name": "List\u003cString\u003e",
                "optional": false
              },
              "snippet": "public List\u003cString\u003e users"
            },
            {
              "name": "version",
              "description": "Version number (changes on updates).",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long version"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Holds information about Inbox entry.",
          "generics": [],
          "snippet": "public class InboxEntry{\n\tString authorPubKey,\n\tLong createDate,\n\tbyte[] data,\n\tString entryId,\n\tList\u003cFile\u003e files,\n\tString inboxId,\n\tLong statusCode\n}",
          "fields": [
            {
              "name": "authorPubKey",
              "description": "Public key of the author of an entry.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String authorPubKey"
            },
            {
              "name": "createDate",
              "description": "Inbox entry creation timestamp.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long createDate"
            },
            {
              "name": "data",
              "description": "Entry data.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] data"
            },
            {
              "name": "entryId",
              "description": "ID of the entry.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String entryId"
            },
            {
              "name": "files",
              "description": "List of files attached to the entry.",
              "type": {
                "name": "List\u003cFile\u003e",
                "optional": false
              },
              "snippet": "public List\u003cFile\u003e files"
            },
            {
              "name": "inboxId",
              "description": "ID of the Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String inboxId"
            },
            {
              "name": "statusCode",
              "description": "Status code of retrieval and decryption of the `Inbox` entry.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long statusCode"
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Holds Inbox public information.",
          "generics": [],
          "snippet": "public class InboxPublicView{\n\tString inboxId,\n\tbyte[] publicMeta,\n\tLong version\n}",
          "fields": [
            {
              "name": "inboxId",
              "description": "ID of the Inbox.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public String inboxId"
            },
            {
              "name": "publicMeta",
              "description": "Inbox public metadata.",
              "type": {
                "name": "byte[]",
                "optional": false
              },
              "snippet": "public byte[] publicMeta"
            },
            {
              "name": "version",
              "description": "Version of the Inbox.",
              "type": {
                "name": "Long",
                "optional": false
              },
              "snippet": "public Long version"
            }
          ]
        }
      ]
    },
    {
      "title": "InboxApi",
      "content": [
        {
          "type": "class",
          "name": "InboxApi",
          "generics": [],
          "description": "Manages PrivMX Bridge Inboxes and Entries.",
          "fields": [],
          "methods": [
            {
              "name": "InboxApi",
              "description": "Creates Inbox from existing Connection.",
              "snippet": "public void InboxApi(\n\tConnection connection\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "connection",
                  "description": "current connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when one of the passed parameters is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "InboxApi",
              "description": "Creates Inbox from existing Connection, ThreadApi, StoreApi.",
              "snippet": "public void InboxApi(\n\tConnection connection,\n\tThreadApi threadApi,\n\tStoreApi storeApi\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "connection",
                  "description": "active connection to PrivMX Bridge",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                },
                {
                  "name": "threadApi",
                  "description": "instance of ThreadApi created on passed Connection",
                  "type": {
                    "name": "ThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeApi",
                  "description": "instance of StoreApi created on passed Connection",
                  "type": {
                    "name": "StoreApi",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when one of the passed parameters is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "close",
              "description": "Frees memory.",
              "snippet": "public void close()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "when instance is currently closed.",
                  "type": {
                    "name": "Exception",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "closeFile",
              "description": "Closes a file by given handle.",
              "snippet": "public String closeFile(\n\tlong fileHandle\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of closed file"
                }
              ]
            },
            {
              "name": "createFileHandle",
              "description": "Creates a file handle to send a file to an Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public Long createFileHandle(\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tlong fileSize\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "publicMeta",
                  "description": "public file\u0027s metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private file\u0027s metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "fileSize",
                  "description": "size of the file to send",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "File handle"
                }
              ]
            },
            {
              "name": "createInbox",
              "description": "Creates a new Inbox.",
              "snippet": "public String createInbox(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context of the new Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and management rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxCreated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the created Inbox"
                }
              ]
            },
            {
              "name": "createInbox",
              "description": "Creates a new Inbox.",
              "snippet": "public String createInbox(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tFilesConfig filesConfig\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context of the new Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey structs which indicates who will have access (and management rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "overrides default file configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxCreated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the created Inbox"
                }
              ]
            },
            {
              "name": "createInbox",
              "description": "Creates a new Inbox.",
              "snippet": "public String createInbox(\n\tString contextId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tFilesConfig filesConfig,\n\tContainerPolicyWithoutItem policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context of the new Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey structs which indicates who will have access (and management rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "overrides default file configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicyWithoutItem",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxCreated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "ID of the created Inbox"
                }
              ]
            },
            {
              "name": "deleteEntry",
              "description": "Deletes an entry from an Inbox.",
              "snippet": "public void deleteEntry(\n\tString inboxEntryId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxEntryDeleted",
                  "channel": "inbox/\u003cinboxId\u003e/entries",
                  "payload": {
                    "name": "InboxEntryDeletedEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "deleteInbox",
              "description": "Deletes an Inbox by given Inbox ID.",
              "snippet": "public void deleteInbox(\n\tString inboxId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to delete",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxDeleted",
                  "channel": "inbox",
                  "payload": {
                    "name": "InboxDeletedEventData",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "getInbox",
              "description": "Gets a single Inbox by given Inbox ID.",
              "snippet": "public Inbox getInbox(\n\tString inboxId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Inbox",
                    "optional": false
                  },
                  "description": "Information about the Inbox"
                }
              ]
            },
            {
              "name": "getInboxPublicView",
              "description": "Gets public data of given Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public InboxPublicView getInboxPublicView(\n\tString inboxId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "InboxPublicView",
                    "optional": false
                  },
                  "description": "Public accessible information about the Inbox"
                }
              ]
            },
            {
              "name": "listEntries",
              "description": "Gets list of entries in given Inbox.",
              "snippet": "public PagingList\u003cInboxEntry\u003e listEntries(\n\tString inboxId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cInboxEntry\u003e",
                    "optional": false
                  },
                  "description": "list of entries"
                }
              ]
            },
            {
              "name": "listEntries",
              "description": "Gets list of entries of given Inbox.",
              "snippet": "public PagingList\u003cInboxEntry\u003e listEntries(\n\tString inboxId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cInboxEntry\u003e",
                    "optional": false
                  },
                  "description": "list of entries"
                }
              ]
            },
            {
              "name": "listInboxes",
              "description": "Gets a list of Inboxes in given Context.",
              "snippet": "public PagingList\u003cInbox\u003e listInboxes(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get Inboxes from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cInbox\u003e",
                    "optional": false
                  },
                  "description": "list of Inboxes"
                }
              ]
            },
            {
              "name": "listInboxes",
              "description": "Gets s list of Inboxes in given Context.",
              "snippet": "public PagingList\u003cInbox\u003e listInboxes(\n\tString contextId,\n\tlong skip,\n\tlong limit,\n\tString sortOrder,\n\tString lastId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get Inboxes from",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "skip",
                  "description": "skip number of elements to skip from result",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "limit",
                  "description": "limit of elements to return for query",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "sortOrder",
                  "description": "order of elements in result (\"asc\" for ascending, \"desc\" for descending)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "lastId",
                  "description": "ID of the element from which query results should start",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003cInbox\u003e",
                    "optional": false
                  },
                  "description": "list of Inboxes"
                }
              ]
            },
            {
              "name": "openFile",
              "description": "Opens a file to read.",
              "snippet": "public Long openFile(\n\tString fileId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Handle to read file data"
                }
              ]
            },
            {
              "name": "prepareEntry",
              "description": "Prepares a request to send data to an Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public Long prepareEntry(\n\tString inboxId,\n\tbyte[] data\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "entry data to send",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Inbox handle"
                }
              ]
            },
            {
              "name": "prepareEntry",
              "description": "Prepares a request to send data to an Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public Long prepareEntry(\n\tString inboxId,\n\tbyte[] data,\n\tList\u003cLong\u003e inboxFileHandles\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "entry data to send",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandles",
                  "description": "optional list of file handles that will be sent with the request",
                  "type": {
                    "name": "List\u003cLong\u003e",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Inbox handle"
                }
              ]
            },
            {
              "name": "prepareEntry",
              "description": "Prepares a request to send data to an Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public Long prepareEntry(\n\tString inboxId,\n\tbyte[] data,\n\tList\u003cLong\u003e inboxFileHandles,\n\tString userPrivKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "entry data to send",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandles",
                  "description": "optional list of file handles that will be sent with the request",
                  "type": {
                    "name": "List\u003cLong\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "userPrivKey",
                  "description": "optional sender\u0027s private key which can be used later to encrypt data for that sender",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "Long",
                    "optional": false
                  },
                  "description": "Inbox handle"
                }
              ]
            },
            {
              "name": "readEntry",
              "description": "Gets an entry from an Inbox.",
              "snippet": "public InboxEntry readEntry(\n\tString inboxEntryId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to read from the Inbox",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "InboxEntry",
                    "optional": false
                  },
                  "description": "Data of the selected entry stored in the Inbox"
                }
              ]
            },
            {
              "name": "readFromFile",
              "description": "Reads file data.",
              "snippet": "public byte[] readFromFile(\n\tlong fileHandle,\n\tlong length\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "size of data to read",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "File data chunk"
                }
              ]
            },
            {
              "name": "seekInFile",
              "description": "Moves file\u0027s read cursor.",
              "snippet": "public void seekInFile(\n\tlong fileHandle,\n\tlong position\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "fileHandle",
                  "description": "handle to the file",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "sets new cursor position",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "sendEntry",
              "description": "Sends data to an Inbox.\n You do not have to be logged in to call this function.",
              "snippet": "public void sendEntry(\n\tlong inboxHandle\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxHandle",
                  "description": "ID of the Inbox to which the request applies",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxEntryCreated",
                  "channel": "inbox/\u003cinboxId\u003e/entries",
                  "payload": {
                    "name": "InboxEntry",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "subscribeForEntryEvents",
              "description": "Subscribes for events in given Inbox.",
              "snippet": "public void subscribeForEntryEvents(\n\tString inboxId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to subscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "subscribeForInboxEvents",
              "description": "Subscribes for the Inbox module main events.",
              "snippet": "public void subscribeForInboxEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromEntryEvents",
              "description": "Unsubscribes from events in given Inbox.",
              "snippet": "public void unsubscribeFromEntryEvents(\n\tString inboxId\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to unsubscribe",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "unsubscribeFromInboxEvents",
              "description": "Subscribes for the Inbox module main events.",
              "snippet": "public void unsubscribeFromInboxEvents()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "updateInbox",
              "description": "Updates an existing Inbox.",
              "snippet": "public void updateInbox(\n\tString inboxId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tFilesConfig filesConfig,\n\tlong version,\n\tboolean force\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "vector of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "vector of UserWithPubKey structs which indicates who will have access (and have manage rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "struct to override default files configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Inbox",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxUpdated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateInbox",
              "description": "Updates an existing Inbox.",
              "snippet": "public void updateInbox(\n\tString inboxId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tFilesConfig filesConfig,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey structs which indicates who will have access (and management rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "overrides default file configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Inbox",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Inbox",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxUpdated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "updateInbox",
              "description": "Updates an existing Inbox.",
              "snippet": "public void updateInbox(\n\tString inboxId,\n\tList\u003cUserWithPubKey\u003e users,\n\tList\u003cUserWithPubKey\u003e managers,\n\tbyte[] publicMeta,\n\tbyte[] privateMeta,\n\tFilesConfig filesConfig,\n\tlong version,\n\tboolean force,\n\tboolean forceGenerateNewKey,\n\tContainerPolicyWithoutItem policies\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to update",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "list of UserWithPubKey structs which indicates who will have access to the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "list of UserWithPubKey structs which indicates who will have access (and management rights) to\n the created Inbox",
                  "type": {
                    "name": "List\u003cUserWithPubKey\u003e",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "public (unencrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "private (encrypted) metadata",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "overrides default file configuration",
                  "type": {
                    "name": "FilesConfig",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "current version of the updated Inbox",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "force update (without checking version)",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "force to regenerate a key for the Inbox",
                  "type": {
                    "name": "boolean",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "additional container access policies",
                  "type": {
                    "name": "ContainerPolicyWithoutItem",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": [
                {
                  "type": "inboxUpdated",
                  "channel": "inbox",
                  "payload": {
                    "name": "Inbox",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "writeToFile",
              "description": "Sends a file\u0027s data chunk to an Inbox.\n To send the entire file - divide it into pieces of the desired size and call the function for each fragment.\n You do not have to be logged in to call this function.",
              "snippet": "public void writeToFile(\n\tlong inboxHandle,\n\tlong inboxFileHandle,\n\tbyte[] dataChunk\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "inboxHandle",
                  "description": "handle to the prepared Inbox entry",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandle",
                  "description": "handle to the file where the uploaded chunk belongs",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "file chunk to send",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "thrown when method encounters an exception.",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when method encounters an unknown exception.",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "thrown when instance is closed.",
                  "type": {
                    "name": "IllegalStateException",
                    "optional": false
                  }
                }
              ],
              "events": []
            }
          ]
        }
      ]
    }
  ],
  "errors": [
    {
      "title": "NativeException",
      "content": [
        {
          "type": "class",
          "name": "NativeException",
          "generics": [],
          "description": "Thrown when a PrivMX Endpoint method encounters an unknown exception.",
          "fields": [],
          "methods": [
            {
              "name": "NativeException",
              "description": "Initialize exception with passed message.",
              "snippet": " void NativeException(\n\tString message\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "message",
                  "description": "information about the exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "events": []
            }
          ]
        }
      ]
    },
    {
      "title": "PrivmxException",
      "content": [
        {
          "type": "class",
          "name": "PrivmxException",
          "generics": [],
          "description": "Thrown when a PrivMX Endpoint method encounters an exception.",
          "fields": [
            {
              "name": "description",
              "description": "Detailed description of the exception.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String description"
            },
            {
              "name": "name",
              "description": "Native Exception name.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String name"
            },
            {
              "name": "scope",
              "description": "Scope of the exception.",
              "type": {
                "name": "String",
                "optional": false
              },
              "snippet": "public final String scope"
            }
          ],
          "methods": [
            {
              "name": "PrivmxException",
              "description": "Creates instance of `PrivmxException`.",
              "snippet": " void PrivmxException(\n\tString message,\n\tString scope,\n\tint code\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "message",
                  "description": "short information about exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "scope",
                  "description": "scope of this exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "code",
                  "description": "unique code of this exception",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "PrivmxException",
              "description": "Creates instance of `PrivmxException`.",
              "snippet": " void PrivmxException(\n\tString message,\n\tString description,\n\tString scope,\n\tint code\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "message",
                  "description": "short information about exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "description",
                  "description": "information about exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "scope",
                  "description": "scope of this exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "code",
                  "description": "unique code of this exception",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "PrivmxException",
              "description": "Creates instance of `PrivmxException`.",
              "snippet": " void PrivmxException(\n\tString message,\n\tString description,\n\tString scope,\n\tint code,\n\tString name\n)",
              "methodType": "constructor",
              "generic": [],
              "params": [
                {
                  "name": "message",
                  "description": "brief information about exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "description",
                  "description": "detailed information about exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "scope",
                  "description": "scope of this exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "code",
                  "description": "unique code of this exception",
                  "type": {
                    "name": "int",
                    "optional": false
                  }
                },
                {
                  "name": "name",
                  "description": "special name for this exception",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "events": []
            },
            {
              "name": "getCode",
              "description": "Returns exception code as `unsigned int` converted to `long`.",
              "snippet": "public long getCode()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Exception code"
                }
              ]
            },
            {
              "name": "getFull",
              "description": "Returns full information about exception.",
              "snippet": "public String getFull()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Full information about exception"
                }
              ]
            },
            {
              "name": "toString",
              "description": "Returns full information about the exception.\n \n See: #getFull.",
              "snippet": "public String toString()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Full information about exception"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "crypto": [
    {
      "title": "CryptoApi",
      "content": [
        {
          "type": "class",
          "name": "CryptoApi",
          "generics": [],
          "description": "Defines cryptographic methods.",
          "fields": [],
          "methods": [
            {
              "name": "CryptoApi",
              "description": "Create instance of `CryptoApi`.",
              "snippet": "public void CryptoApi()",
              "methodType": "constructor",
              "generic": [],
              "params": [],
              "events": []
            },
            {
              "name": "close",
              "snippet": "public void close()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "exceptions": [
                {
                  "code": 0,
                  "type": {
                    "name": "Exception",
                    "optional": false
                  }
                }
              ]
            },
            {
              "name": "convertPEMKeyToWIFKey",
              "description": "Converts given private key in PEM format to its WIF format.",
              "snippet": "public String convertPEMKeyToWIFKey(\n\tString pemKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "pemKey",
                  "description": "private key to convert",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Private key in WIF format"
                }
              ]
            },
            {
              "name": "decryptDataSymmetric",
              "description": "Decrypts buffer with a given key using AES.",
              "snippet": "public byte[] decryptDataSymmetric(\n\tbyte[] data,\n\tbyte[] symmetricKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "data",
                  "description": "buffer to decrypt",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "symmetricKey",
                  "description": "key used to decrypt data",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Plain (decrypted) data buffer"
                }
              ]
            },
            {
              "name": "derivePrivateKey",
              "description": "Generates a new private ECC key from a password using pbkdf2.",
              "snippet": "public String derivePrivateKey(\n\tString password,\n\tString salt\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "password",
                  "description": "the password used to generate the new key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "salt",
                  "description": "random string (additional input for the hashing function)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Generated ECC key in WIF format"
                }
              ]
            },
            {
              "name": "derivePrivateKey2",
              "description": "Generates a new private ECC key from a password using pbkdf2.\n This version of the derive function has a rounds count increased to 200k.\n This makes using this function a safer choice, but it makes the received key\n different than in the original version.",
              "snippet": "public String derivePrivateKey2(\n\tString password,\n\tString salt\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "password",
                  "description": "the password used to generate the new key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "name": "salt",
                  "description": "random string (additional input for the hashing function)",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "generated ECC key in WIF format"
                }
              ]
            },
            {
              "name": "derivePublicKey",
              "description": "Generates a new public ECC key as a pair for an existing private key.",
              "snippet": "public String derivePublicKey(\n\tString privateKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "privateKey",
                  "description": "private ECC key in WIF format",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Generated ECC key in BASE58DER format"
                }
              ]
            },
            {
              "name": "encryptDataSymmetric",
              "description": "Encrypts buffer with a given key using AES.",
              "snippet": "public byte[] encryptDataSymmetric(\n\tbyte[] data,\n\tbyte[] symmetricKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "data",
                  "description": "buffer to encrypt",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "symmetricKey",
                  "description": "key used to encrypt data",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Encrypted data buffer"
                }
              ]
            },
            {
              "name": "generateKeySymmetric",
              "description": "Generates a new symmetric key.",
              "snippet": "public byte[] generateKeySymmetric()",
              "methodType": "method",
              "generic": [],
              "params": [],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Generated key"
                }
              ]
            },
            {
              "name": "generatePrivateKey",
              "description": "Generates a new private ECC key.",
              "snippet": "public String generatePrivateKey(\n\tString randomSeed\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "randomSeed",
                  "description": "optional string used as the base to generate the new key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "String",
                    "optional": false
                  },
                  "description": "Generated ECC key in WIF format"
                }
              ]
            },
            {
              "name": "signData",
              "description": "Creates a signature of data using given key.",
              "snippet": "public byte[] signData(\n\tbyte[] data,\n\tString privateKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "data",
                  "description": "data the buffer to sign",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateKey",
                  "description": "the key used to sign data",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "exceptions": [
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "PrivmxException",
                    "optional": false
                  }
                },
                {
                  "code": 0,
                  "description": "",
                  "type": {
                    "name": "NativeException",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Signature of data"
                }
              ]
            },
            {
              "name": "verifySignature",
              "description": "Validate a signature of data using given key.",
              "snippet": "public boolean verifySignature(\n\tbyte[] data,\n\tbyte[] signature,\n\tString publicKey\n)",
              "methodType": "method",
              "generic": [],
              "params": [
                {
                  "name": "data",
                  "description": "buffer",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "signature",
                  "description": "of data",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "publicKey",
                  "description": "public ECC key in BASE58DER format used to validate data",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "events": [],
              "returns": [
                {
                  "type": {
                    "name": "boolean",
                    "optional": false
                  },
                  "description": "data validation result"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
