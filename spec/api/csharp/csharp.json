{
  "_meta": {
    "version": "2",
    "package": "privmx-endpoint-csharp",
    "lang": "csharp",
    "name": "PrivMX Endpoint C#"
  },
  "core": [
    {
      "title": "BackendRequester",
      "content": [
        {
          "type": "class",
          "name": "BackendRequester",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Create",
              "description": "Creates an instance of the BackendRequester. ",
              "snippet": "static BackendRequester Create()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "BackendRequester",
                    "optional": false
                  },
                  "description": "Created instance of the BackendRequester."
                }
              ]
            },
            {
              "type": "method",
              "name": "BackendRequest",
              "description": "Sends a request to PrivMX Bridge API using access token for authorization. ",
              "snippet": "string BackendRequest(\n    string serverUrl,\n    string accessToken,\n    string method,\n    string paramsAsJson\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "accessToken",
                  "description": "Token for authorization (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            },
            {
              "type": "method",
              "name": "BackendRequest",
              "description": "Sends request to PrivMX Bridge API. ",
              "snippet": "string BackendRequest(\n    string serverUrl,\n    string method,\n    string paramsAsJson\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            },
            {
              "type": "method",
              "name": "BackendRequest",
              "description": "Sends a request to PrivMX Bridge API using pair of API KEY ID and API KEY SECRET for authorization. ",
              "snippet": "string BackendRequest(\n    string serverUrl,\n    string apiKeyId,\n    string apiKeySecret,\n    long mode,\n    string method,\n    string paramsAsJson\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "serverUrl",
                  "description": "PrivMX Bridge server URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeyId",
                  "description": "API KEY ID (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "apiKeySecret",
                  "description": "API KEY SECRET (see PrivMX Bridge API for more details).",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "mode",
                  "description": "Allows you to set whether the request should be signed (mode = 1) or plain (mode = 0).",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "method",
                  "description": "API method to call.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "paramsAsJson",
                  "description": "API method\u0027s parameters in JSON format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "JSON string representing raw server response."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Config",
      "content": [
        {
          "type": "class",
          "name": "Config",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "SetCertsPath",
              "description": "Sets path to a file containing a bundle of CA certificates in PEM format. \n\nThis bundle is used by the library for TLS with HTTPS connections.",
              "snippet": "static void SetCertsPath(\n    string certsPath\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "certsPath",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Connection",
      "content": [
        {
          "type": "class",
          "name": "Connection",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Connect",
              "description": "Connects to the PrivMX Bridge server. ",
              "snippet": "static Connection Connect(\n    string userPrivKey,\n    string solutionId,\n    string bridgeUrl\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "userPrivKey",
                  "description": "User\u0027s private key.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "bridgeUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection."
                }
              ]
            },
            {
              "type": "method",
              "name": "ConnectPublic",
              "description": "Connects to the PrivMX Bridge server as a guest user. ",
              "snippet": "static Connection ConnectPublic(\n    string solutionId,\n    string bridgeUrl\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "solutionId",
                  "description": "ID of the Solution.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "bridgeUrl",
                  "description": "PrivMX Bridge URL.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Connection",
                    "optional": false
                  },
                  "description": "Created and connected instance of the Connection."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetConnectionId",
              "description": "Gets the ID of the current connection. ",
              "snippet": "long GetConnectionId()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "ID of the connection."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListContexts",
              "description": "Gets a list of Contexts available for the user. ",
              "snippet": "PagingList\u003CContext\u003E ListContexts(\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CContext\u003E",
                    "optional": false
                  },
                  "description": "List of contexts."
                }
              ]
            },
            {
              "type": "method",
              "name": "Disconnect",
              "description": "Disconnects from the PrivMX Bridge. ",
              "snippet": "void Disconnect()",
              "methodType": "method",
              "params": []
            }
          ]
        }
      ]
    },
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "ContainerPolicy",
          "description": "Represents a container and item policy. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class ContainerPolicy : ContainerPolicyWithoutItem\n{\n    ItemPolicy? Item {get; set;}\n}",
          "fields": [
            {
              "name": "Item",
              "description": "(optional) Item policy. ",
              "type": {
                "name": "ItemPolicy?",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ContainerPolicyWithoutItem",
          "description": "Represents a container policy. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class ContainerPolicyWithoutItem\n{\n    string? Get {get; set;}\n    string? Update {get; set;}\n    string? Delete_ {get; set;}\n    string? UpdatePolicy {get; set;}\n    string? UpdaterCanBeRemovedFromManagers {get; set;}\n    string? OwnerCanBeRemovedFromManagers {get; set;}\n}",
          "fields": [
            {
              "name": "Get",
              "description": "(optional) Determines who can get the container. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Update",
              "description": "(optional) Determines who can update the container. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Delete_",
              "description": "(optional) Determines who can delete the container. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "UpdatePolicy",
              "description": "(optional) Determines who can update this policy. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "UpdaterCanBeRemovedFromManagers",
              "description": "(optional) Determines whether the updater can be removed from the list of managers. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "OwnerCanBeRemovedFromManagers",
              "description": "(optional) Determines whether the owner can be removed from the list of managers. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Context",
          "description": "Represents the Context. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class Context\n{\n    string UserId {get; set;}\n    string ContextId {get; set;}\n}",
          "fields": [
            {
              "name": "UserId",
              "description": "ID of the current user in the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "ContextId",
              "description": "ID of the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Error",
          "description": "Represents exception data from the native library. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class Error\n{\n    long Code {get; set;}\n    string? Message {get; set;}\n    string? Name {get; set;}\n    string? Scope {get; set;}\n    string? Description {get; set;}\n    string? Full {get; set;}\n}",
          "fields": [
            {
              "name": "Code",
              "description": "ID of the native exception. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Message",
              "description": "Readable error message. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Name",
              "description": "Name of the native exception. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Scope",
              "description": "Source module. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Description",
              "description": "Addtional detailed description. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Full",
              "description": "Serialized exception data. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Event",
          "description": "Represents an event. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class Event\n{\n    string Type {get; set;}\n    string Channel {get; set;}\n    long ConnectionId {get; set;}\n}",
          "fields": [
            {
              "name": "Type",
              "description": "Type of event. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Channel",
              "description": "Additional identifier of the subscribed source module and resource. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "ConnectionId",
              "description": "ID of the connection emitting the event. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ItemPolicy",
          "description": "Represents an item policy. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class ItemPolicy\n{\n    string? Get {get; set;}\n    string? ListMy {get; set;}\n    string? ListAll {get; set;}\n    string? Create {get; set;}\n    string? Update {get; set;}\n    string? Delete_ {get; set;}\n}",
          "fields": [
            {
              "name": "Get",
              "description": "(optional) Determines who can get an item. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "ListMy",
              "description": "(optional) Determines who can list items created by me. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "ListAll",
              "description": "(optional) Determines who can list all items. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Create",
              "description": "(optional) Determines who can create an item. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Update",
              "description": "(optional) Determines who can update an item. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            },
            {
              "name": "Delete_",
              "description": "(optional) Determines who can delete an item. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "LibBreakEvent",
          "description": "Represents the event of type \u0022libBreak\u0022. \n\nThis event is emitted when EventQueue.EmitBreakEvent() method is called. It is useful for breaking an event processing loop. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class LibBreakEvent : Event\n{\n}",
          "fields": [],
          "methods": []
        },
        {
          "type": "type",
          "name": "LibConnectedEvent",
          "description": "Represents the event of type \u0022libConnected\u0022. \n\nThis event is emitted when connection is established with the Platform backend. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class LibConnectedEvent : Event\n{\n}",
          "fields": [],
          "methods": []
        },
        {
          "type": "type",
          "name": "LibDisconnectedEvent",
          "description": "Represents the event of type \u0022libDisconnected\u0022. \n\nThis event is emitted when connection with the Platform backend is broken or closed. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class LibDisconnectedEvent : Event\n{\n}",
          "fields": [],
          "methods": []
        },
        {
          "type": "type",
          "name": "LibPlatformDisconnectedEvent",
          "description": "Represents the event of type \u0022libPlatformDisconnected\u0022. \n\nThis event is emitted when Connection.Disconnect() method is called. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class LibPlatformDisconnectedEvent : Event\n{\n}",
          "fields": [],
          "methods": []
        },
        {
          "type": "type",
          "name": "PagingList",
          "description": "Represents a resulting list of items used in lists methods. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class PagingList\u003CT\u003E\n{\n    long TotalAvailable {get; set;}\n    List\u003CT\u003E ReadItems {get; set;}\n}",
          "fields": [
            {
              "name": "TotalAvailable",
              "description": "Total number of all items available to list. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "ReadItems",
              "description": "Resulting items listed according to the paging parameters passed to a method. ",
              "type": {
                "name": "List\u003CT\u003E",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "PagingQuery",
          "description": "Represents the paging parameters used in lists methods. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class PagingQuery\n{\n    long Skip {get; set;}\n    long Limit {get; set;}\n    string SortOrder {get; set;}\n    string? LastId {get; set;}\n}",
          "fields": [
            {
              "name": "Skip",
              "description": "Number of items to skip when listing. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Limit",
              "description": "Number of items to list. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "SortOrder",
              "description": "Sort order of items. \n\nAllowed values: \u0022asc\u0022 - ascending sort order, \u0022desc\u0022 - descending sort order. Currently, results list items are sorted by creation date. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastId",
              "description": "(optional) ID of the item from which to list subsequent items. \n\nIf this parameter is passed, the Skip parameter is not used and can be any number. ",
              "type": {
                "name": "string?",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "UserWithPubKey",
          "description": "Represents a user and its associated public key in a Context. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core.Models"
            }
          ],
          "snippet": "public class UserWithPubKey\n{\n    string UserId {get; set;}\n    string PubKey {get; set;}\n}",
          "fields": [
            {
              "name": "UserId",
              "description": "ID of the user in the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "PubKey",
              "description": "Public key associated with the user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        }
      ]
    },
    {
      "title": "EndpointException",
      "content": [
        {
          "type": "class",
          "name": "EndpointException",
          "description": "This exception is thrown when an error occurs in the C# wrapper. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "EndpointException",
              "description": "",
              "snippet": "EndpointException(\n    string message\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "message",
                  "description": "",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "EndpointNativeException",
      "content": [
        {
          "type": "class",
          "name": "EndpointNativeException",
          "description": "This exception is thrown when an error occurs in the native library. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [
            {
              "name": "Error",
              "description": "Error information consistent with error codes and error messages in the native library. ",
              "type": {
                "name": "Error",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "type": "method",
              "name": "EndpointNativeException",
              "description": "",
              "snippet": "EndpointNativeException(\n    Error error\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "error",
                  "description": "",
                  "type": {
                    "name": "Error",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "EventQueue",
      "content": [
        {
          "type": "class",
          "name": "EventQueue",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Core"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "GetInstance",
              "description": "Gets the event queue instance. ",
              "snippet": "static EventQueue GetInstance()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "EventQueue",
                    "optional": false
                  },
                  "description": "Event queue instance."
                }
              ]
            },
            {
              "type": "method",
              "name": "EmitBreakEvent",
              "description": "Puts the LibBreakEvent event into the event queue. \n\nThis method is useful for interrupting a blocking WaitEvent() call and breaking an event processing loop. ",
              "snippet": "void EmitBreakEvent()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "GetEvent",
              "description": "Gets a new event from the queue. ",
              "snippet": "Event? GetEvent()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "Event?",
                    "optional": false
                  },
                  "description": "A new event, or null if no events in the queue."
                }
              ]
            },
            {
              "type": "method",
              "name": "WaitEvent",
              "description": "Gets or waits for a new event from the queue. \n\nWaiting can be canceled by EmitBreakEvent().",
              "snippet": "Event WaitEvent()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "Event",
                    "optional": false
                  },
                  "description": "A new event."
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "threads": [
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "Message",
          "description": "Represents a message. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class Message\n{\n    ServerMessageInfo Info {get; set;}\n    byte[] PublicMeta {get; set;}\n    byte[] PrivateMeta {get; set;}\n    byte[] Data {get; set;}\n    string AuthorPubKey {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "Info",
              "description": "Server metadata. ",
              "type": {
                "name": "ServerMessageInfo",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Private metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "Data",
              "description": "Payload of the message. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "AuthorPubKey",
              "description": "Verified public key of the PublicMeta, PrivateMeta and Data author. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the message. \n\nIf value is equal 0, then the message is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerMessageInfo",
          "description": "Represents server metadata. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ServerMessageInfo\n{\n    string ThreadId {get; set;}\n    string MessageId {get; set;}\n    long CreateDate {get; set;}\n    string Author {get; set;}\n}",
          "fields": [
            {
              "name": "ThreadId",
              "description": "ID of the Thread. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "MessageId",
              "description": "ID of the message. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Author",
              "description": "ID of the creator user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Thread",
          "description": "Represents the Thread. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class Thread\n{\n    string ContextId {get; set;}\n    string ThreadId {get; set;}\n    long CreateDate {get; set;}\n    string Creator {get; set;}\n    long LastModificationDate {get; set;}\n    string LastModifier {get; set;}\n    List\u003Cstring\u003E Users {get; set;}\n    List\u003Cstring\u003E Managers {get; set;}\n    long Version {get; set;}\n    long LastMsgDate {get; set;}\n    byte[] PublicMeta {get; set;}\n    byte[] PrivateMeta {get; set;}\n    ContainerPolicy Policy {get; set;}\n    long MessagesCount {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "ContextId",
              "description": "ID of the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "ThreadId",
              "description": "ID of the Thread. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Creator",
              "description": "ID of the creator user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastModificationDate",
              "description": "Last modification timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "LastModifier",
              "description": "ID of the user who was last a modifier. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Users",
              "description": "List of user IDs that have access to the Thread. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Managers",
              "description": "List of user IDs that have management rights to the Thread. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Version",
              "description": "Number of the Thread updates. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "LastMsgDate",
              "description": "Timestamp of the last message in the Thread, or the Thread creation timestamp if no messages in. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Private metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "Policy",
              "description": "Thread\u0027s policy. ",
              "type": {
                "name": "ContainerPolicy",
                "optional": false
              }
            },
            {
              "name": "MessagesCount",
              "description": "Total number of messages in the Thread. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the Thread. \n\nIf value is equal 0, then the Thread is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadCreatedEvent",
          "description": "Represents the event of type \u0022threadCreated\u0022. \n\nThis event is emitted when Thread events are subscribed and a new Thread is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadCreatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Thread Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created Thread. ",
              "type": {
                "name": "Thread",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEvent",
          "description": "Represents the event of type \u0022threadDeleted\u0022. \n\nThis event is emitted when Thread events are subscribed and a Thread is deleted. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    ThreadDeletedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Deleted Thread metadata. ",
              "type": {
                "name": "ThreadDeletedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedEventData",
          "description": "Represents payload of the ThreadDeletedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadDeletedEventData\n{\n    string ThreadId {get; set;}\n}",
          "fields": [
            {
              "name": "ThreadId",
              "description": "ID of the deleted Thread. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadDeletedMessageEventData",
          "description": "Represents payload of the ThreadDeletedMessageEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadDeletedMessageEventData\n{\n    string ThreadId {get; set;}\n    string MessageId {get; set;}\n}",
          "fields": [
            {
              "name": "ThreadId",
              "description": "ID of the Thread that the message is deleted from. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "MessageId",
              "description": "ID of the deleted message. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadMessageDeletedEvent",
          "description": "Represents the event of type \u0022threadMessageDeleted\u0022. \n\nThis event is emitted when message events are subscribed and a new message is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadMessageDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    ThreadDeletedMessageEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Deleted message metadata. ",
              "type": {
                "name": "ThreadDeletedMessageEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadMessageUpdatedEvent",
          "description": "Represents the event of type \u0022threadMessageUpdated\u0022. \n\nThis event is emitted when message events are subscribed and a message is updated. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadMessageUpdatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Message Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Updated message. ",
              "type": {
                "name": "Message",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadNewMessageEvent",
          "description": "Represents the event of type \u0022threadNewMessage\u0022. \n\nThis event is emitted when message events are subscribed and a new message is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadNewMessageEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Message Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created message. ",
              "type": {
                "name": "Message",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsChangedEvent",
          "description": "Represents the event of type \u0022threadStatsChanged\u0022. \n\nThis event is emitted when Thread events are subscribed and statistics of a Thread is changed. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadStatsChangedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    ThreadStatsEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Thread statistics. ",
              "type": {
                "name": "ThreadStatsEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadStatsEventData",
          "description": "Represent statistics of a Thread. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadStatsEventData\n{\n    string ThreadId {get; set;}\n    long LastMsgDate {get; set;}\n    long MessagesCount {get; set;}\n}",
          "fields": [
            {
              "name": "ThreadId",
              "description": "ID of the Thread. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastMsgDate",
              "description": "Last message timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "MessagesCount",
              "description": "Total number of messages in the Thread. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ThreadUpdatedEvent",
          "description": "Represents the event of type \u0022threadUpdated\u0022. \n\nThis event is emitted when Thread events are subscribed and a Thread is updated. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread.Models"
            }
          ],
          "snippet": "public class ThreadUpdatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Thread Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Updated Thread. ",
              "type": {
                "name": "Thread",
                "optional": false
              }
            }
          ]
        }
      ]
    },
    {
      "title": "ThreadApi",
      "content": [
        {
          "type": "class",
          "name": "ThreadApi",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Thread"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Create",
              "description": "Creates an instance of the ThreadApi. ",
              "snippet": "static ThreadApi Create(\n    Connection connection\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "Instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "ThreadApi",
                    "optional": false
                  },
                  "description": "Created instance of the ThreadApi."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateThread",
              "description": "Creates new Thread in given Context. ",
              "snippet": "string CreateThread(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Thread in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey which indicates who will have access to the created Thread.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey which indicates who will have access (and management rights) to the created Thread.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Thread policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "ID of the created Thread."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateThread",
              "description": "Updates an existing Thread. ",
              "snippet": "void UpdateThread(\n    string threadId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Thread.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Thread.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update (without checking version).",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to regenerate a key for the Thread.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Thread policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteThread",
              "description": "Deletes a Thread by given Thread ID. ",
              "snippet": "void DeleteThread(\n    string threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "GetThread",
              "description": "Gets a Thread by given Thread ID. ",
              "snippet": "Models.Thread GetThread(\n    string threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of Thread to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Models.Thread",
                    "optional": false
                  },
                  "description": "Information about about the Thread."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListThreads",
              "description": "Gets a list of Threads in given Context. ",
              "snippet": "PagingList\u003CModels.Thread\u003E ListThreads(\n    string contextId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Threads from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CModels.Thread\u003E",
                    "optional": false
                  },
                  "description": "List of Threads."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetMessage",
              "description": "Gets a message by given message ID. ",
              "snippet": "Message GetMessage(\n    string messageId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Message",
                    "optional": false
                  },
                  "description": "Message."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListMessages",
              "description": "Gets a list of messages from a Thread. ",
              "snippet": "PagingList\u003CMessage\u003E ListMessages(\n    string threadId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to list messages from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CMessage\u003E",
                    "optional": false
                  },
                  "description": "List of messages."
                }
              ]
            },
            {
              "type": "method",
              "name": "SendMessage",
              "description": "Sends a message in a Thread. ",
              "snippet": "string SendMessage(\n    string threadId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to send message to.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "Content of the message.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "ID of the new message."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateMessage",
              "description": "Updates a message in a Thread. ",
              "snippet": "void UpdateMessage(\n    string messageId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    byte[] data\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private message metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "Content of the message.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteMessage",
              "description": "Deletes a message by given message ID. ",
              "snippet": "void DeleteMessage(\n    string messageId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "messageId",
                  "description": "ID of the message to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForThreadEvents",
              "description": "Subscribes for the Thread module main events. ",
              "snippet": "void SubscribeForThreadEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "UnsubscribeFromThreadEvents",
              "description": "Unsubscribes from the Thread module main events. ",
              "snippet": "void UnsubscribeFromThreadEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "SubscribeForMessageEvents",
              "description": "Subscribes for the events in given Thread. ",
              "snippet": "void SubscribeForMessageEvents(\n    string threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to subscribe for.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromMessageEvents",
              "description": "Unsubscribes from events in given Thread. ",
              "snippet": "void UnsubscribeFromMessageEvents(\n    string threadId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "threadId",
                  "description": "ID of the Thread to unsubscribe from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "stores": [
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "File",
          "description": "Represents a file. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class File\n{\n    ServerFileInfo Info {get; set;}\n    byte[] PublicMeta {get; set;}\n    byte[] PrivateMeta {get; set;}\n    long Size {get; set;}\n    string AuthorPubKey {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "Info",
              "description": "Server metadata. ",
              "type": {
                "name": "ServerFileInfo",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Private metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "Size",
              "description": "Size of the file. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "AuthorPubKey",
              "description": "Verified public key of the PublicMeta, PrivateMeta and Data author. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the message. \n\nIf value is equal 0, then the message is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "ServerFileInfo",
          "description": "Represents server metadata. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class ServerFileInfo\n{\n    string StoreId {get; set;}\n    string FileId {get; set;}\n    long CreateDate {get; set;}\n    string Author {get; set;}\n}",
          "fields": [
            {
              "name": "StoreId",
              "description": "ID of the Store. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "FileId",
              "description": "ID of the file. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Author",
              "description": "ID of the creator user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Store",
          "description": "Represents the Store. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class Store\n{\n    string ContextId {get; set;}\n    string StoreId {get; set;}\n    long CreateDate {get; set;}\n    string Creator {get; set;}\n    long LastModificationDate {get; set;}\n    string LastModifier {get; set;}\n    List\u003Cstring\u003E Users {get; set;}\n    List\u003Cstring\u003E Managers {get; set;}\n    long Version {get; set;}\n    long LastFileDate {get; set;}\n    byte[] PublicMeta {get; set;}\n    byte[] PrivateMeta {get; set;}\n    ContainerPolicy Policy {get; set;}\n    long FilesCount {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "ContextId",
              "description": "ID of the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "StoreId",
              "description": "ID of the Store. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Creator",
              "description": "ID of the creator user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastModificationDate",
              "description": "Last modification timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "LastModifier",
              "description": "ID of the user who was last a modifier. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Users",
              "description": "List of user IDs that have access to the Store. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Managers",
              "description": "List of user IDs that have management rights to the Store. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Version",
              "description": "Number of the Store updates. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "LastFileDate",
              "description": "Timestamp of the last file in the Store, or the Store creation timestamp if no files in. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Private metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "Policy",
              "description": "Store\u0027s policy. ",
              "type": {
                "name": "ContainerPolicy",
                "optional": false
              }
            },
            {
              "name": "FilesCount",
              "description": "Number of files in the Store. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the Thread. \n\nIf value is equal 0, then the Thread is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreCreatedEvent",
          "description": "Represents the event of type \u0022storeCreated\u0022. \n\nThis event is emitted when Store events are subscribed and a Store is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreCreatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Store Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created Store. ",
              "type": {
                "name": "Store",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEvent",
          "description": "Represents the event of type \u0022storeDeleted\u0022. \n\nThis event is emitted when Store events are subscribed and a Store is deleted. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    StoreDeletedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Metadata of the deleted Store. ",
              "type": {
                "name": "StoreDeletedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreDeletedEventData",
          "description": "Represents payload of the StoreDeletedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreDeletedEventData\n{\n    string StoreId {get; set;}\n}",
          "fields": [
            {
              "name": "StoreId",
              "description": "ID of the deleted Store. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileCreatedEvent",
          "description": "Represents the event of type \u0022storeFileCreated\u0022. \n\nThis event is emitted when file events are subscribed and a new file is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreFileCreatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    File Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created file. ",
              "type": {
                "name": "File",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEvent",
          "description": "Represents the event of type \u0022storeFileDeleted\u0022. \n\nThis event is emitted when file events are subscribed and a file is deleted. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreFileDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    StoreFileDeletedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Metadata of the deleted file. ",
              "type": {
                "name": "StoreFileDeletedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileDeletedEventData",
          "description": "Represents payload of the StoreFileDeletedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreFileDeletedEventData\n{\n    string ContextId {get; set;}\n    string StoreId {get; set;}\n    string FileId {get; set;}\n}",
          "fields": [
            {
              "name": "ContextId",
              "description": "ID of the Context to which the Store belongs. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "StoreId",
              "description": "ID of the Store that the file is deleted from. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "FileId",
              "description": "ID of the deleted file. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreFileUpdatedEvent",
          "description": "Represents the event of type \u0022storeFileUpdated\u0022. \n\nThis event is emitted when file events are subscribed and a file is updated. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreFileUpdatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    File Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Updated file. ",
              "type": {
                "name": "File",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEvent",
          "description": "Represents the event of type \u0022storeStatsChanged\u0022. \n\nThis event is emitted when Store events are subscribed and statistics of a Store is changed. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreStatsChangedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    StoreStatsChangedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Store statistics. ",
              "type": {
                "name": "StoreStatsChangedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreStatsChangedEventData",
          "description": "Represents payload of the StoreStatsChangedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreStatsChangedEventData\n{\n    string ContextId {get; set;}\n    string StoreId {get; set;}\n    long LastFileDate {get; set;}\n    long FilesCount {get; set;}\n}",
          "fields": [
            {
              "name": "ContextId",
              "description": "ID of the Context to which the Store belongs. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "StoreId",
              "description": "ID of the Store. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastFileDate",
              "description": "List file timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "FilesCount",
              "description": "Total number of files in the Store. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "StoreUpdatedEvent",
          "description": "Represents the event of type \u0022storeUpdated\u0022. \n\nThis event is emitted when Store events are subscribed and a Store is updated. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store.Models"
            }
          ],
          "snippet": "public class StoreUpdatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Store Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Updated Store. ",
              "type": {
                "name": "Store",
                "optional": false
              }
            }
          ]
        }
      ]
    },
    {
      "title": "StoreApi",
      "content": [
        {
          "type": "class",
          "name": "StoreApi",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Store"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Create",
              "description": "Creates an instance of the StoreApi. ",
              "snippet": "static StoreApi Create(\n    Connection connection\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "Instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "StoreApi",
                    "optional": false
                  },
                  "description": "Created instance of the StoreApi."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateStore",
              "description": "Creates a new Store in given Context. ",
              "snippet": "string CreateStore(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    ContainerPolicy? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to create the Store in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Store policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Created Store ID."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateStore",
              "description": "Updates an existing Store. ",
              "snippet": "void UpdateStore(\n    string storeId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicy? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Array of UserWithPubKey structs which indicates who will have access to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Store.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update (without checking version).",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to renenerate a key for the Store.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Store policy.",
                  "type": {
                    "name": "ContainerPolicy?",
                    "optional": true
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteStore",
              "description": "Deletes a Store by given Store ID. ",
              "snippet": "void DeleteStore(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "GetStore",
              "description": "Gets a single Store by given Store ID. ",
              "snippet": "Models.Store GetStore(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Models.Store",
                    "optional": false
                  },
                  "description": "Information about about the Store."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListStores",
              "description": "Gets a list of Stores in given Context. ",
              "snippet": "PagingList\u003CModels.Store\u003E ListStores(\n    string contextId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get the Stores from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CModels.Store\u003E",
                    "optional": false
                  },
                  "description": "List of Stores."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateFile",
              "description": "Creates a new file in a Store. ",
              "snippet": "long CreateFile(\n    string storeId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long size\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to create the file in.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "Size of the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Handle to write data."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateFile",
              "description": "Updates an existing file in a Store. ",
              "snippet": "long UpdateFile(\n    string fileId,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long size\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "size",
                  "description": "Size of the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Handle to write file data."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateFileMeta",
              "description": "Updates meta data of an existing file in a Store. ",
              "snippet": "void UpdateFileMeta(\n    string fileId,\n    byte[] publicMeta,\n    byte[] privateMeta\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file meta_data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "WriteToFile",
              "description": "Writes a file data. ",
              "snippet": "void WriteToFile(\n    long fileHandle,\n    byte[] dataChunk\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "File data chunk.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteFile",
              "description": "Deletes a file by given ID. ",
              "snippet": "void DeleteFile(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the file to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "GetFile",
              "description": "Gets a single file by the given file ID. ",
              "snippet": "File GetFile(\n    string fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "File",
                    "optional": false
                  },
                  "description": "Information about the file."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListFiles",
              "description": "Gets a list of files in given Store. ",
              "snippet": "PagingList\u003CFile\u003E ListFiles(\n    string storeId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to get files from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CFile\u003E",
                    "optional": false
                  },
                  "description": "List of files."
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFile",
              "description": "Opens a file to read. ",
              "snippet": "long OpenFile(\n    string fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Handle to read file data."
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadFromFile",
              "description": "Reads file data. ",
              "snippet": "byte[] ReadFromFile(\n    long fileHandle,\n    long length\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "Size of data to read.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "File data chunk."
                }
              ]
            },
            {
              "type": "method",
              "name": "SeekInFile",
              "description": "Moves read cursor. ",
              "snippet": "void SeekInFile(\n    long fileHandle,\n    long position\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "New cursor position.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "CloseFile",
              "description": "Closes the file handle. ",
              "snippet": "string CloseFile(\n    long fileHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to read/write file data.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "ID of closed file."
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForStoreEvents",
              "description": "Subscribes for the Store module main events. ",
              "snippet": "void SubscribeForStoreEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "UnsubscribeFromStoreEvents",
              "description": "Unsubscribes from the Store module main events. ",
              "snippet": "void UnsubscribeFromStoreEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "SubscribeForFileEvents",
              "description": "Subscribes for the events in given Store. ",
              "snippet": "void SubscribeForFileEvents(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to subscribe for.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromFileEvents",
              "description": "Unsubscribes from the events in given Store. ",
              "snippet": "void UnsubscribeFromFileEvents(\n    string storeId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "storeId",
                  "description": "ID of the Store to unsubscribe from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "inboxes": [
    {
      "title": "Models",
      "content": [
        {
          "type": "type",
          "name": "FilesConfig",
          "description": "Represents the file configuration for creating a new entry in the Inbox. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class FilesConfig\n{\n    long MinCount {get; set;}\n    long MaxCount {get; set;}\n    long MaxFileSize {get; set;}\n    long MaxWholeUploadSize {get; set;}\n}",
          "fields": [
            {
              "name": "MinCount",
              "description": "Minimal number of files to create a new entry. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "MaxCount",
              "description": "Maximum number of files to create a new entry. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "MaxFileSize",
              "description": "Maximum file size to create file in a new entry. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "MaxWholeUploadSize",
              "description": "Maximum total size of files to create a new entry. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "Inbox",
          "description": "Represents an Inbox. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class Inbox\n{\n    string InboxId {get; set;}\n    string ContextId {get; set;}\n    long CreateDate {get; set;}\n    string Creator {get; set;}\n    long LastModificationDate {get; set;}\n    string LastModifier {get; set;}\n    List\u003Cstring\u003E Users {get; set;}\n    List\u003Cstring\u003E Managers {get; set;}\n    long Version {get; set;}\n    byte[] PublicMeta {get; set;}\n    byte[] PrivateMeta {get; set;}\n    FilesConfig? FilesConfig {get; set;}\n    ContainerPolicyWithoutItem Policy {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "InboxId",
              "description": "ID of the Inbox. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "ContextId",
              "description": "ID og the Context. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "Creator",
              "description": "ID of the creator user. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "LastModificationDate",
              "description": "Last modification timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "LastModifier",
              "description": "ID of the user who was last a modifier. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Users",
              "description": "List of user IDs that have access to the Inbox. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Managers",
              "description": "List of user IDs that have management rights to the Inbox. ",
              "type": {
                "name": "List\u003Cstring\u003E",
                "optional": false
              }
            },
            {
              "name": "Version",
              "description": "Number of the Inbox updates. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "PrivateMeta",
              "description": "Private metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "FilesConfig",
              "description": "(optional) Files configuration for the Inbox. ",
              "type": {
                "name": "FilesConfig?",
                "optional": false
              }
            },
            {
              "name": "Policy",
              "description": "Inbox policy. ",
              "type": {
                "name": "ContainerPolicyWithoutItem",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the Thread. \n\nIf value is equal 0, then the Thread is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxCreatedEvent",
          "description": "Represents the event of type \u0022inboxCreated\u0022. \n\nThis event is emitted when Inbox events are subscribed and a new Inbox is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxCreatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Inbox Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created Inbox. ",
              "type": {
                "name": "Inbox",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEvent",
          "description": "Represents the event of type \u0022inboxDeleted\u0022. \n\nThis event is emitted when Inbox events are subscribed and a Inbox is deleted. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    InboxDeletedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Metadata of the deleted Inbox. ",
              "type": {
                "name": "InboxDeletedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxDeletedEventData",
          "description": "Represents payload of the InboxDeletedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxDeletedEventData\n{\n    string InboxId {get; set;}\n}",
          "fields": [
            {
              "name": "InboxId",
              "description": "ID of the deleted Inbox. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntry",
          "description": "Reprezents an entry in the Inbox. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxEntry\n{\n    string EntryId {get; set;}\n    string InboxId {get; set;}\n    byte[] Data {get; set;}\n    List\u003CFile\u003E Files {get; set;}\n    string AuthorPubKey {get; set;}\n    long CreateDate {get; set;}\n    long StatusCode {get; set;}\n}",
          "fields": [
            {
              "name": "EntryId",
              "description": "ID of the entry in the Inbox. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "InboxId",
              "description": "ID of the Inbox. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Data",
              "description": "Payload of the entry. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            },
            {
              "name": "Files",
              "description": "List of files in the entry. ",
              "type": {
                "name": "List\u003CFile\u003E",
                "optional": false
              }
            },
            {
              "name": "AuthorPubKey",
              "description": "Verified public key of the Data author. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "CreateDate",
              "description": "Server creation timestamp. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "StatusCode",
              "description": "Status code of decryption and verification of the message. \n\nIf value is equal 0, then the message is successfully decrypted and verified. Otherwise, status code is compatible with codes of exceptions. ",
              "type": {
                "name": "long",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryCreatedEvent",
          "description": "Represents the event of type \u0022inboxEntryCreated\u0022. \n\nThis event is emitted when Inbox entry events are subscribed and a new entry is created. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxEntryCreatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    InboxEntry Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Created Inbox entry. ",
              "type": {
                "name": "InboxEntry",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEvent",
          "description": "Represents the event of type \u0022inboxEntryDeleted\u0022. \n\nThis event is emitted when Inbox entry events are subscribed and an entry is deleted. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxEntryDeletedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    InboxEntryDeletedEventData Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Metadata of the deleted entry. ",
              "type": {
                "name": "InboxEntryDeletedEventData",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxEntryDeletedEventData",
          "description": "Represents payload of the InboxEntryDeletedEvent. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxEntryDeletedEventData\n{\n    string InboxId {get; set;}\n    string EntryId {get; set;}\n}",
          "fields": [
            {
              "name": "InboxId",
              "description": "ID of the Inbox that the entry is deleted from. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "EntryId",
              "description": "ID of the deleted Inbox entry. ",
              "type": {
                "name": "string",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxPublicView",
          "description": "Represents public data of a Inbox. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxPublicView\n{\n    string InboxId {get; set;}\n    long Version {get; set;}\n    byte[] PublicMeta {get; set;}\n}",
          "fields": [
            {
              "name": "InboxId",
              "description": "ID of the Inbox. ",
              "type": {
                "name": "string",
                "optional": false
              }
            },
            {
              "name": "Version",
              "description": "Number of the Inbox updates. ",
              "type": {
                "name": "long",
                "optional": false
              }
            },
            {
              "name": "PublicMeta",
              "description": "Public metadata. ",
              "type": {
                "name": "byte[]",
                "optional": false
              }
            }
          ]
        },
        {
          "type": "type",
          "name": "InboxUpdatedEvent",
          "description": "Represents the event of type \u0022inboxUpdated\u0022. \n\nThis event is emitted when Inbox events are subscribed and a Inbox is updated. ",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox.Models"
            }
          ],
          "snippet": "public class InboxUpdatedEvent : PrivMX.Endpoint.Core.Models.Event\n{\n    Inbox Data {get; set;}\n}",
          "fields": [
            {
              "name": "Data",
              "description": "Updated Inbox. ",
              "type": {
                "name": "Inbox",
                "optional": false
              }
            }
          ]
        }
      ]
    },
    {
      "title": "InboxApi",
      "content": [
        {
          "type": "class",
          "name": "InboxApi",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Inbox"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Create",
              "description": "Creates an instance of the InboxApi. ",
              "snippet": "static InboxApi Create(\n    Connection connection,\n    ThreadApi threadApi,\n    StoreApi storeApi\n)",
              "methodType": "static",
              "params": [
                {
                  "name": "connection",
                  "description": "Instance of Connection",
                  "type": {
                    "name": "Connection",
                    "optional": false
                  }
                },
                {
                  "name": "threadApi",
                  "description": "Instance of ThreadApi",
                  "type": {
                    "name": "ThreadApi",
                    "optional": false
                  }
                },
                {
                  "name": "storeApi",
                  "description": "Instance of StoreApi",
                  "type": {
                    "name": "StoreApi",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxApi",
                    "optional": false
                  },
                  "description": "Created instance of the InboxApi."
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateInbox",
              "description": "Creates a new Inbox. ",
              "snippet": "string CreateInbox(\n    string contextId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig? filesConfig,\n    ContainerPolicyWithoutItem? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context of the new Inbox.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Vector of UserWithPubKey structs which indicates who will have access to the created Inbox.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "(optional) Configuration of files.",
                  "type": {
                    "name": "FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Inbox policy.",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "ID of the created Inbox."
                }
              ]
            },
            {
              "type": "method",
              "name": "UpdateInbox",
              "description": "Updates an existing Inbox. ",
              "snippet": "void UpdateInbox(\n    string inboxId,\n    List\u003CUserWithPubKey\u003E users,\n    List\u003CUserWithPubKey\u003E managers,\n    byte[] publicMeta,\n    byte[] privateMeta,\n    FilesConfig? filesConfig,\n    long version,\n    bool force,\n    bool forceGenerateNewKey,\n    ContainerPolicyWithoutItem? policies = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to update.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "users",
                  "description": "Vector of UserWithPubKey structs which indicates who will have access to the created Inbox.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "managers",
                  "description": "Vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox.",
                  "type": {
                    "name": "List\u003CUserWithPubKey\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "publicMeta",
                  "description": "Public metadata that will remain unencrypted on the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private metadata that will be encrypted before being sent to the Bridge.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "filesConfig",
                  "description": "(optional) Configuration of files.",
                  "type": {
                    "name": "FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "name": "version",
                  "description": "Current version of the updated Inbox.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "force",
                  "description": "Force update without checking version.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "forceGenerateNewKey",
                  "description": "Force to regenerate a key for the Inbox.",
                  "type": {
                    "name": "bool",
                    "optional": false
                  }
                },
                {
                  "name": "policies",
                  "description": "(optional) Inbox policy.",
                  "type": {
                    "name": "ContainerPolicyWithoutItem?",
                    "optional": true
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInbox",
              "description": "Gets a Inbox by given Inbox ID. ",
              "snippet": "Models.Inbox GetInbox(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "Models.Inbox",
                    "optional": false
                  },
                  "description": "Information about about the Inbox."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListInboxes",
              "description": "Gets s list of Inboxes in given Context. ",
              "snippet": "PagingList\u003CModels.Inbox\u003E ListInboxes(\n    string contextId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "contextId",
                  "description": "ID of the Context to get Inboxes from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CModels.Inbox\u003E",
                    "optional": false
                  },
                  "description": "List of Inboxes."
                }
              ]
            },
            {
              "type": "method",
              "name": "GetInboxPublicView",
              "description": "Gets public data of an Inbox. You do not have to be logged in to call this function. ",
              "snippet": "InboxPublicView GetInboxPublicView(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to get.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxPublicView",
                    "optional": false
                  },
                  "description": "Public accessible information about the Inbox."
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteInbox",
              "description": "Deletes an Inbox by given Inbox ID. ",
              "snippet": "void DeleteInbox(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "PrepareEntry",
              "description": "Prepares a request to send data to an Inbox. \n\nYou do not have to be logged in to call this function.",
              "snippet": "long PrepareEntry(\n    string inboxId,\n    byte[] data,\n    List\u003Clong\u003E inboxFileHandles,\n    string? userPrivKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox to which the request applies.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "data",
                  "description": "Entry data to send.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandles",
                  "description": "List of file handles that will be sent with the request.",
                  "type": {
                    "name": "List\u003Clong\u003E",
                    "optional": false
                  }
                },
                {
                  "name": "userPrivKey",
                  "description": "(optional) Sender\u0027s private key which can be used later to encrypt data for that sender.",
                  "type": {
                    "name": "string?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Inbox handle."
                }
              ]
            },
            {
              "type": "method",
              "name": "SendEntry",
              "description": "Sends data to an Inbox. \n\nYou do not have to be logged in to call this function.",
              "snippet": "void SendEntry(\n    long inboxHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxHandle",
                  "description": "ID of the Inbox to which the request applies.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadEntry",
              "description": "Gets an entry from an Inbox. ",
              "snippet": "InboxEntry ReadEntry(\n    string inboxEntryId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to read from the Inbox.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "InboxEntry",
                    "optional": false
                  },
                  "description": "Data of the entry stored in the Inbox."
                }
              ]
            },
            {
              "type": "method",
              "name": "ListEntries",
              "description": "Gets list of entries in given Inbox. ",
              "snippet": "PagingList\u003CInboxEntry\u003E ListEntries(\n    string inboxId,\n    PagingQuery pagingQuery\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "pagingQuery",
                  "description": "List query parameters.",
                  "type": {
                    "name": "PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "PagingList\u003CInboxEntry\u003E",
                    "optional": false
                  },
                  "description": "List of entries."
                }
              ]
            },
            {
              "type": "method",
              "name": "DeleteEntry",
              "description": "Delete an entry from an Inbox. ",
              "snippet": "void DeleteEntry(\n    string inboxEntryId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxEntryId",
                  "description": "ID of an entry to delete.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "CreateFileHandle",
              "description": "Creates a file handle to send a file to an Inbox. ",
              "snippet": "long CreateFileHandle(\n    byte[] publicMeta,\n    byte[] privateMeta,\n    long fileSize\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "publicMeta",
                  "description": "Public file metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateMeta",
                  "description": "Private file metadata.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "fileSize",
                  "description": "Size of the file to send.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "File handle."
                }
              ]
            },
            {
              "type": "method",
              "name": "WriteToFile",
              "description": "Sends a file\u0027s data chunk to an Inbox. \n\nTo send the entire file - divide it into pieces of the desired size and call the function for each fragment.\n\nYou do not have to be logged in to call this function.",
              "snippet": "void WriteToFile(\n    long inboxHandle,\n    long inboxFileHandle,\n    byte[] dataChunk\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxHandle",
                  "description": "ID of the Inbox to which the request applies.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "inboxFileHandle",
                  "description": "Handle to the file which the uploaded chunk belongs.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "dataChunk",
                  "description": "File chunk to send.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "OpenFile",
              "description": "Opens a file to read. ",
              "snippet": "long OpenFile(\n    string fileId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileId",
                  "description": "ID of the file to read.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "long",
                    "optional": false
                  },
                  "description": "Handle to read file data."
                }
              ]
            },
            {
              "type": "method",
              "name": "ReadFromFile",
              "description": "Reads file data. ",
              "snippet": "byte[] ReadFromFile(\n    long fileHandle,\n    long length\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to the open file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "length",
                  "description": "Size of data chunk to read.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "File data chunk which size is equal to length, or smaller size when is end of file."
                }
              ]
            },
            {
              "type": "method",
              "name": "SeekInFile",
              "description": "Moves file\u0027s read cursor. ",
              "snippet": "void SeekInFile(\n    long fileHandle,\n    long position\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                },
                {
                  "name": "position",
                  "description": "New position of the cursor.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "CloseFile",
              "description": "Closes a file by given handle. ",
              "snippet": "string CloseFile(\n    long fileHandle\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "fileHandle",
                  "description": "Handle to the file.",
                  "type": {
                    "name": "long",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "ID of closed file."
                }
              ]
            },
            {
              "type": "method",
              "name": "SubscribeForInboxEvents",
              "description": "Subscribes for the Inbox module main events. ",
              "snippet": "void SubscribeForInboxEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "UnsubscribeFromInboxEvents",
              "description": "Unsubscribes from the Inbox module main events. ",
              "snippet": "void UnsubscribeFromInboxEvents()",
              "methodType": "method",
              "params": []
            },
            {
              "type": "method",
              "name": "SubscribeForEntryEvents",
              "description": "Subscribes for events in given Inbox. ",
              "snippet": "void SubscribeForEntryEvents(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            },
            {
              "type": "method",
              "name": "UnsubscribeFromEntryEvents",
              "description": "Unsubscribes from events in given Inbox. ",
              "snippet": "void UnsubscribeFromEntryEvents(\n    string inboxId\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "inboxId",
                  "description": "ID of the Inbox.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "crypto": [
    {
      "title": "CryptoApi",
      "content": [
        {
          "type": "class",
          "name": "CryptoApi",
          "description": "",
          "tags": [
            {
              "name": "namespace",
              "value": "PrivMX.Endpoint.Crypto"
            }
          ],
          "fields": [],
          "methods": [
            {
              "type": "method",
              "name": "Create",
              "description": "Creates an instance of the CryptoApi. ",
              "snippet": "static CryptoApi Create()",
              "methodType": "static",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "CryptoApi",
                    "optional": false
                  },
                  "description": "Created instance of the CryptoApi."
                }
              ]
            },
            {
              "type": "method",
              "name": "SignData",
              "description": "Creates a signature of data using given key. ",
              "snippet": "byte[] SignData(\n    byte[] data,\n    string privateKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "description": "Data to sign.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "privateKey",
                  "description": "The private key used to sign data.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Signature of data."
                }
              ]
            },
            {
              "type": "method",
              "name": "VerifySignature",
              "description": "Verifies a signature of data using given key. ",
              "snippet": "bool VerifySignature(\n    byte[] data,\n    byte[] signature,\n    string publicKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "description": "Signed data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "signature",
                  "description": "Signature of data.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "publicKey",
                  "description": "The public key used to verify the signature.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "bool",
                    "optional": false
                  },
                  "description": "Verification status."
                }
              ]
            },
            {
              "type": "method",
              "name": "GeneratePrivateKey",
              "description": "Generates a new random private key. \n\nThe returned key is private key of elliptic curve cryptography.",
              "snippet": "string GeneratePrivateKey(\n    string? randomSeed = null\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "randomSeed",
                  "description": "(optional) String used as the seed of random generator.",
                  "type": {
                    "name": "string?",
                    "optional": true
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Generated private key in WIF format."
                }
              ]
            },
            {
              "type": "method",
              "name": "DerivePrivateKey",
              "description": "Derives a private key from a password and salt. \n\nThe returned key is private key of elliptic curve cryptography. PBKDF2 algorithm is used to derive the key.\n\nThis method is deprecated. Use CryptoApi.DerivePrivateKey2 method instead.",
              "snippet": "string DerivePrivateKey(\n    string password,\n    string salt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "password",
                  "description": "The password used to derive from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "salt",
                  "description": "The random additional data used to derive.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Derived private key in WIF format."
                }
              ]
            },
            {
              "type": "method",
              "name": "DerivePrivateKey2",
              "description": "Derives a private key from a password and salt. \n\nThe returned key is private key of elliptic curve cryptography. PBKDF2 algorithm is used to derive the key.\n\nCompared to CryptoApi.DerivePrivateKey method, this version of the derive function has an increased number of rounds. This makes using this function a safer choice, but it makes the derived key different than in the previous version.",
              "snippet": "string DerivePrivateKey2(\n    string password,\n    string salt\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "password",
                  "description": "The password used to derive from.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                },
                {
                  "name": "salt",
                  "description": "The random additional data used to derive.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Derived private key in WIF format."
                }
              ]
            },
            {
              "type": "method",
              "name": "DerivePublicKey",
              "description": "Derives public key from a private key. \n\nThe returned key is public key of elliptic curve cryptography.",
              "snippet": "string DerivePublicKey(\n    string privateKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "privateKey",
                  "description": "The private key in WIF format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Public key in Base58 format."
                }
              ]
            },
            {
              "type": "method",
              "name": "GenerateKeySymmetric",
              "description": "Generates a new random key for symmetric cryptography. ",
              "snippet": "byte[] GenerateKeySymmetric()",
              "methodType": "method",
              "params": [],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Generated symmetric key."
                }
              ]
            },
            {
              "type": "method",
              "name": "EncryptDataSymmetric",
              "description": "Encrypts data using a symmetric key. \n\nAES algorithm is used to encrypt data.",
              "snippet": "byte[] EncryptDataSymmetric(\n    byte[] data,\n    byte[] symmetricKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "description": "Data to encrypt.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "symmetricKey",
                  "description": "The symmetric key.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Encrypted data."
                }
              ]
            },
            {
              "type": "method",
              "name": "DecryptDataSymmetric",
              "description": "Decrypts data using a symmetric key. ",
              "snippet": "byte[] DecryptDataSymmetric(\n    byte[] data,\n    byte[] symmetricKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "data",
                  "description": "Data to decrypt.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                },
                {
                  "name": "symmetricKey",
                  "description": "The symmetric key.",
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "byte[]",
                    "optional": false
                  },
                  "description": "Decrypted data."
                }
              ]
            },
            {
              "type": "method",
              "name": "ConvertPEMKeytoWIFKey",
              "description": "Converts a private key in PEM format to WIF format. ",
              "snippet": "string ConvertPEMKeytoWIFKey(\n    string pemKey\n)",
              "methodType": "method",
              "params": [
                {
                  "name": "pemKey",
                  "description": "The private key in PEM format.",
                  "type": {
                    "name": "string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "type": {
                    "name": "string",
                    "optional": false
                  },
                  "description": "Converted private key to WIF format."
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
