{
  "_meta": {
    "lang": "Swift",
    "name": "PrivMX Endpoint Swift Extra",
    "package": "privmx-endpoint-swift-extra",
    "version": "2.2"
  },
  "core": [
    {
      "content": [
        {
          "description": "Tool for direct requests to PrivMX Bridge.",
          "fields": [],
          "methods": [
            {
              "description": "Performs a backend request to PrivMX Bridge.\nThis method sends a request to PrivMX Bridge using its REST API with the appropriate authorization. The full Bridge API can be accessed using this method. The request is authenticated using a server token, and parameters are provided in JSON format.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the request fails, such as network issues or invalid parameters.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "backendRequest(serverUrl:memberToken:method:paramsAsJson:)",
              "params": [
                {
                  "description": "The URL of PrivMX Bridge server.",
                  "name": "serverUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The authentication token provided by the server.",
                  "name": "memberToken",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The API endpoint to be called (HTTP method, such as POST, GET, etc.).",
                  "name": "method",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The parameters to be sent with the request, formatted as a JSON string.",
                  "name": "paramsAsJson",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The result body as a `String`, representing the response from the backend.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func backendRequest(\n\tserverUrl: String,\n\tmemberToken: String,\n\tmethod: String,\n\tparamsAsJson: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Performs a backend request to the PrivMX Bridge.\nThis method sends a request to the PrivMX Bridge using its REST API.. The parameters are provided in JSON format.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the request fails, such as network issues or invalid parameters.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "backendRequest(serverUrl:method:paramsAsJson:)",
              "params": [
                {
                  "description": "The URL of the PrivMX Bridge server.",
                  "name": "serverUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The API endpoint to be called (HTTP method, such as POST, GET, etc.).",
                  "name": "method",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The parameters to be sent with the request, formatted as a JSON string.",
                  "name": "paramsAsJson",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The result body as a `String`, representing the response from the backend.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func backendRequest(\n\tserverUrl: String,\n\tmethod: String,\n\tparamsAsJson: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Performs a backend request to the PrivMX Bridge.\nThis method sends a request to the PrivMX Bridge using its REST API with the appropriate authorization. The full Bridge API can be accessed using this method. The request is authenticated using a server token, and parameters are provided in JSON format.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the request fails, such as network issues or invalid parameters.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "backendRequest(serverUrl:apiKeyId:apiKeySecret:mode:method:paramsAsJson:)",
              "params": [
                {
                  "description": "The URL of the PrivMX Bridge server.",
                  "name": "serverUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "apiKeyId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "apiKeySecret",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "mode",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The API endpoint to be called (HTTP method, such as POST, GET, etc.).",
                  "name": "method",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The parameters to be sent with the request, formatted as a JSON string.",
                  "name": "paramsAsJson",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The result body as a `String`, representing the response from the backend.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func backendRequest(\n\tserverUrl: String,\n\tapiKeyId: String,\n\tapiKeySecret: String,\n\tmode: Int64,\n\tmethod: String,\n\tparamsAsJson: String\n) throws -> String",
              "type": "method"
            }
          ],
          "name": "BackendRequester",
          "type": "class"
        }
      ],
      "title": "BackendRequester"
    },
    {
      "content": [
        {
          "description": "Swift wrapper for `privmx.NativeConnectionWrapper`, used to establish and manage secure connections with PrivMX platform.",
          "fields": [],
          "methods": [
            {
              "description": "Establishes an authorized connection to PrivMX Bridge.\nThis method initiates a secured connection to PrivMX Bridge using the user’s private key. The connection allows for the execution of secured operations within a specified Solution.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection process fails or if the provided credentials are invalid.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "connect(as:to:on:)",
              "params": [
                {
                  "description": "The user’s private key used for authentication (WIF format).",
                  "name": "userPrivKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of the Solution to connect to.",
                  "name": "solutionID",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of PrivMX Bridge to connect to.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXConnection` instance representing the established connection.\n",
                  "type": {
                    "name": "any PrivMXConnection",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func connect(\n\tas userPrivKey: String,\n\tto solutionID: String,\n\ton bridgeUrl: String\n) throws -> any PrivMXConnection",
              "type": "method"
            },
            {
              "description": "Establishes a public connection to PrivMX Bridge.\nThis method initiates a public connection to PrivMX Bridge, which is typically used for operations that do not require authentication, such as handling inbound traffic to an Inbox.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "connectPublic(to:on:)",
              "params": [
                {
                  "description": "The unique identifier of the Solution to connect to.",
                  "name": "solutionID",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of PrivMX Bridge to connect to.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXConnection` instance representing the public connection.\n",
                  "type": {
                    "name": "any PrivMXConnection",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func connectPublic(\n\tto solutionID: String,\n\ton bridgeUrl: String\n) throws -> any PrivMXConnection",
              "type": "method"
            },
            {
              "description": "Sets the path to the `.pem` file containing certificates required for establishing a connection.\nThis method configures the path to a `.pem` file with certificates necessary to authenticate the connection. The required certificates depend on the specific setup of PrivMX Bridge.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSettingCerts` if the certificate configuration fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "setCertsPath(_:)",
              "params": [
                {
                  "description": "The path to the `.pem` file containing the required certificates.",
                  "name": "path",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func setCertsPath(\n\t_ path: String\n) throws",
              "type": "method"
            },
            {
              "description": "Lists all available Contexts for the authorized user in the current Solution.\nThis method retrieves a list of Contexts available to the user, filtered according to the provided query.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the request fails or if access is denied.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listContexts(basedOn:)",
              "params": [
                {
                  "description": "A `PagingQuery` object to filter the list of Contexts.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.ContextList` instance containing the list of Contexts.\n",
                  "type": {
                    "name": "privmx.ContextList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listContexts(\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.ContextList",
              "type": "method"
            }
          ],
          "name": "Connection",
          "type": "class"
        }
      ],
      "title": "Connection"
    },
    {
      "content": [
        {
          "description": "",
          "fields": [],
          "methods": [
            {
              "description": "Creates a fresh ContainerPolicyBuilder",
              "methodType": "method",
              "name": "init()",
              "params": [],
              "snippet": "public init()",
              "type": "method"
            },
            {
              "description": "Initializes the builder with existing policies.",
              "methodType": "method",
              "name": "init(from:)",
              "params": [
                {
                  "description": "preexisting policy object.",
                  "name": "policy",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tfrom policy: privmx.endpoint.core.ContainerPolicy\n)",
              "type": "method"
            },
            {
              "description": "Initializes the builder with existing policies.",
              "methodType": "method",
              "name": "init(from:)",
              "params": [
                {
                  "description": "preexisting policy object.",
                  "name": "policy",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tfrom policy: privmx.endpoint.core.ContainerPolicyWithoutItem\n)",
              "type": "method"
            },
            {
              "description": "This methods returns a `ContainerPolicy` that was configured by this instance.",
              "methodType": "method",
              "name": "build()",
              "params": [],
              "returns": [
                {
                  "description": "configured `ContainerPolicy`\n",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func build(\n) -> privmx.endpoint.core.ContainerPolicy",
              "type": "method"
            },
            {
              "description": "This methods returns a `ContainerPolicyWithoutItem` that was configured by this instance.",
              "methodType": "method",
              "name": "buildWithoutItem()",
              "params": [],
              "returns": [
                {
                  "description": "configured `ContainerPolicyWithoutItem`\n",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func buildWithoutItem(\n) -> privmx.endpoint.core.ContainerPolicyWithoutItem",
              "type": "method"
            },
            {
              "description": "Configures the `get` policy",
              "methodType": "method",
              "name": "setGet(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setGet(\n\t_ value:ContainerPolicyValue?\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `get` policy",
              "methodType": "method",
              "name": "setGet(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setGet(\n\t_ value:ContainerPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `update` policy",
              "methodType": "method",
              "name": "setUpdate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdate(\n\t_ value:ContainerPolicyValue?\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `update` policy",
              "methodType": "method",
              "name": "setUpdate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdate(\n\t_ value:ContainerPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `delete` policy",
              "methodType": "method",
              "name": "setDelete(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setDelete(\n\t_ value:ContainerPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `updatePolicy` policy",
              "methodType": "method",
              "name": "setUpdatePolicy(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdatePolicy(\n\t_ value:ContainerPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `updaterCanBeRemovedFromManagers` policy",
              "methodType": "method",
              "name": "setUpdaterCanBeRemovedFromManagers(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "SpecialPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdaterCanBeRemovedFromManagers(\n\t_ value: SpecialPolicyValue?\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `ownerCanBeRemovedFromManagers` policy",
              "methodType": "method",
              "name": "setOwnerCanBeRemovedFromManagers(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "SpecialPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setOwnerCanBeRemovedFromManagers(\n\t_ value: SpecialPolicyValue?\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `item` policy",
              "methodType": "method",
              "name": "setItem(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "privmx.endpoint.core.ItemPolicy?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setItem(\n\t_ value: privmx.endpoint.core.ItemPolicy?\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `updaterCanBeRemovedFromManagers` policy",
              "methodType": "method",
              "name": "setUpdaterCanBeRemovedFromManagers(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "SpecialPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdaterCanBeRemovedFromManagers(\n\t_ value: SpecialPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `ownerCanBeRemovedFromManagers` policy",
              "methodType": "method",
              "name": "setOwnerCanBeRemovedFromManagers(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "SpecialPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setOwnerCanBeRemovedFromManagers(\n\t_ value: SpecialPolicyValue\n) -> ContainerPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `item` policy",
              "methodType": "method",
              "name": "setItem(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "privmx.endpoint.core.ItemPolicy",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ContainerPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setItem(\n\t_ value: privmx.endpoint.core.ItemPolicy\n) -> ContainerPolicyBuilder",
              "type": "method"
            }
          ],
          "name": "ContainerPolicyBuilder",
          "type": "class"
        }
      ],
      "title": "ContainerPolicyBuilder"
    },
    {
      "content": [
        {
          "description": "Enumeration of values available for configuring Policies for Containers",
          "fields": [
            {
              "description": "The corresponding value of the raw type.\nA new instance initialized with `rawValue` will be equivalent to this instance. For example:\n\n\n",
              "name": "rawValue",
              "snippet": "public var rawValue: std.string",
              "type": {
                "name": "std.__1.basic_string<CChar, std.__1.char_traits<CChar>, std.__1.allocator<CChar>>",
                "optional": false
              }
            },
            {
              "description": "All Context users can perform this action",
              "name": "all",
              "snippet": "case all",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "No one can perform this action",
              "name": "none",
              "snippet": "case none",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Take the default value",
              "name": "default",
              "snippet": "case `default`",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Only Container owner can perform this action",
              "name": "owner",
              "snippet": "case owner",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Take value from the Context",
              "name": "inherit",
              "snippet": "case inherit",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "All Container users can perform this action",
              "name": "user",
              "snippet": "case user",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "All Container managers can perform this action",
              "name": "manager",
              "snippet": "case manager",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "This case sould not be used directly, It’s here to represent values generated by `and(_:)` &amp;`or(_:)`",
              "name": "complex(_:)",
              "snippet": "case complex(String)",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Creates a new instance with the specified raw value.\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns `nil`. For example:\n\n",
              "methodType": "method",
              "name": "init(rawValue:)",
              "params": [
                {
                  "description": "The raw value to use for the new instance.",
                  "name": "rawValue",
                  "type": {
                    "name": "std.string",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init?(\n\trawValue: std.string\n)",
              "type": "method"
            },
            {
              "description": "Changes `self` to `.complex`, where the associated value consists of `self.rawValue` and `val.rawValue` connected with `&amp;`.",
              "methodType": "method",
              "name": "andMutating(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “AND” operator.",
                  "name": "val",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`.\n",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func andMutating(\n\t_ val:ContainerPolicyValue\n) -> ContainerPolicyValue",
              "type": "method"
            },
            {
              "description": "Changes `self` to `.complex`, where the associated value consists of `self.rawValue` and `val.rawValue` connected with `,`.",
              "methodType": "method",
              "name": "orMutating(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “OR” operator",
                  "name": "val",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`\n",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func orMutating(\n\t_ val:ContainerPolicyValue\n) -> ContainerPolicyValue",
              "type": "method"
            },
            {
              "description": "Creates a new `ContainerPolicyValue.complex` with the the associated value consisting of `self.rawValue` and `val.rawValue`connected with `&amp;`.",
              "methodType": "method",
              "name": "and(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “AND” operator",
                  "name": "val",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "new `.complex` `ContainerPolicyValue`\n",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func and(\n\t_ val:ContainerPolicyValue\n) -> ContainerPolicyValue",
              "type": "method"
            },
            {
              "description": "Creates a new `ContainerPolicyValue.complex` with the the associated value consisting of `self.rawValue` and `val.rawValue`connected with `&amp;`",
              "methodType": "method",
              "name": "or(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “OR” operator",
                  "name": "val",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`\n",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func or(\n\t_ val:ContainerPolicyValue\n) -> ContainerPolicyValue",
              "type": "method"
            }
          ],
          "name": "ContainerPolicyValue",
          "type": "enum"
        }
      ],
      "title": "ContainerPolicyValue"
    },
    {
      "content": [
        {
          "description": "Definition of Channels available for reading Events. This is a helper structure, since channels are identified by strings in low-level Endpoint.",
          "fields": [
            {
              "description": "Synthetic channel, used for registering for library Events",
              "name": "platform",
              "snippet": "case platform",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Stores",
              "name": "store",
              "snippet": "case store",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Files in a particular Store",
              "name": "storeFiles(storeID:)",
              "snippet": "case storeFiles(storeID: String)",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Messages in a particular Thread",
              "name": "threadMessages(threadID:)",
              "snippet": "case threadMessages(threadID: String)",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Threads",
              "name": "thread",
              "snippet": "case thread",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Inboxes",
              "name": "inbox",
              "snippet": "case inbox",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Channel for Events regarding Entries in a particular Inbox",
              "name": "inboxEntries(inboxID:)",
              "snippet": "case inboxEntries(inboxID:String)",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "EventChannel",
          "type": "enum"
        }
      ],
      "title": "EventChannel"
    },
    {
      "content": [
        {
          "description": "Definition of Channels available for reading Events. This is a helper structure, since channels are identified by strings in low-level Endpoint.",
          "fields": [
            {
              "description": "\n",
              "name": "name",
              "snippet": "public var name: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "EventChannel",
          "type": "class"
        }
      ],
      "title": "EventChannelExtension"
    },
    {
      "content": [
        {
          "description": "",
          "fields": [],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init()",
              "params": [],
              "snippet": "public init()",
              "type": "method"
            },
            {
              "description": "Initializes the builder with existing policies.",
              "methodType": "method",
              "name": "init(from:)",
              "params": [
                {
                  "description": "preexisting Policy object.",
                  "name": "policy",
                  "type": {
                    "name": "privmx.endpoint.core.ItemPolicy",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tfrom policy: privmx.endpoint.core.ItemPolicy\n)",
              "type": "method"
            },
            {
              "description": "This methods returns a `ItemPolicy` that was configured by this instance.",
              "methodType": "method",
              "name": "build()",
              "params": [],
              "returns": [
                {
                  "description": "configured `ItemPolicy`\n",
                  "type": {
                    "name": "privmx.endpoint.core.ItemPolicy",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func build(\n) -> privmx.endpoint.core.ItemPolicy",
              "type": "method"
            },
            {
              "description": "Configures the `get` policy",
              "methodType": "method",
              "name": "setGet(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setGet(\n\t_ value:ItemPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `listMy` policy",
              "methodType": "method",
              "name": "setListMy(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setListMy(\n\t_ value:ContainerPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `listAll` policy",
              "methodType": "method",
              "name": "setListAll(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setListAll(\n\t_ value:ContainerPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `create` policy",
              "methodType": "method",
              "name": "setCreate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setCreate(\n\t_ value:ContainerPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `update` policy",
              "methodType": "method",
              "name": "setUpdate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdate(\n\t_ value:ItemPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `delete` policy",
              "methodType": "method",
              "name": "setDelete(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setDelete(\n\t_ value:ItemPolicyValue?\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `get` policy",
              "methodType": "method",
              "name": "setGet(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setGet(\n\t_ value:ItemPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `listMy` policy",
              "methodType": "method",
              "name": "setListMy(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setListMy(\n\t_ value:ContainerPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `listAll` policy",
              "methodType": "method",
              "name": "setListAll(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setListAll(\n\t_ value:ContainerPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `create` policy",
              "methodType": "method",
              "name": "setCreate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ContainerPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setCreate(\n\t_ value:ContainerPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `update` policy",
              "methodType": "method",
              "name": "setUpdate(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setUpdate(\n\t_ value:ItemPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            },
            {
              "description": "Configures the `delete` policy",
              "methodType": "method",
              "name": "setDelete(_:)",
              "params": [
                {
                  "description": "the policy value that will be set",
                  "name": "value",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "this object for further configuration\n",
                  "type": {
                    "name": "ItemPolicyBuilder",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setDelete(\n\t_ value:ItemPolicyValue\n) -> ItemPolicyBuilder",
              "type": "method"
            }
          ],
          "name": "ItemPolicyBuilder",
          "type": "class"
        }
      ],
      "title": "ItemPolicyBuilder"
    },
    {
      "content": [
        {
          "description": "Enumeration of values available for configuring Policies for Items",
          "fields": [
            {
              "description": "The corresponding value of the raw type.\nA new instance initialized with `rawValue` will be equivalent to this instance. For example:\n\n\n",
              "name": "rawValue",
              "snippet": "public var rawValue: std.string",
              "type": {
                "name": "std.__1.basic_string<CChar, std.__1.char_traits<CChar>, std.__1.allocator<CChar>>",
                "optional": false
              }
            },
            {
              "description": "All Context users can perform this action",
              "name": "all",
              "snippet": "case all",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "No one can perform this action",
              "name": "none",
              "snippet": "case none",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Take the default value",
              "name": "default",
              "snippet": "case `default`",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Take the value from the Context",
              "name": "inherit",
              "snippet": "case inherit",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Only Container owner can perform this action",
              "name": "owner",
              "snippet": "case owner",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Only item owner can perform this action",
              "name": "itemOwner",
              "snippet": "case itemOwner",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "All Container users can perform this action",
              "name": "user",
              "snippet": "case user",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "All Container managers can perform this action",
              "name": "manager",
              "snippet": "case manager",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "This case sould not be used directly, It’s here to represent values generated by `and(_:)` &amp;`or(_:)`",
              "name": "complex(_:)",
              "snippet": "case complex(String)",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Creates a new instance with the specified raw value.\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns `nil`. For example:\n\n",
              "methodType": "method",
              "name": "init(rawValue:)",
              "params": [
                {
                  "description": "The raw value to use for the new instance.",
                  "name": "rawValue",
                  "type": {
                    "name": "std.string",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init?(rawValue: std.string)",
              "type": "method"
            },
            {
              "description": "Changes `self` to `.complex`, where the associated value consists of `self.rawValue` and `val.rawValue`connected with `&amp;`.",
              "methodType": "method",
              "name": "andMutating(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “AND” operator",
                  "name": "val",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`\n",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func andMutating(\n\t_ val:ItemPolicyValue\n) -> ItemPolicyValue",
              "type": "method"
            },
            {
              "description": "Changes `self` to `.complex`, where the associated value consists of `self.rawValue` and `val.rawValue`connected with `,`.",
              "methodType": "method",
              "name": "orMutating(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “OR” operator",
                  "name": "val",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`\n",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func orMutating(\n\t_ val:ItemPolicyValue\n) -> ItemPolicyValue",
              "type": "method"
            },
            {
              "description": "Creates a new `ItemPolicyValue.complex` with the the associated value consisting of `self.rawValue` and `val.rawValue`connected with `&amp;`.",
              "methodType": "method",
              "name": "and(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “AND” operator",
                  "name": "val",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "new `.complex` `ItemPolicyValue`\n",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func and(\n\t_ val:ItemPolicyValue\n) -> ItemPolicyValue",
              "type": "method"
            },
            {
              "description": "Creates a new `ItemPolicyValue.complex` with the the associated value consisting of `self.rawValue` and `val.rawValue`connected with `&amp;`",
              "methodType": "method",
              "name": "or(_:)",
              "params": [
                {
                  "description": "Policy value to be appended with “OR” operator",
                  "name": "val",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "modified `self`\n",
                  "type": {
                    "name": "ItemPolicyValue",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func or(\n\t_ val:ItemPolicyValue\n) -> ItemPolicyValue",
              "type": "method"
            }
          ],
          "name": "ItemPolicyValue",
          "type": "enum"
        }
      ],
      "title": "ItemPolicyValue"
    },
    {
      "content": [
        {
          "description": "Protocol for managing events within PrivMX Endpoint. Provides a standardized interface for handling and processing events with Swift Types.",
          "fields": [
            {
              "description": "Unique identifier for the connection associated with this event.\nThis property stores an `Int64` identifier that can be used to associate the event with a specific connection instance.\n",
              "name": "connectionId",
              "snippet": "var connectionId: Int64",
              "type": {
                "name": "Int64",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Provides a string that uniquely represents the type of the event.\nThis method should return a specific string that identifies the event type, enabling consistent event categorization and processing.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the type of the event.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Processes the event by executing a specified callback.\nThis method allows for custom processing of event data, which is passed to the callback function. The `data` parameter contains information relevant to the event, though some events may lack associated data (hence, the optional `Any?` type).",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that processes the event’s data. This callback accepts an optional `Any?` parameter representing the event’s data.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping @Sendable (Any?) -> Void",
                    "optional": false
                  }
                }
              ],
              "snippet": "func handleWith(cb: @escaping @Sendable (Any?) -> Void)",
              "type": "method"
            },
            {
              "description": "Retrieves the communication channel associated with this event.\nThis method provides the name or identifier of the channel related to the event, which can be useful for directing or filtering event handling based on channel context.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event’s associated channel.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "PMXEvent",
          "type": "class"
        }
      ],
      "title": "PMXEvent"
    },
    {
      "content": [
        {
          "description": " Contains query parameters for methods returning lists (PagingList).",
          "fields": [],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init(skip:limit:sortOrder:lastId:)",
              "params": [
                {
                  "description": "",
                  "name": "skip",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "limit",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "sortOrder",
                  "type": {
                    "name": "PMXSortOrder",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "lastId",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "snippet": "init(\n\tskip: Int64,\n\tlimit: Int64,\n\tsortOrder: PMXSortOrder,\n\tlastId:String? = nil\n)",
              "type": "method"
            }
          ],
          "name": "PagingQuery",
          "type": "class"
        }
      ],
      "title": "PagingQuery"
    },
    {
      "content": [
        {
          "description": "Accepted sort orders for `PagingQuery` instances",
          "fields": [
            {
              "description": "",
              "name": "asc",
              "snippet": "case asc",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "desc",
              "snippet": "case asc,desc",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "PMXSortOrder",
          "type": "enum"
        }
      ],
      "title": "PagingQuery"
    },
    {
      "content": [
        {
          "description": "The `PrivMXConnection` protocol declares methods for managing connections to PrivMX Bridge with Swift types.\nThis protocol defines the required methods for setting up, managing, and disconnecting a connection to PrivMX platform. It provides functionality for setting up the path to SSL certificates, managing connection lifecycle (connect/disconnect), and retrieving important connection details such as the connection ID. Additionally, it offers methods for connecting with public or private access.",
          "fields": [],
          "methods": [
            {
              "description": "Sets path to .pem file with certificates needed for establishing connection. This certificates depends on your Bridge setup.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSettingCerts` if an exception was thrown in C++ code, or another error occurred.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "setCertsPath(_:)",
              "params": [
                {
                  "description": "Path to the .pem file",
                  "name": "path",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "static func setCertsPath(\n\t_ path: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Connects with provided credentials to PrivMX Bridge.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Any Connection Exceptions",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "connect(as:to:on:)",
              "params": [
                {
                  "description": "User’s Private Key in WIF format",
                  "name": "userPrivKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Unique Solution Identifier defined at PrivMX Bridge",
                  "name": "solutionID",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "new Connection object which can be used for initializing proper PrivMX Endpoint APIs\n",
                  "type": {
                    "name": "any PrivMXConnection",
                    "optional": false
                  }
                }
              ],
              "snippet": "static func connect(\n\tas userPrivKey: String,\n\tto solutionID: String,\n\ton bridgeUrl: String\n) throws -> any PrivMXConnection",
              "type": "method"
            },
            {
              "description": "Connects with public access to PrivMX Bridge. It is used mainly for public access to `InboxApi`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Any Connection Exceptions",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "connectPublic(to:on:)",
              "params": [
                {
                  "description": "Unique Solution Identifier defined at  PrivMX Bridge",
                  "name": "solutionID",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "new Connection object which can be used for initializing  PrivMX `InboxApi`.\n",
                  "type": {
                    "name": "any PrivMXConnection",
                    "optional": false
                  }
                }
              ],
              "snippet": "static func connectPublic(\n\tto solutionID: String,\n\ton bridgeUrl: String\n) throws -> any PrivMXConnection",
              "type": "method"
            },
            {
              "description": "Disconnects current connection.\nCalling this function finished usage of PrivMXConnection object.",
              "methodType": "method",
              "name": "disconnect()",
              "params": [],
              "snippet": "func disconnect(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Returns current Connection ID.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Any connection Exceptions",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getConnectionId()",
              "params": [],
              "returns": [
                {
                  "description": "Current Connection ID. Used for managing and identifying connections.\n",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getConnectionId(\n) throws -> Int64",
              "type": "method"
            },
            {
              "description": "Lists Contexts to which the connected user has access.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Any Exceptions",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listContexts(basedOn:)",
              "params": [
                {
                  "description": "Object holding parameters of the query",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "Structure containing all Contexts user has access to.\n",
                  "type": {
                    "name": "privmx.ContextList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listContexts(\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.ContextList",
              "type": "method"
            }
          ],
          "name": "PrivMXConnection",
          "type": "class"
        }
      ],
      "title": "PrivMXConnection"
    },
    {
      "content": [
        {
          "description": "A wrapper class that manages a connection to PrivMX Bridge and provides access to various APIs, including Threads, Stores, and Inboxes.\nThe `PrivMXEndpoint` class is designed to encapsulate and manage a single connection to PrivMX. It provides access to different APIs for handling Threads, Stores, and Inboxes, based on the modules that are enabled during initialization. It also supports asynchronous operations like uploading and downloading files, and allows for managing callbacks for events.",
          "fields": [
            {
              "description": "The stable identity of the entity associated with this instance.\n\n",
              "name": "id",
              "snippet": "public let id:Int64",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "Marks the endpoint as connected using no authorisation.\n",
              "name": "anonymous",
              "snippet": "public let anonymous: Bool",
              "type": {
                "name": "Bool",
                "optional": false
              }
            },
            {
              "description": "Provides handling of network and events through `PrivMXConnection`.\n",
              "name": "connection",
              "snippet": "public private(set) var connection : PrivMXConnection",
              "type": {
                "name": "any PrivMXConnection",
                "optional": false
              }
            },
            {
              "description": "API for handling threads.\n",
              "name": "threadApi",
              "snippet": "public private(set) var threadApi : PrivMXThread?",
              "type": {
                "name": "(any PrivMXThread)?",
                "optional": false
              }
            },
            {
              "description": "API for handling stores.\n",
              "name": "storeApi",
              "snippet": "public private(set) var storeApi : PrivMXStore?",
              "type": {
                "name": "(any PrivMXStore)?",
                "optional": false
              }
            },
            {
              "description": "API for handling inboxes.\n",
              "name": "inboxApi",
              "snippet": "public private(set) var inboxApi : PrivMXInbox?",
              "type": {
                "name": "(any PrivMXInbox)?",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Initializes a new instance of `PrivMXEndpoint` with a connection to PrivMX Bridge and optional modules.\nThis method sets up the connection and, based on the provided modules, initializes the APIs for handling Threads, Stores, and Inboxes.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection or module initialization fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "init(modules:userPrivKey:solutionId:platformUrl:)",
              "params": [
                {
                  "description": "A set of modules to initialize (of type `PrivMXModule`).",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The user’s private key in WIF format.",
                  "name": "userPrivKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of PrivMX Solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of PrivMX Bridge instance.",
                  "name": "platformUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tmodules:Set<PrivMXModule>,\n\tuserPrivKey:String,\n\tsolutionId:String,\n\tplatformUrl:String\n) throws",
              "type": "method"
            },
            {
              "description": "Initializes a new instance of `PrivMXEndpoint` with a connection to PrivMX Bridge and optional modules.\nThis method sets up the connection and, based on the provided modules, initializes the APIs for handling Threads, Stores, and Inboxes.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection or module initialization fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "init(modules:userPrivKey:solutionId:bridgeUrl:)",
              "params": [
                {
                  "description": "A set of modules to initialize (of type `PrivMXModule`).",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The user’s private key in WIF format.",
                  "name": "userPrivKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of PrivMX Solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of PrivMX Bridge instance.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tmodules:Set<PrivMXModule>,\n\tuserPrivKey:String,\n\tsolutionId:String,\n\tbridgeUrl:String\n) throws",
              "type": "method"
            },
            {
              "description": "Initializes a new instance of `PrivMXEndpoint` with a public connection to the PrivMX Bridge and optional modules.\nThis method sets up the connection and, based on the provided modules, initializes the APIs for handling threads, stores, and inboxes. Using a Public (anonymous) connection. Take note that this is only useful for Inboxes",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection or module initialization fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "init(modules:solutionId:platformUrl:)",
              "params": [
                {
                  "description": "A set of modules to initialize (of type `PrivMXModule`).",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of the PrivMX solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of the PrivMX Bridge instance.",
                  "name": "platformUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tmodules:Set<PrivMXModule>,\n\tsolutionId:String,\n\tplatformUrl:String\n) throws",
              "type": "method"
            },
            {
              "description": "Initializes a new instance of `PrivMXEndpoint` with a public connection to the PrivMX Bridge and optional modules.\nThis method sets up the connection and, based on the provided modules, initializes the APIs for handling threads, stores, and inboxes. Using a Public (anonymous) connection. Take note that this is only useful for Inboxes",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the connection or module initialization fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "init(modules:solutionId:bridgeUrl:)",
              "params": [
                {
                  "description": "A set of modules to initialize (of type `PrivMXModule`).",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of the PrivMX solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of the PrivMX Bridge instance.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tmodules:Set<PrivMXModule>,\n\tsolutionId:String,\n\tbridgeUrl:String\n) throws",
              "type": "method"
            },
            {
              "description": "Begins uploading a new file using `PrivMXStoreFileHandler`, which manages file uploads.\nThis method uploads a file to a specified store using a `FileHandle`. It supports uploading large files in chunks and provides a callback for tracking the progress.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the upload process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startUploadingNewFile(_:to:withPublicMeta:withPrivateMeta:sized:withChunksOf:onChunkUploaded:)",
              "params": [
                {
                  "description": "A local `FileHandle` representing the file to be uploaded.",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the destination store.",
                  "name": "store",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public, unencrypted metadata for the file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Encrypted metadata for the file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk upload is completed.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the uploaded file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startUploadingNewFile(\n\t_ file:FileHandle,\n\tto store:String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tsized size:Int64,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkUploaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "Begins uploading a new file from an in-memory buffer using `PrivMXStoreFileHandler`.\nThis method uploads file content from a `Data` buffer to a specified Store. It supports chunked uploads and provides a callback for progress tracking.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the upload process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startUploadingNewFileFromBuffer(_:to:withPublicMeta:withPrivateMeta:sized:withChunksOf:onChunkUploaded:)",
              "params": [
                {
                  "description": "The in-memory file content as `Data`.",
                  "name": "buffer",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the destination store.",
                  "name": "store",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public, unencrypted metadata for the file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Encrypted metadata for the file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of each chunk to be uploaded.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk upload is completed.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the uploaded file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startUploadingNewFileFromBuffer(\n\t_ buffer:Data,\n\tto store:String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tsized size:Int64,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkUploaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "/ Begins uploading an updated file using `PrivMXStoreFileHandler`.\nThis method updates an existing file in a store with new content and metadata, supporting chunked uploads for large files.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the update process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startUploadingUpdatedFile(_:as:replacingPublicMeta:replacingPrivateMeta:replacingSize:withChunksOf:onChunkUploaded:)",
              "params": [
                {
                  "description": "A local `FileHandle` representing the updated file.",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the file in the store to be updated.",
                  "name": "storeFile",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata to overwrite the existing metadata.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Encrypted metadata to overwrite the existing metadata.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the updated file in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk upload is completed.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the updated file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startUploadingUpdatedFile(\n\t_ file:FileHandle,\n\tas storeFile:String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingSize size:Int64,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkUploaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "Begins uploading an updated file from an in-memory buffer using `PrivMXStoreFileHandler`.\nThis method updates an existing file in a store with new content and metadata, supporting chunked uploads for large files.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the update process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startUploadingUpdatedFileFromBuffer(_:as:replacingPublicMeta:replacingPrivateMeta:replacingSize:withChunksOf:onChunkUploaded:)",
              "params": [
                {
                  "description": "The in-memory content of the updated file as `Data`.",
                  "name": "buffer",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the file in the store to be updated.",
                  "name": "storeFile",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata to overwrite the existing metadata.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Encrypted metadata to overwrite the existing metadata.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the updated file in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of each chunk to be uploaded.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk upload is completed.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the updated file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startUploadingUpdatedFileFromBuffer(\n\t_ buffer:Data,\n\tas storeFile:String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingSize size:Int64,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkUploaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "Begins downloading a file to the local filesystem using `PrivMXStoreFileHandler`.\nThis method downloads a file from a Store to the local filesystem using a `FileHandle`. It supports downloading files in chunks and provides a callback for progress tracking.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startDownloadingToFile(_:from:withChunksOf:onChunkDownloaded:)",
              "params": [
                {
                  "description": "A local `FileHandle` representing the destination file.",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the file to be downloaded.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk download is completed.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the downloaded file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startDownloadingToFile(\n\t_ file:FileHandle,\n\tfrom fileId:String,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkDownloaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "Begins downloading a file to the local filesystem using `InboxFileHandler`.\nThis method downloads a file from an Inbox to the local filesystem using a `FileHandle`. It supports downloading files in chunks and provides a callback for progress tracking.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startDownloadingToFileFromInbox(_:from:withChunksOf:onChunkDownloaded:)",
              "params": [
                {
                  "description": "A local `FileHandle` representing the destination file.",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The identifier of the file to be downloaded.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The size of a chunk to be used",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk download is completed.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the downloaded file as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startDownloadingToFileFromInbox(\n\t_ file:FileHandle,\n\tfrom fileId:String,\n\twithChunksOf chunkSize: Int64 = InboxFileHandler.RecommendedChunkSize,\n\tonChunkDownloaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> String",
              "type": "method"
            },
            {
              "description": "Begins downloading a file to in-memory buffer.\nThis method downloads a file from a store to the local in-memory buffer. It supports downloading files in chunks and provides a callback for progress tracking.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startDownloadingToBufferFromInbox(from:withChunksOf:onChunkDownloaded:)",
              "params": [
                {
                  "description": "The identifier of the file to be downloaded.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk download is completed.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the downloaded file as a `String`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startDownloadingToBufferFromInbox(\n\tfrom fileId:String,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkDownloaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> Data",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "startDownloadingToBuffer(_:from:withChunksOf:onChunkDownloaded:)",
              "params": [
                {
                  "description": "",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startDownloadingToBuffer(\n\t_ file:FileHandle,\n\tfrom fileId:String,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkDownloaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> Data",
              "type": "method"
            },
            {
              "description": "Begins downloading a file to in-memory buffer.\nThis method downloads a file from a store to the local in-memory buffer. It supports downloading files in chunks and provides a callback for progress tracking.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startDownloadingToBuffer(from:withChunksOf:onChunkDownloaded:)",
              "params": [
                {
                  "description": "The identifier of the file to be downloaded.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A callback that is called after each chunk download is completed.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "(@escaping @Sendable (Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The identifier of the downloaded file as a `String`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func startDownloadingToBuffer(\n\tfrom fileId:String,\n\twithChunksOf chunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize,\n\tonChunkDownloaded: (@escaping @Sendable (Int) -> Void) = {_ in}\n) async throws -> Data",
              "type": "method"
            },
            {
              "description": "Registers a callback for an Event from a particular Channel.\nThis also causes events to start arriving from that channel.",
              "methodType": "method",
              "name": "registerCallback(for:from:identified:_:)",
              "params": [
                {
                  "description": "type of Event",
                  "name": "type",
                  "type": {
                    "name": "PMXEvent.Type",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "channel",
                  "type": {
                    "name": "EventChannel",
                    "optional": false
                  }
                },
                {
                  "description": "Custom identifier for managing Callbacks",
                  "name": "id",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "cb",
                  "type": {
                    "name": "(@escaping @Sendable (Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func registerCallback(\n\tfor type: PMXEvent.Type,\n\tfrom channel:EventChannel,\n\tidentified id:String,\n\t_ cb: (@escaping @Sendable (Any?) -> Void) = {_ in}\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Deletes a specific Callback.\nNote that this is an expensive operation. If there are no callbacks left for events from a particular channel, `Connection.unsubscribeFromChannel(_:)` is called, which means no Events from that Channel will arrive.",
              "methodType": "method",
              "name": "deleteCallbacks(identified:)",
              "params": [
                {
                  "description": "ID of the callback to be deleted",
                  "name": "id",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteCallbacks(\n\tidentified id:String\n) -> Void",
              "type": "method"
            },
            {
              "description": "Removes all callbacks for a particular Event type.\nIf there are no callbacks left for events from a particular channel, `Connection.unsubscribeFromChannel(_:)` is called, which means no Events from that Channel will arrive.",
              "methodType": "method",
              "name": "clearCallbacks(for:)",
              "params": [
                {
                  "description": "the type of Event, for which callbacks should be removed.",
                  "name": "type",
                  "type": {
                    "name": "PMXEvent.Type",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func clearCallbacks(\n\tfor type:PMXEvent.Type\n) -> Void",
              "type": "method"
            },
            {
              "description": "Removes all registered callbacks for Events from selected Channel\nOnce all callbacks are removed, `Connection.unsubscribeFromChannel(_:)` is called, which means no Events from that Channel will arrive.",
              "methodType": "method",
              "name": "clearCallbacks(for:)",
              "params": [
                {
                  "description": "the EventChannel, from which events should no longer be received",
                  "name": "channel",
                  "type": {
                    "name": "EventChannel",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func clearCallbacks(\n\tfor channel:EventChannel\n) -> Void",
              "type": "method"
            },
            {
              "description": "Removes all registered callbacks for Events and unsubscribes from all channels",
              "methodType": "method",
              "name": "clearAllCallbacks()",
              "params": [],
              "snippet": "public func clearAllCallbacks(\n) -> Void",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "handleEvent(_:ofType:)",
              "params": [
                {
                  "description": "",
                  "name": "event",
                  "type": {
                    "name": "any PMXEvent",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "t",
                  "type": {
                    "name": "any PMXEvent.Type",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleEvent (\n\t_ event: any PMXEvent,\n\tofType t: any PMXEvent.Type\n) async throws",
              "type": "method"
            }
          ],
          "name": "PrivMXEndpoint",
          "type": "class"
        }
      ],
      "title": "PrivMXEndpoint"
    },
    {
      "content": [
        {
          "description": "The `PrivMXEndpointContainer` class serves as the central management component for handling multiple `PrivMXEndpoint` instances within PrivMX system. It is responsible for initializing, managing, and disconnecting PrivMX Endpoints, as well as providing cryptographic services and event handling capabilities.\nThis class operates in a concurrent environment with support for handling cryptographic operations, managing secure communication endpoints, and listening for events. It also supports asynchronous endpoint creation, disconnection, and event processing.",
          "fields": [
            {
              "description": "Provides access to cryptographic operations via `PrivMXCrypto`.\n",
              "name": "cryptoApi",
              "snippet": "nonisolated(unsafe) public private(set) var cryptoApi:PrivMXCrypto = CryptoApi.create()",
              "type": {
                "name": "any PrivMXCrypto",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init()",
              "params": [],
              "snippet": "public init()",
              "type": "method"
            },
            {
              "description": "Retrieves an `PrivMXEndpoint` instance from the container based on its ID.",
              "methodType": "method",
              "name": "getEndpoint(_:)",
              "params": [
                {
                  "description": "The connection ID of the desired `PrivMXEndpoint`.",
                  "name": "id",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The `PrivMXEndpoint` with the specified ID, if it exists; otherwise, returns `nil`.\n",
                  "type": {
                    "name": "PrivMXEndpoint?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getEndpoint(\n\t_ id: Int64\n) -> PrivMXEndpoint?",
              "type": "method"
            },
            {
              "description": "Returns an array of all connected `PrivMXEndpoint` IDs.\nThis is useful when managing multiple  `PrivMXEndpoint`s and retrieving their connection IDs.",
              "methodType": "method",
              "name": "getEndpointIds()",
              "params": [],
              "returns": [
                {
                  "description": "An array of connection IDs for all connected endpoints.\n",
                  "type": {
                    "name": "[Int64]",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getEndpointIds(\n) -> [Int64]",
              "type": "method"
            },
            {
              "description": "Initializes a new `PrivMXEndpoint` and adds it to the container.\nThis method creates a new `PrivMXEndpoint` with the specified modules, user credentials, and platform details, and adds it to the `endpoints` dictionary.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if creating the new endpoint fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "newEndpoint(enabling:connectingAs:to:on:)",
              "params": [
                {
                  "description": "A set of modules to be initialized with the new endpoint.",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The user’s private key in WIF format.",
                  "name": "userPrivKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of PrivMX solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of PrivMX Bridge.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The newly created `PrivMXEndpoint` instance.\n",
                  "type": {
                    "name": "PrivMXEndpoint",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func newEndpoint(\n\tenabling modules:Set<PrivMXModule>,\n\tconnectingAs userPrivKey:String,\n\tto solutionId:String,\n\ton bridgeUrl:String\n) async throws -> PrivMXEndpoint",
              "type": "method"
            },
            {
              "description": "Initializes a new `PrivMXEndpoint` and adds it to the container.\nThis method creates a new `PrivMXEndpoint` with the specified modules and platform details, and adds it to the `endpoints` dictionary. Note it is only useful for",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if creating the new endpoint fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "newPublicEndpoint(enabling:to:on:)",
              "params": [
                {
                  "description": "A set of modules to be initialized with the new endpoint.",
                  "name": "modules",
                  "type": {
                    "name": "Set<PrivMXModule>",
                    "optional": false
                  }
                },
                {
                  "description": "The unique identifier of the PrivMX solution.",
                  "name": "solutionId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The URL of the PrivMX Bridge.",
                  "name": "bridgeUrl",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The newly created `PrivMXEndpoint` instance.\n",
                  "type": {
                    "name": "PrivMXEndpoint",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func newPublicEndpoint(\n\tenabling modules:Set<PrivMXModule>,\n\tto solutionId:String,\n\ton bridgeUrl:String\n) async throws -> PrivMXEndpoint",
              "type": "method"
            },
            {
              "description": "Disconnects and removes a `PrivMXEndpoint` from the container.\nThis method terminates the connection of the specified `PrivMXEndpoint` and removes it from the container.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if disconnecting the endpoint fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "disconnect(endpoint:)",
              "params": [
                {
                  "description": "The connection ID of the endpoint to be disconnected.",
                  "name": "endpoint",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func disconnect(\n\tendpoint: Int64\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Disconnects and removes all `PrivMXEndpoint`s from the container.\nThis method terminates the connections of all `PrivMXEndpoint`s managed by the container and clears the container.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if disconnecting any endpoint fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "disconnectAll()",
              "params": [],
              "snippet": "public func disconnectAll(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Sets the path to the `.pem` file containing the certificates required for establishing secure connections.\nThis method configures the path to the certificates needed for secure communication with PrivMX Bridge. The exact certificates depend on your Bridge setup.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSettingCerts` if setting the certificates fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "setCertsPath(to:)",
              "params": [
                {
                  "description": "The file path to the `.pem` certificate file.",
                  "name": "path",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setCertsPath(\n\tto path: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Stops listening for events but does not remove event listeners.\nThis method emits a “break” event to pause event listening without removing the registered listeners.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if stopping event listening fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "stopListening()",
              "params": [],
              "snippet": "public func stopListening(\n) async throws  -> Void",
              "type": "method"
            },
            {
              "description": "Starts listening for events in PrivMX system.\nThis method begins listening for events such as updates or notifications within PrivMX system. If the listener is already running, an error will be thrown.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.otherFailure` if event listening is already running.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "startListening()",
              "params": [],
              "snippet": "public func startListening() async throws",
              "type": "method"
            }
          ],
          "name": "PrivMXEndpointContainer",
          "type": "class"
        }
      ],
      "title": "PrivMXEndpointContainer"
    },
    {
      "content": [
        {
          "description": "`PrivMXEventLoop` is responsible for asynchronously managing and processing PrivMX events. It acts as an event handler, receiving, parsing, and publishing events on a background loop.",
          "fields": [
            {
              "description": "Indicates whether the event loop is currently listening for events.\n",
              "name": "isListening",
              "snippet": "public var isListening: Bool = false",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Stops the event loop by emitting a break event.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the break event cannot be emitted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "stopListening()",
              "params": [],
              "snippet": "public func stopListening(\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXEventLoop",
          "type": "class"
        }
      ],
      "title": "PrivMXEventLoop"
    },
    {
      "content": [
        {
          "description": "Modules that can be initialized by `PrivMXEndpoint`.",
          "fields": [
            {
              "description": "",
              "name": "thread",
              "snippet": "case thread",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "store",
              "snippet": "case store",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "inbox",
              "snippet": "case inbox",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "PrivMXModule",
          "type": "enum"
        }
      ],
      "title": "PrivMXModule"
    },
    {
      "content": [
        {
          "description": "Enumaration of special cases of Policies.",
          "fields": [
            {
              "description": "",
              "name": "yes",
              "snippet": "case yes",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "no",
              "snippet": "case yes, no",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "default",
              "snippet": "case `default`",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "inherit",
              "snippet": "case `default`, inherit",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "SpecialPolicyValue",
          "type": "enum"
        }
      ],
      "title": "SpecialPolicyValue"
    }
  ],
  "crypto": [
    {
      "content": [
        {
          "description": "Swift wrapper for `privmx.NativeCryptoApiWrapper`.\nThis class provides cryptographic functions such as key generation, encryption, and decryption, as well as signing data. It wraps the underlying C++ implementation for use in Swift.",
          "fields": [],
          "methods": [
            {
              "description": "Generates a new Private Key, which can be used for accessing PrivMX Bridge.\nThis method generates a private key using an optional base string (seed) for added randomness. The generated key is returned in WIF (Wallet Import Format).\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the key generation fails or an error occurs in the C++ layer.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "generatePrivateKey(withSeed:)",
              "params": [
                {
                  "description": "An optional seed string to generate the private key. If `nil`, a random seed is used.",
                  "name": "randomSeed",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A WIF formatted private key as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func generatePrivateKey(\n\twithSeed randomSeed: String?\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Generates a new Symmetric Key for AES encryption.\nThis method creates a 256-bit symmetric key, which can be used for AES encryption and decryption.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if key generation fails or if any errors occur in the C++ code.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "generateKeySymmetric()",
              "params": [],
              "returns": [
                {
                  "description": "A 256-bit symmetric key as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func generateKeySymmetric(\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Derives a Public Key from a given Private Key.\nThis method derives the corresponding public key from a provided private key, formatted in WIF.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the key derivation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePublicKey(from:)",
              "params": [
                {
                  "description": "The private key in WIF format (Wallet Import Format) from which the public key will be derived.",
                  "name": "keyPriv",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived public key as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func derivePublicKey(\n\tfrom keyPriv: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deterministically derives a Private Key from a password and salt.\nThis method generates a private key using a combination of a password and salt. The resulting private key is derived in a deterministic way, ensuring the same password and salt will always produce the same private key.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the derivation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePrivateKey(from:and:)",
              "params": [
                {
                  "description": "The base string (password) used for private key generation.",
                  "name": "password",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A string used as salt for private key generation.",
                  "name": "salt",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived private key in WIF format (Wallet Import Format) as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func derivePrivateKey(\n\tfrom password: String,\n\tand salt: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deterministically derives a Private Key from a password and salt.\nThis method generates a private key using a combination of a password and salt. The resulting private key is derived in a deterministic way, ensuring the same password and salt will always produce the same private key.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the derivation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePrivateKey2(from:and:)",
              "params": [
                {
                  "description": "The base string (password) used for private key generation.",
                  "name": "password",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A string used as salt for private key generation.",
                  "name": "salt",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived private key in WIF format (Wallet Import Format) as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func derivePrivateKey2(\n\tfrom password: String,\n\tand salt: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Signs the given data using a Private Key.\nThis method creates a digital signature for the provided data using a specified private key (in WIF format).\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSigning` if the signing operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "signData(_:with:)",
              "params": [
                {
                  "description": "The data to be signed, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private key (WIF format) used for signing the data.",
                  "name": "privateKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The signed data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func signData(\n\t_ data: Data,\n\twith privateKey: String\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Encrypts data using AES symmetric encryption.\nThis method encrypts the provided data using AES encryption with a 256-bit symmetric key.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedEncrypting` if the encryption process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "encryptDataSymmetric(_:with:)",
              "params": [
                {
                  "description": "The data to be encrypted, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The 256-bit symmetric key used for AES encryption.",
                  "name": "symmetricKey",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The encrypted data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func encryptDataSymmetric(\n\t_ data: Data,\n\twith symmetricKey: Data\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Decrypts data using AES symmetric encryption.\nThis method decrypts the provided data using AES encryption with a 256-bit symmetric key.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDecrypting` if the decryption process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "decryptDataSymmetric(_:with:)",
              "params": [
                {
                  "description": "The encrypted data to be decrypted, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The 256-bit symmetric key used for AES decryption.",
                  "name": "symmetricKey",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The decrypted data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func decryptDataSymmetric(\n\t_ data: Data, /// test\n\twith symmetricKey: Data\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Converts a PEM formatted key to WIF format.\nThis method converts a private key from PEM (Privacy-Enhanced Mail) format to Wallet Import Format (WIF).\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedEncrypting` if the conversion process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "convertPEMKeyToWIFKey(_:)",
              "params": [
                {
                  "description": "The private key in PEM format.",
                  "name": "pemKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The converted private key in WIF format as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func convertPEMKeyToWIFKey(\n\t_ pemKey: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "verifySignature(data:signature:publicKey:)",
              "params": [
                {
                  "description": "",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "signature",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "publicKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func verifySignature(\n\tdata: Data,\n\tsignature: Data,\n\tpublicKey: String\n) throws -> Bool",
              "type": "method"
            },
            {
              "description": "Validate a signature of data using given key.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedVerifyingSignature` if an verification process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "verifySignature(_:of:with:)",
              "params": [
                {
                  "description": "signature to be verified.",
                  "name": "signature",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "buffer containing the data signature of which is being verified.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "public ECC key in BASE58DER format used to validate data.",
                  "name": "publicKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "data validation result.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func verifySignature(\n\t_ signature: Data,\n\tof data: Data,\n\twith publicKey: String\n) throws -> Bool",
              "type": "method"
            }
          ],
          "name": "CryptoApi",
          "type": "class"
        }
      ],
      "title": "CryptoApi"
    },
    {
      "content": [
        {
          "description": "Protocol declaring cryptographic operations using Swift types.",
          "fields": [],
          "methods": [
            {
              "description": "Generates a new Private Key, which can be used for accessing PrivMX Bridge.\nThis method generates a private key using an optional base string (seed) for added randomness. The generated key is returned in WIF (Wallet Import Format).",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the key generation fails or an error occurs in the C++ layer.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "generatePrivateKey(withSeed:)",
              "params": [
                {
                  "description": "An optional seed string to generate the private key. If `nil`, a random seed is used.",
                  "name": "randomSeed",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A WIF formatted private key as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func generatePrivateKey(\n\twithSeed randomSeed: String?\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Generates a new Symmetric Key for AES encryption.\nThis method creates a 256-bit symmetric key, which can be used for AES encryption and decryption.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if key generation fails or if any errors occur in the C++ code.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "generateKeySymmetric()",
              "params": [],
              "returns": [
                {
                  "description": "A 256-bit symmetric key as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func generateKeySymmetric(\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Derives a Public Key from a given Private Key.\nThis method derives the corresponding public key from a provided private key, formatted in WIF.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the key derivation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePublicKey(from:)",
              "params": [
                {
                  "description": "The private key in WIF format (Wallet Import Format) from which the public key will be derived.",
                  "name": "keyPriv",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived public key as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func derivePublicKey(\n\tfrom keyPriv: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deterministically derives a Private Key from a password and salt.\nThis method generates a private key using a combination of a password and salt. The resulting private key is derived in a deterministic way, ensuring the same password and salt will always produce the same private key.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the derivation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePrivateKey(from:and:)",
              "params": [
                {
                  "description": "The base string (password) used for private key generation.",
                  "name": "password",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A string used as salt for private key generation.",
                  "name": "salt",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived private key in WIF format (Wallet Import Format) as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func derivePrivateKey(\n\tfrom password: String,\n\tand salt: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deterministically derives a Private Key from a password and salt.\nThis method generates a private key using a combination of a password and salt. The resulting private key is derived in a deterministic way, ensuring the same password and salt will always produce the same private key.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGeneratingPrivKey` if the derivation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "derivePrivateKey2(from:and:)",
              "params": [
                {
                  "description": "The base string (password) used for private key generation.",
                  "name": "password",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A string used as salt for private key generation.",
                  "name": "salt",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The derived private key in WIF format (Wallet Import Format) as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func derivePrivateKey2(\n\tfrom password: String,\n\tand salt: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Signs the given data using a Private Key.\nThis method creates a digital signature for the provided data using a specified private key (in WIF format).",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSigning` if the signing operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "signData(_:with:)",
              "params": [
                {
                  "description": "The data to be signed, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private key (WIF format) used for signing the data.",
                  "name": "privateKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The signed data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func signData(\n\t_ data: Data,\n\twith privateKey: String\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Encrypts data using AES symmetric encryption.\nThis method encrypts the provided data using AES encryption with a 256-bit symmetric key.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedEncrypting` if the encryption process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "encryptDataSymmetric(_:with:)",
              "params": [
                {
                  "description": "The data to be encrypted, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The 256-bit symmetric key used for AES encryption.",
                  "name": "symmetricKey",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The encrypted data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func encryptDataSymmetric(\n\t_ data: Data,\n\twith symmetricKey: Data\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Decrypts data using AES symmetric encryption.\nThis method decrypts the provided data using AES encryption with a 256-bit symmetric key.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDecrypting` if the decryption process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "decryptDataSymmetric(_:with:)",
              "params": [
                {
                  "description": "The encrypted data to be decrypted, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The 256-bit symmetric key used for AES decryption.",
                  "name": "symmetricKey",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The decrypted data as `Data`.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func decryptDataSymmetric(\n\t_ data: Data,\n\twith symmetricKey: Data\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Converts a PEM formatted key to WIF format.\nThis method converts a private key from PEM (Privacy-Enhanced Mail) format to Wallet Import Format (WIF).",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedEncrypting` if the conversion process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "convertPEMKeyToWIFKey(_:)",
              "params": [
                {
                  "description": "",
                  "name": "keyPEM",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The converted private key in WIF format as a `String`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func convertPEMKeyToWIFKey(\n\t_ keyPEM: String\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Validate a signature of data using given key.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedVerifyingSignature` if an verification process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "verifySignature(_:of:with:)",
              "params": [
                {
                  "description": "signature to be verified.",
                  "name": "signature",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "buffer containing the data signature of which is being verified.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "public ECC key in BASE58DER format used to validate data.",
                  "name": "publicKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "data validation result.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "func verifySignature(\n\t_ signature: Data,\n\tof data: Data,\n\twith publicKey: String\n) throws -> Bool",
              "type": "method"
            }
          ],
          "name": "PrivMXCrypto",
          "type": "class"
        }
      ],
      "title": "PrivMXCrypto"
    }
  ],
  "events": [
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"inboxCreated\"`, identifying the type of this event as `inboxCreated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"inboxCreated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"inbox\"`, identifying the channel associated with `InboxCreatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"inbox\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"inboxDeleted\"`, identifying the type of this event as `inboxDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"inboxDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"inbox\"`, identifying the channel associated with `InboxDeletedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"inbox\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Inbox entry is created.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"inboxEntryCreated\"`, identifying the type of this event as `inboxEntryCreated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"inboxEntryCreated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"inbox/{inboxId}/entries\"`, where `inboxId` is obtained from the `data` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"inbox/{inboxId}/entries\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "InboxEntryCreatedEvent",
          "type": "class"
        }
      ],
      "title": "InboxEntryCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Inbox entry is created.",
          "fields": [],
          "methods": [],
          "name": "InboxEntryCreatedEvent",
          "type": "class"
        }
      ],
      "title": "InboxEntryCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is deleted.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"inboxEntryDeleted\"`, identifying the type of this event as `inboxEntryDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"inboxEntryDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"inbox/{inboxId}/entries\"`, where `inboxId` is obtained from the `data` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"inbox/{inboxId}/entries\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "InboxEntryDeletedEvent",
          "type": "class"
        }
      ],
      "title": "InboxEntryDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is deleted.",
          "fields": [],
          "methods": [],
          "name": "InboxEntryDeletedEvent",
          "type": "class"
        }
      ],
      "title": "InboxEntryDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"inboxUpdated\"`, identifying the type of this event as `inboxUpdated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"inboxUpdated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"inbox\"`, identifying the channel associated with `InboxUpdatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"inbox\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            }
          ],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds the information about an event.",
          "fields": [],
          "methods": [],
          "name": "Event",
          "type": "class"
        }
      ],
      "title": "InboxUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Event that can be emmited to break the waitEvent loop.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"libBreak\"`, identifying the type of this event as `libBreak`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"libBreak\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"platform\"`, identifying the channel associated with `LibBreakEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"platform\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation always passes `nil` to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((Any?) -> Void)\n)",
              "type": "method"
            }
          ],
          "name": "LibBreakEvent",
          "type": "class"
        }
      ],
      "title": "LibBreakEvent"
    },
    {
      "content": [
        {
          "description": " Event that can be emmited to break the waitEvent loop.",
          "fields": [],
          "methods": [],
          "name": "LibBreakEvent",
          "type": "class"
        }
      ],
      "title": "LibBreakEvent"
    },
    {
      "content": [
        {
          "description": " Emitted after connection to the Bridge Server has been established",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"libConnected\"`, identifying the type of this event as `libConnected`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"libConnected\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"platform\"`, identifying the channel associated with `LibConnectedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"platform\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation always passes `nil` to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "LibConnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibConnectedEvent"
    },
    {
      "content": [
        {
          "description": " Emitted after connection to the Bridge Server has been established",
          "fields": [],
          "methods": [],
          "name": "LibConnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibConnectedEvent"
    },
    {
      "content": [
        {
          "description": " Emitted after disconnection from the Endpoint by explicit disconnect call.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the string representation of the `channel` property, identifying the type of this event.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, derived from the `channel` property.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"platform\"`, identifying the channel associated with `LibDisconnectedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"platform\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation always passes `nil` to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "LibDisconnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibDisconnectedEvent"
    },
    {
      "content": [
        {
          "description": " Emitted after disconnection from the Endpoint by explicit disconnect call.",
          "fields": [],
          "methods": [],
          "name": "LibDisconnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibDisconnectedEvent"
    },
    {
      "content": [
        {
          "description": " Emitted when connection to the PrivMX Bridge Server has been lost",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"libPlatformDisconnected\"`, identifying the type of this event as `libPlatformDisconnected`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"libPlatformDisconnected\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"platform\"`, identifying the channel associated with `LibPlatformDisconnectedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"platform\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation always passes `nil` to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping (@Sendable (_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping (@Sendable (_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "LibPlatformDisconnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibPlatformDisconnectedEvent"
    },
    {
      "content": [
        {
          "description": " Emitted when connection to the PrivMX Bridge Server has been lost",
          "fields": [],
          "methods": [],
          "name": "LibPlatformDisconnectedEvent",
          "type": "class"
        }
      ],
      "title": "LibPlatformDisconnectedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is created.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeCreated\"`, identifying the type of this event as `storeCreated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeCreated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"store\"`, identifying the channel associated with `StoreCreatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreCreatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is created.",
          "fields": [],
          "methods": [],
          "name": "StoreCreatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is deleted.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeDeleted\"`, identifying the type of this event as `storeDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"store\"`, identifying the channel associated with `StoreDeletedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreDeletedEvent",
          "type": "class"
        }
      ],
      "title": "StoreDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is deleted.",
          "fields": [],
          "methods": [],
          "name": "StoreDeletedEvent",
          "type": "class"
        }
      ],
      "title": "StoreDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is created.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeFileCreated\"`, identifying the type of this event as `storeFileCreated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeFileCreated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"store/{storeId}/files\"`, where `storeId` is obtained from the `data.info.storeId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store/{storeId}/files\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreFileCreatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is created.",
          "fields": [],
          "methods": [],
          "name": "StoreFileCreatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is deleted.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeFileDeleted\"`, identifying the type of this event as `storeFileDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeFileDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"store/{storeId}/files\"`, where `storeId` is obtained from the `data.storeId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store/{storeId}/files\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreFileDeletedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is deleted.",
          "fields": [],
          "methods": [],
          "name": "StoreFileDeletedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is updated.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeFileUpdated\"`, identifying the type of this event as `storeFileUpdated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeFileUpdated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"store/{storeId}/files\"`, where `storeId` is obtained from the `data.info.storeId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store/{storeId}/files\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreFileUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store file is updated.",
          "fields": [],
          "methods": [],
          "name": "StoreFileUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreFileUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store statistical data changes.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeStatsChanged\"`, identifying the type of this event as `storeStatsChanged`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeStatsChanged\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"store\"`, identifying the channel associated with `StoreStatsChangedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreStatsChangedEvent",
          "type": "class"
        }
      ],
      "title": "StoreStatsChangedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store statistical data changes.",
          "fields": [],
          "methods": [],
          "name": "StoreStatsChangedEvent",
          "type": "class"
        }
      ],
      "title": "StoreStatsChangedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is updated.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"storeUpdated\"`, identifying the type of this event as `storeUpdated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"storeUpdated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"store\"`, identifying the channel associated with `StoreUpdatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"store\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "StoreUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Store is updated.",
          "fields": [],
          "methods": [],
          "name": "StoreUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "StoreUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is created.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadCreated\"`, identifying the type of this event as `threadCreated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadCreated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"thread\"`, identifying the channel associated with `ThreadCreatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadCreatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is created.",
          "fields": [],
          "methods": [],
          "name": "ThreadCreatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadCreatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is deleted.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadDeleted\"`, identifying the type of this event as `threadDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"thread\"`, identifying the channel associated with `ThreadDeletedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadDeletedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is deleted.",
          "fields": [],
          "methods": [],
          "name": "ThreadDeletedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is deleted.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadMessageDeleted\"`, identifying the type of this event as `threadMessageDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadMessageDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"thread/{threadId}/messages\"`, where `threadId` is obtained from the `data.threadId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread/{threadId}/messages\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadMessageDeletedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadMessageDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is deleted.",
          "fields": [],
          "methods": [],
          "name": "ThreadMessageDeletedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadMessageDeletedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is updated.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadMessageDeleted\"`, identifying the type of this event as `threadMessageDeleted`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadMessageDeleted\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"thread/{threadId}/messages\"`, where `threadId` is obtained from the `data.threadId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread/{threadId}/messages\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadMessageUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadMessageUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is updated.",
          "fields": [],
          "methods": [],
          "name": "ThreadMessageUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadMessageUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is created.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadNewMessage\"`, identifying the type of this event as `threadNewMessage`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadNewMessage\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the string in the format `\"thread/{threadId}/messages\"`, where `threadId` is obtained from the `data.info.threadId` property.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread/{threadId}/messages\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadNewMessageEvent",
          "type": "class"
        }
      ],
      "title": "ThreadNewMessageEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread message is created.",
          "fields": [],
          "methods": [],
          "name": "ThreadNewMessageEvent",
          "type": "class"
        }
      ],
      "title": "ThreadNewMessageEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread stats change.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadStatsChanged\"`, identifying the type of this event as `threadStatsChanged`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadStatsChanged\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"thread\"`, identifying the channel associated with `ThreadStatsChangedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadStatsChangedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadStatsChangedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread stats change.",
          "fields": [],
          "methods": [],
          "name": "ThreadStatsChangedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadStatsChangedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is updated.",
          "fields": [],
          "methods": [
            {
              "description": "Returns the event type as a string.\nThis method returns the constant string `\"threadUpdated\"`, identifying the type of this event as `threadUpdated`.",
              "methodType": "static",
              "name": "typeStr()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event type, in this case, `\"threadUpdated\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func typeStr() -> String",
              "type": "method"
            },
            {
              "description": "Returns the event channel as a string.\nThis implementation returns the constant string `\"thread\"`, identifying the channel associated with `ThreadUpdatedEvent`.",
              "methodType": "method",
              "name": "getChannel()",
              "params": [],
              "returns": [
                {
                  "description": "A `String` representing the event channel, in this case, `\"thread\"`.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getChannel() -> String",
              "type": "method"
            },
            {
              "description": "Handles the event by calling the provided callback with an optional argument.\nThis implementation passes the `data` property to the callback.",
              "methodType": "method",
              "name": "handleWith(cb:)",
              "params": [
                {
                  "description": "A closure that accepts an optional `Any?` argument, representing the data to be passed when the event is handled.",
                  "name": "cb",
                  "type": {
                    "name": "@escaping ((_ data: Any?) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func handleWith(\n\tcb: @escaping ((_ data: Any?) -> Void)\n) -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadUpdatedEvent"
    },
    {
      "content": [
        {
          "description": " Holds data of event that arrives when Thread is updated.",
          "fields": [],
          "methods": [],
          "name": "ThreadUpdatedEvent",
          "type": "class"
        }
      ],
      "title": "ThreadUpdatedEvent"
    }
  ],
  "extensions": [
    {
      "content": [
        {
          "description": " &apos;Buffer&apos; provides simple string buffer implementation.",
          "fields": [],
          "methods": [
            {
              "description": "Compares two `Buffer` instances for equality.\nThis function compares the underlying byte strings of the two buffers.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `Buffer` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.core.Buffer",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `Buffer` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.core.Buffer",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if both buffers contain the same byte string, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (lhs: privmx.endpoint.core.Buffer, rhs: privmx.endpoint.core.Buffer) -> Bool",
              "type": "method"
            },
            {
              "description": "Creates a new `Buffer` instance from a `Data` object.\nThis helper function converts the provided `Data` object into a new `Buffer` instance.",
              "methodType": "static",
              "name": "from(_:)",
              "params": [
                {
                  "description": "The `Data` object to convert.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `privmx.endpoint.core.Buffer` instance.\n",
                  "type": {
                    "name": "privmx.endpoint.core.Buffer",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func from(_ data: Data) -> privmx.endpoint.core.Buffer",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the buffer.\nThis function hashes the underlying byte string of the buffer.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher)",
              "type": "method"
            },
            {
              "description": "Creates a new `Data` instance from the buffer’s underlying bytes.\nThis helper function converts the buffer into a `Data` object.",
              "methodType": "method",
              "name": "getData()",
              "params": [],
              "returns": [
                {
                  "description": "A new `Data` instance if the conversion is successful, otherwise `nil`.\n",
                  "type": {
                    "name": "Data?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getData() -> Data?",
              "type": "method"
            },
            {
              "description": "Creates a new `String` instance from the buffer’s underlying bytes.\nThis helper function converts the buffer into a UTF-8 `String`.",
              "methodType": "method",
              "name": "getString()",
              "params": [],
              "returns": [
                {
                  "description": "A new `String` instance if the conversion is successful, otherwise `nil`.\n",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getString() -> String?",
              "type": "method"
            }
          ],
          "name": "Buffer",
          "type": "class"
        }
      ],
      "title": "Buffer"
    },
    {
      "content": [
        {
          "description": "An extension for `Data` that provides helper methods for converting between `Data`\nand `privmx.endpoint.core.Buffer` as well as C++ `std.string`.",
          "fields": [],
          "methods": [
            {
              "description": "Converts the contents of this `Data` instance into a `privmx.endpoint.core.Buffer`.\nThis helper function creates a `Buffer` instance from the bytes of the `Data` object.",
              "methodType": "method",
              "name": "asBuffer()",
              "params": [],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.Buffer` instance representing the data.\n",
                  "type": {
                    "name": "privmx.endpoint.core.Buffer",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func asBuffer() -> privmx.endpoint.core.Buffer",
              "type": "method"
            },
            {
              "description": "Initializes a `Data` object from the bytes of a `privmx.endpoint.core.Buffer`.\nThis initializer converts the contents of the provided `Buffer` into a `Data` instance.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.otherFailure` if the `Buffer` is `nil`.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "init(from:)",
              "params": [
                {
                  "description": "The `privmx.endpoint.core.Buffer` to convert to `Data`.",
                  "name": "buffer",
                  "type": {
                    "name": "privmx.endpoint.core.Buffer",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(from buffer: privmx.endpoint.core.Buffer) throws",
              "type": "method"
            },
            {
              "description": "Converts the underlying `Data` to a C++ `std.string`.\nThis helper function creates a `std.string` representation of the `Data` object by interpreting the data as a C string.",
              "methodType": "method",
              "name": "rawCppString()",
              "params": [],
              "returns": [
                {
                  "description": "A `std.string` representation of the `Data` contents.\n",
                  "type": {
                    "name": "std.string",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func rawCppString() -> std.string",
              "type": "method"
            },
            {
              "description": "Initializes a `Data` object from a C++ `std.string`.\nThis initializer creates a `Data` instance by converting the provided C++ `std.string` into a UTF-8 encoded `Data` object.",
              "methodType": "method",
              "name": "init(from:)",
              "params": [
                {
                  "description": "The C++ `std.string` to convert to `Data`.",
                  "name": "str",
                  "type": {
                    "name": "std.string",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `Data` representation of the given `std.string`.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(from str: std.string)",
              "type": "method"
            }
          ],
          "name": "Data",
          "type": "class"
        }
      ],
      "title": "Data"
    },
    {
      "content": [
        {
          "description": "Protocol declaring cryptographic operations using Swift types.",
          "fields": [],
          "methods": [
            {
              "description": "Signs the provided Base64-encoded string using the given key.\nThis function converts the input string to `Data` using UTF-8 encoding, signs the data using the provided key, and returns the signature as a Base64-encoded string.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSigning` if the string cannot be encoded to `Data` or the signing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "signBase64(data:key:)",
              "params": [
                {
                  "description": "The input string to be signed, which will be converted to `Data` using UTF-8 encoding.",
                  "name": "data",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The key used to sign the input data.",
                  "name": "key",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A Base64-encoded string representing the signature of the input data.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func signBase64(\n\tdata: String,\n\tkey: String\n) throws -> String",
              "type": "method"
            }
          ],
          "name": "PrivMXCrypto",
          "type": "class"
        }
      ],
      "title": "PrivMXCryptoExtensions"
    },
    {
      "content": [
        {
          "description": "An extension for `StringVector` to conform to the `Hashable` protocol.\nThis extension allows comparing two `StringVector` instances and generating\na hash value for usage in hash-based collections, such as dictionaries or sets.",
          "fields": [],
          "methods": [
            {
              "description": "Compares two `StringVector` instances for equality.\nThis function compares the contents of two `StringVector` instances by calling the `privmx.compareVectors` function.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `StringVector` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.StringVector",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `StringVector` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.StringVector",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if both vectors are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (lhs: privmx.StringVector, rhs: privmx.StringVector) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `StringVector`.\nThis function generates the hash based on the `count` of the vector.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher)",
              "type": "method"
            }
          ],
          "name": "privmx.StringVector",
          "type": "class"
        }
      ],
      "title": "StringVector"
    }
  ],
  "inboxes": [
    {
      "content": [
        {
          "description": "FileDataSource using an internal `Data` buffer",
          "fields": [
            {
              "description": "Declared private (to be encrypted) metadata of the File\n\n",
              "name": "privateMeta",
              "snippet": "public let privateMeta: Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared public metadata of the File\n\n",
              "name": "publicMeta",
              "snippet": "public let publicMeta: Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared size of the File\n\n",
              "name": "size",
              "snippet": "public let size: Int64",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "Signifies that there are still bytes that have not been retrieved\n\n",
              "name": "hasDataLeft",
              "snippet": "public var hasDataLeft: Bool",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init(buffer:privateMeta:publicMeta:size:)",
              "params": [
                {
                  "description": "",
                  "name": "buffer",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tbuffer: Data,\n\tprivateMeta: Data,\n\tpublicMeta: Data,\n\tsize: Int64\n)",
              "type": "method"
            },
            {
              "description": "Advances the internal buffer by `chunkSize` bytes.",
              "methodType": "method",
              "name": "getNextChunk(ofSize:)",
              "params": [
                {
                  "description": "amount of bytes to be retrieved",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "First `chunkSize` bytes of the Internal buffer\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func getNextChunk(\n\tofSize chunkSize: Int64\n) -> Data",
              "type": "method"
            },
            {
              "description": "This method does nothing",
              "methodType": "method",
              "name": "close()",
              "params": [],
              "snippet": "public func close() throws",
              "type": "method"
            }
          ],
          "name": "BufferDataSource",
          "type": "struct"
        }
      ],
      "title": "BufferDataSource"
    },
    {
      "content": [
        {
          "description": "",
          "fields": [
            {
              "description": "Declared private (to be encrypted) metadata of the File\n",
              "name": "privateMeta",
              "snippet": "var privateMeta:Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared public metadata of the File\n",
              "name": "publicMeta",
              "snippet": "var publicMeta:Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared size of the File\n",
              "name": "size",
              "snippet": "var size:Int64",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "Signifies that there are still bytes that have not been retrieved\n",
              "name": "hasDataLeft",
              "snippet": "var hasDataLeft:Bool",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Retrieves up to `chunkSize`bytes from the data source.",
              "methodType": "method",
              "name": "getNextChunk(ofSize:)",
              "params": [
                {
                  "description": "the size of a chunk to retrieve from the source",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "next `chunkSize` bytes from the source\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "mutating func getNextChunk(\n\tofSize chunkSize:Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Attempts to close the data source.\nCalling this method makes sense if the source is a file on disc.",
              "methodType": "method",
              "name": "close()",
              "params": [],
              "snippet": "mutating func close(\n) throws",
              "type": "method"
            }
          ],
          "name": "FileDataSource",
          "type": "class"
        }
      ],
      "title": "FileDataSource"
    },
    {
      "content": [
        {
          "description": "FileSoure getting data using a Swift FileHandle.",
          "fields": [
            {
              "description": "Declared private (to be encrypted) metadata of the File\n\n",
              "name": "privateMeta",
              "snippet": "public var privateMeta: Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared public metadata of the File\n\n",
              "name": "publicMeta",
              "snippet": "public var publicMeta: Data",
              "type": {
                "name": "Data",
                "optional": false
              }
            },
            {
              "description": "Declared size of the File\n\n",
              "name": "size",
              "snippet": "public var size: Int64",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "Signifies that there are still bytes that have not been retrieved\n\n",
              "name": "hasDataLeft",
              "snippet": "public private(set) var hasDataLeft: Bool = true",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init(file:privateMeta:publicMeta:size:hasDataLeft:)",
              "params": [
                {
                  "description": "",
                  "name": "file",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "hasDataLeft",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public init(\n\tfile: FileHandle,\n\tprivateMeta: Data,\n\tpublicMeta: Data,\n\tsize: Int64,\n\thasDataLeft: Bool\n)",
              "type": "method"
            },
            {
              "description": "Retrieves up to `chunkSize`bytes from the data source.\n",
              "methodType": "method",
              "name": "getNextChunk(ofSize:)",
              "params": [
                {
                  "description": "the size of a chunk to retrieve from the source",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "next `chunkSize` bytes from the source\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public mutating func getNextChunk(\n\tofSize chunkSize: Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Attempts to close the data source.\nCalling this method makes sense if the source is a file on disc.\n",
              "methodType": "method",
              "name": "close()",
              "params": [],
              "snippet": "public mutating func close(\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "FileHandleDataSource",
          "type": "struct"
        }
      ],
      "title": "FileHandleDataSource"
    },
    {
      "content": [
        {
          "description": "Swift wrapper for `privmx.NativeInboxApiWrapper`, providing methods to manage Inboxes and entries within PrivMX platform.",
          "fields": [],
          "methods": [
            {
              "description": "Creates an inbox in a specified context for a group of users, managed by a set of managers.\nThis method creates an inbox associated with a given context ID, assigning users and managers to it, while attaching metadata and configuration for files if needed.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox creation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createInbox(in:for:managedBy:withPublicMeta:withPrivateMeta:withFilesConfig:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier for the context in which the inbox is being created.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` objects representing the users who will have access to the inbox.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` objects representing the managers responsible for managing the inbox.",
                  "name": "managaers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata to be associated with the inbox, provided as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata to be associated with the inbox, provided as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Optional configuration for managing files in the inbox, provided as `FilesConfig`.",
                  "name": "filesConfig",
                  "type": {
                    "name": "privmx.endpoint.inbox.FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created inbox.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func createInbox(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managaers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\twithFilesConfig filesConfig: privmx.endpoint.inbox.FilesConfig?,\n\twithPolicies policies: privmx.endpoint.core.ContainerPolicyWithoutItem? = nil\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing inbox by replacing its users, managers, metadata, and configuration with new values.\nThis method updates the specified inbox, replacing its current users, managers, and metadata (both public and private) with the new ones provided. It also allows updating the files configuration, optionally forcing the update and generating a new key if necessary.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the update fails or if any of the data conversion processes fail.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateInbox(_:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:replacingFilesConfig:atVersion:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to be updated, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` representing the new users for the inbox.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` representing the new managers for the inbox.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata associated with the inbox, passed as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata associated with the inbox, passed as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Optional new configuration for managing files in the inbox, provided as `FilesConfig`.",
                  "name": "filesConfig",
                  "type": {
                    "name": "privmx.endpoint.inbox.FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the inbox, provided as an `Int64`. This is used for version control to ensure updates are applied correctly.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A `Bool` indicating whether the update should be forced, even if there are version conflicts.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A `Bool` indicating whether a new key should be generated for the inbox during the update.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateInbox(\n\t_ inboxId: String,\n\treplacingUsers users: [privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers: [privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingFilesConfig filesConfig: privmx.endpoint.inbox.FilesConfig?,\n\tatVersion version: Int64,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicyWithoutItem? = nil\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Retrieves the inbox associated with the given inbox ID.\nThis method fetches an inbox based on its unique identifier, returning detailed information about the inbox, such as its users, managers, and metadata.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox could not be retrieved, such as if the inbox ID is invalid or the request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getInbox(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to retrieve, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `Inbox` object representing the detailed state of the requested inbox.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.Inbox",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getInbox(\n\t_ inboxId: String\n) throws -> privmx.endpoint.inbox.Inbox",
              "type": "method"
            },
            {
              "description": "Lists all inboxes in the specified context, based on the given paging query.\nThis method retrieves a list of inboxes associated with a specific context, with the results potentially being paginated according to the provided `PagingQuery`.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox listing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listInboxes(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which inboxes will be listed.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The query object that defines the pagination settings, such as limit, offset (skip) and sortOrder.",
                  "name": "pagingQuery",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxList` object that contains the list of inboxes and associated pagination details.\n",
                  "type": {
                    "name": "privmx.InboxList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listInboxes(\n\tfrom contextId: String,\n\tbasedOn pagingQuery: privmx.endpoint.core.PagingQuery\n) throws -> privmx.InboxList",
              "type": "method"
            },
            {
              "description": "Retrieves the public view of the specified inbox.\nThis method fetches the public view of an inbox, which  includes public metadata that can be accessed without privileged access.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the public view could not be retrieved, such as if the inbox ID is invalid or the request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getInboxPublicView(for:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to retrieve the public view for, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxPublicView` object containing the public metadata and details of the requested inbox.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.InboxPublicView",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getInboxPublicView(\n\tfor inboxId: String\n) throws -> privmx.endpoint.inbox.InboxPublicView",
              "type": "method"
            },
            {
              "description": "Deletes the inbox with the specified ID.\nThis method removes the inbox identified by the given inbox ID, effectively deleting all associated data.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the deletion process fails, such as if the inbox ID is invalid or the request cannot be completed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteInbox(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to delete, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteInbox(\n\t_ inboxId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Prepares an entry to be sent to the specified inbox, optionally attaching file handles.\nThis method prepares a new entry to be sent to the inbox identified by `inboxId`. The entry can contain metadata and optional files, represented by `InboxFileHandle` objects. A private key may be provided for encryption purposes.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry preparation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "prepareEntry(in:containing:attaching:as:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to which the entry will be sent, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The main content of the entry, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `InboxFileHandle` objects representing any files that should be attached to the entry.",
                  "name": "inboxFilesHandles",
                  "type": {
                    "name": "[privmx.InboxFileHandle]",
                    "optional": false
                  }
                },
                {
                  "description": "An optional private key for encryption, provided as a `String`. Otherwise random key is used.",
                  "name": "userPrivateKey",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxHandle` object representing the prepared entry that can be sent.\n",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func prepareEntry(in inboxId: String,\n\t\t\t\t\t\t containing data: Data,\n\t\t\t\t\t\t attaching inboxFilesHandles: [privmx.InboxFileHandle],\n\t\t\t\t\t\t as userPrivateKey: String?\n) throws -> privmx.InboxHandle",
              "type": "method"
            },
            {
              "description": "Sends a previously prepared entry to its corresponding inbox.\nThis method sends an entry that has been prepared using `prepareEntry`. The `InboxHandle` must be passed, which represents the entry that was previously prepared for submission.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry cannot be sent, such as if the handle is invalid or the network request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "sendEntry(to:)",
              "params": [
                {
                  "description": "The handle of the prepared entry to be sent, provided as an `InboxHandle`.",
                  "name": "inboxHandle",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func sendEntry(\n\tto inboxHandle:privmx.InboxHandle\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Creates a file handle for attaching files to an inbox entry.\nThis method prepares a file handle, including public and private metadata, as well as the file size. The file handle is used when attaching files to an inbox entry before sending.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file handle creation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createFileHandle(withPublicMeta:withPrivateMeta:forSize:)",
              "params": [
                {
                  "description": "Public metadata for the file, provided as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata for the file, provided as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file in bytes, provided as an `Int64`.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxFileHandle` object representing the prepared file that can be attached to an inbox entry.\n",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func createFileHandle(\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tforSize fileSize: Int64\n) throws -> privmx.InboxFileHandle",
              "type": "method"
            },
            {
              "description": "Writes a chunk of data to a file associated with a prepared inbox entry.\nThis method uploads a chunk of data to a file that is part of a prepared inbox entry. The `InboxFileHandle` represents the file, and the `InboxHandle` represents the entry being prepared.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file write operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeToFile(_:in:uploading:)",
              "params": [
                {
                  "description": "The handle of the file to which data will be written, provided as an `InboxFileHandle`.",
                  "name": "inboxFileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The handle of the inbox entry that the file is associated with, provided as an `InboxHandle`.",
                  "name": "inboxHandle",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The chunk of data to be uploaded, provided as `Data`.",
                  "name": "dataChunk",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func writeToFile(\n\t_ inboxFileHandle: privmx.InboxFileHandle,\n\tin inboxHandle: privmx.InboxHandle,\n\tuploading dataChunk: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Reads the content of a specific inbox entry identified by its entry ID.\nThis method retrieves the content and metadata of an inbox entry based on its unique identifier. Read access to the Inbox is required to successfully read its content.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry cannot be read, such as if the entry ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readEntry(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox entry to read, provided as a `String`.",
                  "name": "inboxEntryId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxEntry` object representing the full content and metadata of the specified entry.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.InboxEntry",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func readEntry(\n\t_ inboxEntryId: String\n) throws -> privmx.endpoint.inbox.InboxEntry",
              "type": "method"
            },
            {
              "description": "Lists all entries in the specified inbox, based on the provided paging query.\nThis method retrieves a list of inbox entries associated with a specific inbox ID, with the results potentially being paginated according to the provided `PagingQuery`.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the listing process fails, such as if the inbox ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listEntries(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox from which entries will be listed, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The query object that defines the pagination settings, such as limit and offset.",
                  "name": "pagingQuery",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxEntryList` object containing the list of entries and associated pagination details.\n",
                  "type": {
                    "name": "privmx.InboxEntryList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listEntries(\n\tfrom inboxId: String,\n\tbasedOn pagingQuery: privmx.endpoint.core.PagingQuery\n) throws -> privmx.InboxEntryList",
              "type": "method"
            },
            {
              "description": "Deletes a specific inbox entry identified by its entry ID.\nThis method removes the inbox entry identified by the provided entry ID, deleting its content and metadata. Full access to the inbox is required to successfully perform the deletion.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the deletion process fails, such as if the entry ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteEntry(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox entry to delete, provided as a `String`.",
                  "name": "inboxEntryId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteEntry(\n\t_ inboxEntryId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Opens a file associated with the given file ID and returns a file handle.\nThis method opens a file based on its unique file ID and returns a handle that can be used to read from or write to the file. The file must be closed using `closeFile` after operations are completed.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file cannot be opened, such as if the file ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "openFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the file to open, provided as a `String`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxFileHandle` object representing the opened file, which can be used for further operations.\n",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func openFile(\n\t_ fileId: String\n) throws -> privmx.InboxFileHandle",
              "type": "method"
            },
            {
              "description": "Moves the file pointer to a specified position within a file.\nThis method adjusts the file pointer to the given position in a file associated with the provided file handle. It is useful for reading from or writing to a specific part of a file.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if seeking within the file fails, such as if the file handle is invalid or the position is out of bounds.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "seekInFile(withHandle:toPosition:)",
              "params": [
                {
                  "description": "The handle of the file to seek in, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The position (in bytes) to move the file pointer to, provided as an `Int64`.",
                  "name": "position",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func seekInFile(\n\twithHandle fileHandle:privmx.InboxFileHandle,\n\ttoPosition position:Int64\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Reads a specified number of bytes from an open file.\nThis method reads up to `length` bytes from a file, starting from the current file pointer position, and returns the data as a `Data` object.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the read operation fails, such as if the file handle is invalid or the read exceeds file bounds.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readFromFile(withHandle:length:)",
              "params": [
                {
                  "description": "The handle of the file to read from, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The number of bytes to read from the file, provided as an `Int64`.",
                  "name": "length",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `Data` object containing the bytes read from the file.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func readFromFile(\n\twithHandle fileHandle: privmx.InboxFileHandle,\n\tlength: Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Closes an open file associated with the given file handle.\nThis method closes a file that was opened using `openFile`. It ensures that all pending changes are written and that the file handle is released.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file cannot be closed, such as if the file handle is invalid or already closed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeFile(withHandle:)",
              "params": [
                {
                  "description": "The handle of the file to close, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the result or status after closing the file.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func closeFile(\n\twithHandle fileHandle: privmx.InboxFileHandle\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Subscribes to receive entry events for a specific inbox.\nThis method subscribes to receive notifications or events related to entries within the specified inbox. Once subscribed, the client will be notified of any changes or updates to the entries in the inbox.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the subscription process fails, such as if the inbox ID is invalid or the subscription cannot be established.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForEntryEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to subscribe to for entry events, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func subscribeForEntryEvents(\n\tin inboxId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from receiving entry events for a specific inbox.\nThis method unsubscribes the client from receiving notifications or events related to entries within the specified inbox. It stops further event notifications for that inbox.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the unsubscribing process fails, such as if the inbox ID is invalid or the unsubscribing cannot be completed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromEntryEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to unsubscribe from entry events, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func unsubscribeFromEntryEvents(\n\tin inboxId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "InboxApi",
          "type": "class"
        }
      ],
      "title": "InboxApi"
    },
    {
      "content": [
        {
          "description": "Class wrapping the process of creating and uploading an Inbox Entry.",
          "fields": [
            {
              "description": "Recommended chunk size for file transfers, suggested by the endpoint library.\n",
              "name": "RecommendedChunkSize",
              "snippet": "public static let RecommendedChunkSize :Int64 = 131072",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "The current state\n",
              "name": "state",
              "snippet": "public private(set) var state : InboxEntryHandlerState",
              "type": {
                "name": "InboxEntryHandlerState",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Creates a new `InboxEntryHandler` for sending an entry to an Inbox.\nIf fileSources is an empty array, the created handler will be in `.filesSent`, otherwise it will be in `.prepared`.",
              "methodType": "static",
              "name": "prepareInboxEntryHandler(using:in:containing:sending:as:)",
              "params": [
                {
                  "description": "provider of `PrivMXInbox` API",
                  "name": "inboxApi",
                  "type": {
                    "name": "any PrivMXInbox",
                    "optional": false
                  }
                },
                {
                  "description": "Id of the Inbox in which the Entry is supposed to appear",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "arbitrary data that will appear as a mesasage in the Inbox",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "list of sources of data for Files attached to the Entry",
                  "name": "fileSources",
                  "type": {
                    "name": "[any FileDataSource]",
                    "optional": false
                  }
                },
                {
                  "description": "Optional identity of the Sender.",
                  "name": "userPrivateKey",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "an instance of `InboxEntryHandler`\n",
                  "type": {
                    "name": "InboxEntryHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func prepareInboxEntryHandler(\n\tusing inboxApi: any PrivMXInbox,\n\tin inboxId:String,\n\tcontaining data:Data,\n\tsending fileSources: [any FileDataSource],\n\tas userPrivateKey:String?\n) throws -> InboxEntryHandler",
              "type": "method"
            },
            {
              "description": "Uploads the files associated with the Entry.",
              "methodType": "method",
              "name": "sendFiles()",
              "params": [],
              "returns": [
                {
                  "description": "the state of the Handler\n",
                  "type": {
                    "name": "InboxEntryHandlerState",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func sendFiles(\n) throws -> InboxEntryHandlerState",
              "type": "method"
            },
            {
              "description": "Aborts sending of the files, if they haven’t been sent already",
              "methodType": "method",
              "name": "cancel()",
              "params": [],
              "snippet": "public func cancel(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Sends the entry, completing the process and adding it to the Inbox.",
              "methodType": "method",
              "name": "sendEntry()",
              "params": [],
              "snippet": "public func sendEntry(\n) throws",
              "type": "method"
            }
          ],
          "name": "InboxEntryHandler",
          "type": "class"
        }
      ],
      "title": "InboxEntryHandler"
    },
    {
      "content": [
        {
          "description": "State of the `InboxEntryHandler`",
          "fields": [
            {
              "description": "Ready to start uploading files",
              "name": "prepared",
              "snippet": "case prepared",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "All Files have been uploaded and the Entry can be sent",
              "name": "filesSent",
              "snippet": "case filesSent",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Entry has been sent succesfully",
              "name": "sent",
              "snippet": "case sent",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "Cancelled by user",
              "name": "aborted",
              "snippet": "case aborted",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "An error occured",
              "name": "error",
              "snippet": "case error",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "InboxEntryHandlerState",
          "type": "enum"
        }
      ],
      "title": "InboxEntryHandler"
    },
    {
      "content": [
        {
          "description": "A class providing a set of tools using SwiftNIO for uploading and downloading files with the use of `PrivMXInbox` from PrivMX Endpoint.",
          "fields": [
            {
              "description": "Recommended chunk size for file transfers, suggested by the endpoint library.\n",
              "name": "RecommendedChunkSize",
              "snippet": "public static let RecommendedChunkSize :Int64 = 131072",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "InboxFileHandle\n",
              "name": "fileHandle",
              "snippet": "public let fileHandle:privmx.InboxFileHandle",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "The mode of this handler\n",
              "name": "mode",
              "snippet": "public let mode:InboxFileHandlerMode",
              "type": {
                "name": "InboxFileHandlerMode",
                "optional": false
              }
            },
            {
              "description": "\n",
              "name": "hasDataLeft",
              "snippet": "public private(set) var hasDataLeft:Bool = true",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Creates a new handler for downloading a file to an internal buffer.\nThis method allows downloading a file from the `PrivMXStore` directly into memory (a buffer). To retrieve the buffer after the download, call `getBuffer()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getInboxFileReaderToBuffer(readFrom:with:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the file to be downloaded from the `PrivMXStore`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "inboxApi",
                  "type": {
                    "name": "any PrivMXInbox",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for downloading. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for downloading the file into the buffer.\n",
                  "type": {
                    "name": "InboxFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getInboxFileReaderToBuffer(\n\treadFrom fileId:String,\n\twith inboxApi:any PrivMXInbox,\n\tchunkSize: Int64 = InboxFileHandler.RecommendedChunkSize\n) throws -> InboxFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a new handler for downloading a file to a local File.\nThis method allows downloading a file from the `PrivMXStore` directly into memory (a buffer). To retrieve the buffer after the download, call `getBuffer()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getInboxFileReaderToFile(readFrom:with:to:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the file to be downloaded from the `PrivMXStore`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "inboxApi",
                  "type": {
                    "name": "any PrivMXInbox",
                    "optional": false
                  }
                },
                {
                  "description": "SwiftNIO handle to a file on the device",
                  "name": "localFile",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for downloading. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for downloading the File into the local file.\n",
                  "type": {
                    "name": "InboxFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getInboxFileReaderToFile(\n\treadFrom fileId:String,\n\twith inboxApi:any PrivMXInbox,\n\tto localFile:FileHandle,\n\tchunkSize: Int64 = InboxFileHandler.RecommendedChunkSize\n) throws -> InboxFileHandler",
              "type": "method"
            },
            {
              "description": "Sets the Inbox handle for uploading the file.",
              "methodType": "method",
              "name": "setInboxHandle(_:)",
              "params": [
                {
                  "description": "Inbox handle received by preparing an Inbox Entry",
                  "name": "handle",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func setInboxHandle(\n\t_ handle: privmx.InboxHandle\n) -> Void",
              "type": "method"
            },
            {
              "description": "Provides access to the data buffer of the processed file.",
              "methodType": "method",
              "name": "getBuffer()",
              "params": [],
              "returns": [
                {
                  "description": "The processed data buffer.\n",
                  "type": {
                    "name": "Data?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getBuffer(\n) -> Data?",
              "type": "method"
            },
            {
              "description": "Closes local `FileDataSource`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if closing the source fails or the mode was incorrect.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeSource()",
              "params": [],
              "snippet": "public func closeSource(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Closes remote File.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if closing the remote File fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeRemote()",
              "params": [],
              "returns": [
                {
                  "description": "Id of the remote File.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func closeRemote(\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Downloads the next chunk and adds it to either the local file or the internal buffer, depending on the mode.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file read operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readChunk(onChunkDownloaded:)",
              "params": [
                {
                  "description": "A closure called when a chunk is downloaded, passing the byte count of the chunk.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "@escaping ((Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func readChunk(\n\tonChunkDownloaded: @escaping ((Int)->Void) = {byteCount in}\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Uploads the next chunk of data from the local file or buffer to the remote file.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file write operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeChunk(onChunkUploaded:)",
              "params": [
                {
                  "description": "A closure called when a chunk is uploaded, passing the byte count of the chunk.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "@escaping ((Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func writeChunk(\n\tonChunkUploaded: @escaping ((Int) -> Void) = {byteCount in}\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "InboxFileHandler",
          "type": "class"
        }
      ],
      "title": "InboxFileHandler"
    },
    {
      "content": [
        {
          "description": "",
          "fields": [
            {
              "description": "",
              "name": "write",
              "snippet": "case write",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "readToBuffer",
              "snippet": "case readToBuffer",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "readToFile",
              "snippet": "case readToBuffer, readToFile",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "InboxFileHandlerMode",
          "type": "enum"
        }
      ],
      "title": "InboxFileHandler"
    },
    {
      "content": [
        {
          "description": "Protocol declaring methods of InboxApi using Swift types, enabling interaction with PrivMX Inboxes and Entries, as well as Files assigned to them.",
          "fields": [],
          "methods": [
            {
              "description": "Creates an inbox in a specified context for a group of users, managed by a set of managers.\nThis method creates an inbox associated with a given context ID, assigning users and managers to it, while attaching metadata and configuration for files if needed.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox creation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createInbox(in:for:managedBy:withPublicMeta:withPrivateMeta:withFilesConfig:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier for the context in which the inbox is being created.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` objects representing the users who will have access to the inbox.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` objects representing the managers responsible for managing the inbox.",
                  "name": "managaers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata to be associated with the inbox, provided as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata to be associated with the inbox, provided as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Optional configuration for managing files in the inbox, provided as `FilesConfig`.",
                  "name": "filesConfig",
                  "type": {
                    "name": "privmx.endpoint.inbox.FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created inbox.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func createInbox(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managaers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\twithFilesConfig filesConfig: privmx.endpoint.inbox.FilesConfig?,\n\twithPolicies policies: privmx.endpoint.core.ContainerPolicyWithoutItem?\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing inbox by replacing its users, managers, metadata, and configuration with new values.\nThis method updates the specified inbox, replacing its current users, managers, and metadata (both public and private) with the new ones provided. It also allows updating the files configuration, optionally forcing the update and generating a new key if necessary.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the update fails or if any of the data conversion processes fail.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateInbox(_:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:replacingFilesConfig:atVersion:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to be updated, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` representing the new users for the inbox.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `UserWithPubKey` representing the new managers for the inbox.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata associated with the inbox, passed as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata associated with the inbox, passed as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Optional new configuration for managing files in the inbox, provided as `FilesConfig`.",
                  "name": "filesConfig",
                  "type": {
                    "name": "privmx.endpoint.inbox.FilesConfig?",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the inbox, provided as an `Int64`. This is used for version control to ensure updates are applied correctly.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A `Bool` indicating whether the update should be forced, even if there are version conflicts.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A `Bool` indicating whether a new key should be generated for the inbox during the update.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicyWithoutItem?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateInbox(\n\t_ inboxId: String,\n\treplacingUsers users: [privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers: [privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingFilesConfig filesConfig: privmx.endpoint.inbox.FilesConfig?,\n\tatVersion version: Int64,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicyWithoutItem?\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Retrieves the inbox associated with the given inbox ID.\nThis method fetches an inbox based on its unique identifier, returning detailed information about the inbox, such as its users, managers, and metadata.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox could not be retrieved, such as if the inbox ID is invalid or the request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getInbox(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to retrieve, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `Inbox` object representing the detailed state of the requested inbox.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.Inbox",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getInbox(\n\t_ inboxId: String\n) throws -> privmx.endpoint.inbox.Inbox",
              "type": "method"
            },
            {
              "description": "Lists all inboxes in the specified context, based on the given paging query.\nThis method retrieves a list of inboxes associated with a specific context, with the results potentially being paginated according to the provided `PagingQuery`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the inbox listing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listInboxes(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which inboxes will be listed.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The query object that defines the pagination settings, such as limit, offset (skip) and sortOrder.",
                  "name": "pagingQuery",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxList` object that contains the list of inboxes and associated pagination details.\n",
                  "type": {
                    "name": "privmx.InboxList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listInboxes(\n\tfrom contextId: String,\n\tbasedOn pagingQuery: privmx.endpoint.core.PagingQuery\n) throws -> privmx.InboxList",
              "type": "method"
            },
            {
              "description": "Retrieves the public view of the specified inbox.\nThis method fetches the public view of an inbox, which  includes public metadata that can be accessed without privileged access.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the public view could not be retrieved, such as if the inbox ID is invalid or the request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getInboxPublicView(for:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to retrieve the public view for, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxPublicView` object containing the public metadata and details of the requested inbox.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.InboxPublicView",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getInboxPublicView(\n\tfor inboxId:String\n) throws -> privmx.endpoint.inbox.InboxPublicView",
              "type": "method"
            },
            {
              "description": "Deletes the inbox with the specified ID.\nThis method removes the inbox identified by the given inbox ID, effectively deleting all associated data.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the deletion process fails, such as if the inbox ID is invalid or the request cannot be completed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteInbox(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to delete, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteInbox(\n\t_ inboxId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Prepares an entry to be sent to the specified inbox, optionally attaching file handles.\nThis method prepares a new entry to be sent to the inbox identified by `inboxId`. The entry can contain metadata and optional files, represented by `InboxFileHandle` objects. A private key may be provided for encryption purposes.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry preparation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "prepareEntry(in:containing:attaching:as:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to which the entry will be sent, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The main content of the entry, provided as `Data`.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "An array of `InboxFileHandle` objects representing any files that should be attached to the entry.",
                  "name": "inboxFilesHandles",
                  "type": {
                    "name": "[privmx.InboxFileHandle]",
                    "optional": false
                  }
                },
                {
                  "description": "An optional private key for encryption, provided as a `String`. Otherwise random key is used.",
                  "name": "userPrivateKey",
                  "type": {
                    "name": "String?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxHandle` object representing the prepared entry that can be sent.\n",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func prepareEntry(\n\tin inboxId: String,\n\tcontaining data: Data,\n\tattaching inboxFilesHandles: [privmx.InboxFileHandle],\n\tas userPrivateKey: String?\n) throws -> privmx.InboxHandle",
              "type": "method"
            },
            {
              "description": "Sends a previously prepared entry to its corresponding inbox.\nThis method sends an entry that has been prepared using `prepareEntry`. The `InboxHandle` must be passed, which represents the entry that was previously prepared for submission.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry cannot be sent, such as if the handle is invalid or the network request fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "sendEntry(to:)",
              "params": [
                {
                  "description": "The handle of the prepared entry to be sent, provided as an `InboxHandle`.",
                  "name": "inboxHandle",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func sendEntry(\n\tto inboxHandle: privmx.InboxHandle\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Reads the content of a specific inbox entry identified by its entry ID.\nThis method retrieves the content and metadata of an inbox entry based on its unique identifier. Read access to the Inbox is required to successfully read its content.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the entry cannot be read, such as if the entry ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readEntry(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox entry to read, provided as a `String`.",
                  "name": "inboxEntryId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxEntry` object representing the full content and metadata of the specified entry.\n",
                  "type": {
                    "name": "privmx.endpoint.inbox.InboxEntry",
                    "optional": false
                  }
                }
              ],
              "snippet": "func readEntry(\n\t_ inboxEntryId: String\n) throws -> privmx.endpoint.inbox.InboxEntry",
              "type": "method"
            },
            {
              "description": "Lists all entries in the specified inbox, based on the provided paging query.\nThis method retrieves a list of inbox entries associated with a specific inbox ID, with the results potentially being paginated according to the provided `PagingQuery`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the listing process fails, such as if the inbox ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listEntries(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox from which entries will be listed, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The query object that defines the pagination settings, such as limit and offset.",
                  "name": "pagingQuery",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxEntryList` object containing the list of entries and associated pagination details.\n",
                  "type": {
                    "name": "privmx.InboxEntryList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listEntries(\n\tfrom inboxId: String,\n\tbasedOn pagingQuery: privmx.endpoint.core.PagingQuery\n) throws -> privmx.InboxEntryList",
              "type": "method"
            },
            {
              "description": "Deletes a specific inbox entry identified by its entry ID.\nThis method removes the inbox entry identified by the provided entry ID, deleting its content and metadata. Full access to the inbox is required to successfully perform the deletion.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the deletion process fails, such as if the entry ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteEntry(_:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox entry to delete, provided as a `String`.",
                  "name": "inboxEntryId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteEntry(\n\t_ inboxEntryId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Creates a file handle for attaching files to an inbox entry.\nThis method prepares a file handle, including public and private metadata, as well as the file size. The file handle is used when attaching files to an inbox entry before sending.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file handle creation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createFileHandle(withPublicMeta:withPrivateMeta:forSize:)",
              "params": [
                {
                  "description": "Public metadata for the file, provided as `Data`.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata for the file, provided as `Data`.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file in bytes, provided as an `Int64`.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxFileHandle` object representing the prepared file that can be attached to an inbox entry.\n",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func createFileHandle(\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tforSize fileSize: Int64\n) throws -> privmx.InboxFileHandle",
              "type": "method"
            },
            {
              "description": "Writes a chunk of data to a file associated with a prepared inbox entry.\nThis method uploads a chunk of data to a file that is part of a prepared inbox entry. The `InboxFileHandle` represents the file, and the `InboxHandle` represents the entry being prepared.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file write operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeToFile(_:in:uploading:)",
              "params": [
                {
                  "description": "The handle of the file to which data will be written, provided as an `InboxFileHandle`.",
                  "name": "inboxFileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The handle of the inbox entry that the file is associated with, provided as an `InboxHandle`.",
                  "name": "inboxHandle",
                  "type": {
                    "name": "privmx.InboxHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The chunk of data to be uploaded, provided as `Data`.",
                  "name": "dataChunk",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func writeToFile(\n\t_ inboxFileHandle: privmx.InboxFileHandle,\n\tin inboxHandle: privmx.InboxHandle,\n\tuploading dataChunk: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Opens a file associated with the given file ID and returns a file handle.\nThis method opens a file based on its unique file ID and returns a handle that can be used to read from or write to the file. The file must be closed using `closeFile` after operations are completed.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file cannot be opened, such as if the file ID is invalid or access is restricted.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "openFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the file to open, provided as a `String`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "An `InboxFileHandle` object representing the opened file, which can be used for further operations.\n",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func openFile(\n\t_ fileId: String\n) throws -> privmx.InboxFileHandle",
              "type": "method"
            },
            {
              "description": "Reads a specified number of bytes from an open file.\nThis method reads up to `length` bytes from a file, starting from the current file pointer position, and returns the data as a `Data` object.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the read operation fails, such as if the file handle is invalid or the read exceeds file bounds.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readFromFile(withHandle:length:)",
              "params": [
                {
                  "description": "The handle of the file to read from, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The number of bytes to read from the file, provided as an `Int64`.",
                  "name": "length",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `Data` object containing the bytes read from the file.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func readFromFile(\n\twithHandle fileHandle: privmx.InboxFileHandle,\n\tlength: Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Moves the file pointer to a specified position within a file.\nThis method adjusts the file pointer to the given position in a file associated with the provided file handle. It is useful for reading from or writing to a specific part of a file.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if seeking within the file fails, such as if the file handle is invalid or the position is out of bounds.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "seekInFile(withHandle:toPosition:)",
              "params": [
                {
                  "description": "The handle of the file to seek in, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The position (in bytes) to move the file pointer to, provided as an `Int64`.",
                  "name": "position",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func seekInFile(\n\twithHandle fileHandle: privmx.InboxFileHandle,\n\ttoPosition position: Int64\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Closes an open file associated with the given file handle.\nThis method closes a file that was opened using `openFile`. It ensures that all pending changes are written and that the file handle is released.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the file cannot be closed, such as if the file handle is invalid or already closed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeFile(withHandle:)",
              "params": [
                {
                  "description": "The handle of the file to close, provided as an `InboxFileHandle`.",
                  "name": "fileHandle",
                  "type": {
                    "name": "privmx.InboxFileHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the result or status after closing the file.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func closeFile(\n\twithHandle fileHandle: privmx.InboxFileHandle\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Subscribes to receive general inbox events.\nThis method subscribes to receive notifications or events related to all inboxes.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the subscription process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForInboxEvents()",
              "params": [],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func subscribeForInboxEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from receiving general inbox events.\nThis method unsubscribes the client from receiving notifications or events related to inboxes.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the unsubscribing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromInboxEvents()",
              "params": [],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func unsubscribeFromInboxEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to receive entry events for a specific inbox.\nThis method subscribes to receive notifications or events related to entries within the specified inbox. Once subscribed, the client will be notified of any changes or updates to the entries in the inbox.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the subscription process fails, such as if the inbox ID is invalid or the subscription cannot be established.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForEntryEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to subscribe to for entry events, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func subscribeForEntryEvents(\n\tin inboxId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from receiving entry events for a specific inbox.\nThis method unsubscribes the client from receiving notifications or events related to entries within the specified inbox. It stops further event notifications for that inbox.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "Throws an error if the unsubscribing process fails, such as if the inbox ID is invalid or the unsubscribing cannot be completed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromEntryEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the inbox to unsubscribe from entry events, provided as a `String`.",
                  "name": "inboxId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "This method returns `Void` and does not provide any result on success.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "func unsubscribeFromEntryEvents(\n\tin inboxId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXInbox",
          "type": "class"
        }
      ],
      "title": "PrivMXInbox"
    }
  ],
  "stores": [
    {
      "content": [
        {
          "description": "Protocol declaring methods of StoreApi using Swift types, enabling interaction with PrivMX Stores and Files.",
          "fields": [],
          "methods": [
            {
              "description": "Lists the Stores that the user has access to within a specified context.\nThis method retrieves a list of all Stores accessible to the user in the given context. The list can be filtered and paginated using the provided query.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the operation fails, such as when the context ID is invalid or network issues occur.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listStores(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which Stores should be listed.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object to filter and paginate the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `endpoint::core::PagingList<endpoint::store::Store>` (`privmx.StoreList`) instance containing the list of Stores.\n",
                  "type": {
                    "name": "privmx.StoreList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listStores(\n\tfrom contextId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.StoreList",
              "type": "method"
            },
            {
              "description": "Retrieves detailed information about a specific Store.\nThis method returns the details of a Store, such as its metadata and associated users, identified by its unique store ID.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store cannot be found or if access is denied.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getStore(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to retrieve.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.store.Store` instance containing the Store’s metadata and details.\n",
                  "type": {
                    "name": "privmx.endpoint.store.Store",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getStore(\n\t_ storeId: String\n) throws -> privmx.endpoint.store.Store",
              "type": "method"
            },
            {
              "description": "Creates a new Store in the specified context, with defined users and managers.\nThis method creates a new Store within a specific context, associating users and managers with it. The Store will also have public and private metadata attached to it. Note: when no policies are supplied, the default ones inherited from the context will be used instead.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store creation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createStore(in:for:managedBy:withPublicMeta:withPrivateMeta:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the context in which the Store will be created.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing users who will have access to the Store.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing managers responsible for the Store.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata associated with the Store, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata associated with the Store, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container, as well as the items within.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created Store.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func createStore(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\twithPolicies policies: privmx.endpoint.core.ContainerPolicy?\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deletes a specific Store identified by its unique ID.\nThis method removes the Store along with its associated data from the Bridge.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store cannot be deleted, such as if the store ID is invalid or the user lacks the necessary permissions.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteStore(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to be deleted.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteStore(\n\t_ storeId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Updates an existing Store by replacing its users, managers, and metadata.\nThis method updates an existing Store with new values, overriding the previous users, managers, and metadata. The update can be forced, and a new key can be generated if required.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store update process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateStore(_:atVersion:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to be updated.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the Store, used to ensure version consistency.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing users who will have access to the Store.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing managers responsible for the Store.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata for the Store, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata for the Store, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether the update should be forced, bypassing version control.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether a new key should be generated for the Store.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The new policies for the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateStore(\n\t_ storeId: String,\n\tatVersion version:Int64,\n\treplacingUsers users: [privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers: [privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicy?\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Retrieves information about a specific File in a Store.\nThis method returns details about a File, such as its metadata, associated with the given file ID.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the File cannot be found or if access is denied.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the File to retrieve.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.store.File` instance containing the File’s metadata and details.\n",
                  "type": {
                    "name": "privmx.endpoint.store.File",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getFile(\n\t_ fileId: String\n) throws -> privmx.endpoint.store.File",
              "type": "method"
            },
            {
              "description": "Lists all Files in a specified Store.\nThis method retrieves a list of Files associated with a Store. It only provides metadata and information about the files, not their contents. To download the files themselves, use `openFile()` and `readFromFile()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the listing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listFiles(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the Store from which to list Files.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object to filter and paginate the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.FilesList` instance containing the list of Files.\n",
                  "type": {
                    "name": "privmx.FileList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listFiles(\n\tfrom storeId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.FileList",
              "type": "method"
            },
            {
              "description": "Creates a new file handle for writing data to a File in a Store.\nThis method creates a new file handle, which can be used to write data to a new File in the Store. Once the file is created, data can be uploaded using `writeToFile()` and finalized with `closeFile()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file handle creation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createFile(in:withPublicMeta:withPrivateMeta:ofSize:)",
              "params": [
                {
                  "description": "The unique identifier of the Store in which the File will be created.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the File in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` used for writing data to the File.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func createFile(\n\tin storeId: String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tofSize size: Int64\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Updates an existing File by overwriting its content and metadata.\nThis method creates a new file handle for updating an existing File, allowing the content and metadata to be replaced. The file can then be written using `writeToFile()` and finalized with `closeFile()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file handle creation or update fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateFile(_:replacingPublicMeta:replacingPrivateMeta:replacingSize:)",
              "params": [
                {
                  "description": "The unique identifier of the File to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "New public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "New private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new size of the File in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` for writing data to the updated File.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateFile(\n\t_ fileId: String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingSize size: Int64\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Updates an existing File by overwriting its metadata.",
              "methodType": "method",
              "name": "updateFileMeta(of:replacingPublicMeta:replacingPrivateMeta:)",
              "params": [
                {
                  "description": "The unique identifier of the File to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "New public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "New private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateFileMeta(\n\tof fileId: String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Opens a File for reading and returns a file handle (`StoreFileHandle`).\nThis method opens an existing File, identified by its file ID, and returns a handle that can be used to read the file’s content.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "openFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the File to open.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` for reading the File’s content.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "func openFile(\n_ fileId: String\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Reads a specified number of bytes from an open File.\nThis method reads a defined amount of data from a file that has been opened using a StoreFileHandle.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the read operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readFromFile(withHandle:length:)",
              "params": [
                {
                  "description": "The StoreFileHandle of the opened File.",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The number of bytes to read from the File.",
                  "name": "length",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `Data` object containing the bytes read from the File.\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func readFromFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\tlength: Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Writes a chunk of data to an open File.\nThis method uploads a chunk of data to a file that has been opened for writing using a file handle.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the write operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeToFile(withHandle:uploading:)",
              "params": [
                {
                  "description": "The handle of the opened File.",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The data to write to the File.",
                  "name": "dataChunk",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func writeToFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\tuploading dataChunk: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Moves the read/write cursor within an open File.\nThis method repositions the read/write cursor in a file, allowing for random access operations such as reading or writing from a specific position.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the seek operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "seekInFile(withHandle:toPosition:)",
              "params": [
                {
                  "description": "The handle of the opened File.",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The new position for the cursor, in bytes.",
                  "name": "position",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "snippet": "func seekInFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\ttoPosition position: Int64\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Closes an open File and finalizes any pending operations.\nThis method closes a file that was opened using `openFile()` or created with `createFile()`. It ensures that all pending write operations are completed and releases the file handle.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be closed.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeFile(withHandle:)",
              "params": [
                {
                  "description": "The handle of the opened File to close.",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the closed File.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func closeFile(\n\twithHandle handle: privmx.StoreFileHandle\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Permanently deletes a File from the platform.\nThis method removes a file, identified by its file ID, and all its associated data from the platform.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file deletion fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the File to delete.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteFile(\n\t_ fileId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to events related to Stores.\nThis method allows the client to receive notifications about changes to Stores, such as updates or new Stores being created, by subscribing to Store-related events.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the subscription fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForStoreEvents()",
              "params": [],
              "snippet": "func subscribeForStoreEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to events related to Files in a specific Store.\nThis method subscribes to file-related events for a specific Store, enabling the client to receive notifications about changes to Files, such as uploads or deletions.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the subscription fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForFileEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Store for which to subscribe to file events.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func subscribeForFileEvents(\n\tin storeId:String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from events related to Stores.\nThis method stops the client from receiving notifications about Store-related events.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the unsubscribing fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromStoreEvents()",
              "params": [],
              "snippet": "func unsubscribeFromStoreEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from events related to Files in a specific Store.\nThis method stops the client from receiving notifications about file-related events in a specific Store.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the unsubscribing fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromFileEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Store for which to unsubscribe from file events.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func unsubscribeFromFileEvents(\n\tin storeId:String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXStore",
          "type": "class"
        }
      ],
      "title": "PrivMXStore"
    },
    {
      "content": [
        {
          "description": "Protocol declaring methods of StoreApi using Swift types, enabling interaction with PrivMX Stores and Files.",
          "fields": [],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "unubscribeFromFileEvents(in:)",
              "params": [
                {
                  "description": "",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func unubscribeFromFileEvents(\n\tin storeId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXStore",
          "type": "class"
        }
      ],
      "title": "PrivMXStore"
    },
    {
      "content": [
        {
          "description": "A class providing a set of tools using SwiftNIO for uploading and downloading files with the use of `PrivMXStore` from PrivMX Endpoint.",
          "fields": [
            {
              "description": "Recommended chunk size for file transfers, suggested by the endpoint library.\n",
              "name": "RecommendedChunkSize",
              "snippet": "public static let RecommendedChunkSize :Int64 = 131072",
              "type": {
                "name": "Int64",
                "optional": false
              }
            },
            {
              "description": "\n",
              "name": "mode",
              "snippet": "public let mode:StoreFileHandlerMode",
              "type": {
                "name": "StoreFileHandlerMode",
                "optional": false
              }
            },
            {
              "description": "\n",
              "name": "hasDataLeft",
              "snippet": "public var hasDataLeft:Bool = true",
              "type": {
                "name": "Bool",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Provides access to the data buffer of the processed file.",
              "methodType": "method",
              "name": "getBuffer()",
              "params": [],
              "returns": [
                {
                  "description": "The processed data buffer.\n",
                  "type": {
                    "name": "Data?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getBuffer(\n) -> Data?",
              "type": "method"
            },
            {
              "description": "Closes both local and remote files.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if closing the file fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "close()",
              "params": [],
              "returns": [
                {
                  "description": "A string representing the result of closing the remote file.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func close(\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Downloads the next chunk and adds it to either the local file or the internal buffer, depending on the mode.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file read operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readChunk(onChunkDownloaded:)",
              "params": [
                {
                  "description": "A closure called when a chunk is downloaded, passing the byte count of the chunk.",
                  "name": "onChunkDownloaded",
                  "type": {
                    "name": "@escaping ((Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func readChunk(\n\tonChunkDownloaded: @escaping ((Int)->Void) = {byteCount in}\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Uploads the next chunk of data from the local file or buffer to the remote file.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file write operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeChunk(onChunkUploaded:)",
              "params": [
                {
                  "description": "A closure called when a chunk is uploaded, passing the byte count of the chunk.",
                  "name": "onChunkUploaded",
                  "type": {
                    "name": "@escaping ((Int) -> Void)",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func writeChunk(\n\tonChunkUploaded: @escaping ((Int) -> Void) = {byteCount in}\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXStoreFileHandler",
          "type": "class"
        }
      ],
      "title": "PrivMXStoreFileHandler"
    },
    {
      "content": [
        {
          "description": "Modes of operation for `PrivMXStoreFileHandler` instances.",
          "fields": [
            {
              "description": "",
              "name": "readToFile",
              "snippet": "case readToFile",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "readToBuffer",
              "snippet": "case readToFile,readToBuffer",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "updateFromFile",
              "snippet": "case updateFromFile",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "updateFromBuffer",
              "snippet": "case updateFromFile,updateFromBuffer",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "createFromFile",
              "snippet": "case createFromFile",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            },
            {
              "description": "",
              "name": "createFromBuffer",
              "snippet": "case createFromFile,createFromBuffer",
              "type": {
                "name": "Enum Case",
                "optional": false
              }
            }
          ],
          "methods": [],
          "name": "StoreFileHandlerMode",
          "type": "enum"
        }
      ],
      "title": "PrivMXStoreFileHandler"
    },
    {
      "content": [
        {
          "description": "A class providing a set of tools using SwiftNIO for uploading and downloading files with the use of `PrivMXStore` from PrivMX Endpoint.",
          "fields": [],
          "methods": [
            {
              "description": "Creates a handler for updating a file with a new data buffer.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or updated.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileUpdater(for:withReplacement:using:replacingPublicMeta:replacingPrivateMeta:replacingFileSize:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the file to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The FileHandle (swift-nio) with new file content.",
                  "name": "sourceFile",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata for the file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata for the file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file to be updated.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for the upload. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for updating the file.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileUpdater(\n\tfor fileId:String,\n\twithReplacement sourceFile:FileHandle,\n\tusing storesApi:any PrivMXStore,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingFileSize fileSize: Int64,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a handler for creating a new file from a data buffer.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be created.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileCreator(inStore:from:using:withPublicMeta:withPrivateMeta:fileSize:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the store where the file will be created.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The FileHandle (swift-nio) with new file content.",
                  "name": "sourceFile",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata for the new file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata for the new file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the new file.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for the upload. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for creating the file.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileCreator(\n\tinStore storeId:String,\n\tfrom sourceFile:FileHandle,\n\tusing storesApi:any PrivMXStore,\n\twithPublicMeta publicMeta:Data,\n\twithPrivateMeta privateMeta:Data,\n\tfileSize: Int64,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a handler for updating a file with a new data buffer.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or updated.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileUpdater(for:withReplacementBuffer:using:replacingPublicMeta:replacingPrivateMeta:replacingFileSize:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the file to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The data buffer to replace the existing file content.",
                  "name": "sourceBuffer",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata for the file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata for the file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file to be updated.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for the upload. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for updating the file.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileUpdater(\n\tfor fileId:String,\n\twithReplacementBuffer sourceBuffer:Data,\n\tusing storesApi:any PrivMXStore,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingFileSize fileSize: Int64,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a handler for updating a file with a new data buffer.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or updated.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileCreator(inStore:fromBuffer:using:withPublicMeta:withPrivateMeta:fileSize:chunkSize:)",
              "params": [
                {
                  "description": "",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The data buffer to replace the existing file content.",
                  "name": "sourceBuffer",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata for the file.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata for the file.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the file to be updated.",
                  "name": "fileSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for the upload. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for updating the file.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileCreator(\n\tinStore storeId:String,\n\tfromBuffer sourceBuffer:Data,\n\tusing storesApi:any PrivMXStore,\n\twithPublicMeta publicMeta:Data,\n\twithPrivateMeta privateMeta:Data,\n\tfileSize: Int64,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a new handler for downloading a file and saving it to a local file.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileReader(saveTo:readFrom:with:chunkSize:)",
              "params": [
                {
                  "description": "The local file handle (swift-nio) where the downloaded file content will be saved.",
                  "name": "outputFile",
                  "type": {
                    "name": "FileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The ID of the file to be downloaded from the `PrivMXStore`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for downloading. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for downloading the file to the local file.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileReader(\n\tsaveTo outputFile:FileHandle,\n\treadFrom fileId:String,\n\twith storesApi:any PrivMXStore,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            },
            {
              "description": "Creates a new handler for downloading a file to an internal buffer.\nThis method allows downloading a file from the `PrivMXStore` directly into memory (a buffer). To retrieve the buffer after the download, call `getBuffer()`.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened or the download process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "static",
              "name": "getStoreFileReader(readFrom:with:chunkSize:)",
              "params": [
                {
                  "description": "The ID of the file to be downloaded from the `PrivMXStore`.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The API for interacting with the `PrivMXStore`.",
                  "name": "storesApi",
                  "type": {
                    "name": "any PrivMXStore",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the chunks for downloading. Defaults to the recommended chunk size.",
                  "name": "chunkSize",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A new `PrivMXStoreFileHandler` instance configured for downloading the file into the buffer.\n",
                  "type": {
                    "name": "PrivMXStoreFileHandler",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func getStoreFileReader(\n\treadFrom fileId:String,\n\twith storesApi:any PrivMXStore,\n\tchunkSize: Int64 = PrivMXStoreFileHandler.RecommendedChunkSize\n) throws -> PrivMXStoreFileHandler",
              "type": "method"
            }
          ],
          "name": "PrivMXStoreFileHandler",
          "type": "class"
        }
      ],
      "title": "PrivMXStoreFileHandlerExtensions"
    },
    {
      "content": [
        {
          "description": "Swift wrapper for `privmx.NativeStoreApiWrapper`, providing functionality to manage Stores and files within PrivMX platform.",
          "fields": [],
          "methods": [
            {
              "description": "Lists the Stores that the user has access to within a specified context.\nThis method retrieves a list of all Stores accessible to the user in the given context. The list can be filtered and paginated using the provided query.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the operation fails, such as when the context ID is invalid or network issues occur.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listStores(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which Stores should be listed.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object to filter and paginate the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `endpoint::core::PagingList<endpoint::store::Store>` (`privmx.StoreList`) instance containing the list of Stores.\n",
                  "type": {
                    "name": "privmx.StoreList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listStores(\n\tfrom contextId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.StoreList",
              "type": "method"
            },
            {
              "description": "Retrieves detailed information about a specific Store.\nThis method returns the details of a Store, such as its metadata and associated users, identified by its unique store ID.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store cannot be found or if access is denied.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getStore(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to retrieve.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.store.Store` instance containing the Store’s metadata and details.\n",
                  "type": {
                    "name": "privmx.endpoint.store.Store",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getStore(\n\t_ storeId: String\n) throws -> privmx.endpoint.store.Store",
              "type": "method"
            },
            {
              "description": "Creates a new Store in the specified context, with defined users and managers.\nThis method creates a new Store within a specific context, associating users and managers with it. The Store will also have public and private metadata attached to it. Note: when no policies are supplied, the default ones inherited from the context will be used instead.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store creation process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createStore(in:for:managedBy:withPublicMeta:withPrivateMeta:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the context in which the Store will be created.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing users who will have access to the Store.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing managers responsible for the Store.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata associated with the Store, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata associated with the Store, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container, as well as the items within.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created Store.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func createStore(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\twithPolicies policies: privmx.endpoint.core.ContainerPolicy? = nil\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing Store by replacing its users, managers, and metadata.\nThis method updates an existing Store with new values, overriding the previous users, managers, and metadata. The update can be forced, and a new key can be generated if required.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store update process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateStore(_:atVersion:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to be updated.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the Store, used to ensure version consistency.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing users who will have access to the Store.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing managers responsible for the Store.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata for the Store, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata for the Store, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether the update should be forced, bypassing version control.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether a new key should be generated for the Store.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The new policies for the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateStore(\n\t_ storeId: String,\n\tatVersion version: Int64,\n\treplacingUsers users: [privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers: [privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicy? = nil\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Deletes a specific Store identified by its unique ID.\nThis method removes the Store along with its associated data from the Bridge.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the Store cannot be deleted, such as if the store ID is invalid or the user lacks the necessary permissions.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteStore(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Store to be deleted.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteStore(\n\t_ storeId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Retrieves information about a specific File in a Store.\nThis method returns details about a File, such as its metadata, associated with the given file ID.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the File cannot be found or if access is denied.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the File to retrieve.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.store.File` instance containing the File’s metadata and details.\n",
                  "type": {
                    "name": "privmx.endpoint.store.File",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getFile(\n\t_ fileId: String\n) throws -> privmx.endpoint.store.File",
              "type": "method"
            },
            {
              "description": "Lists all Files in a specified Store.\nThis method retrieves a list of Files associated with a Store. It only provides metadata and information about the files, not their contents. To download the files themselves, use `openFile()` and `readFromFile()`.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the listing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listFiles(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the Store from which to list Files.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object to filter and paginate the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.FilesList` instance containing the list of Files.\n",
                  "type": {
                    "name": "privmx.FileList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listFiles(\n\tfrom storeId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.FileList",
              "type": "method"
            },
            {
              "description": "Creates a new file handle for writing data to a File in a Store.\nThis method creates a new file handle, which can be used to write data to a new File in the Store. Once the file is created, data can be uploaded using `writeToFile()` and finalized with `closeFile()`.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file handle creation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createFile(in:withPublicMeta:withPrivateMeta:ofSize:)",
              "params": [
                {
                  "description": "The unique identifier of the Store in which the File will be created.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "Public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "Private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The size of the File in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` used for writing data to the File.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func createFile(\n\tin storeId: String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tofSize size: Int64\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Updates an existing File by overwriting its content and metadata.\nThis method creates a new file handle for updating an existing File, allowing the content and metadata to be replaced. The file can then be written using `writeToFile()` and finalized with `closeFile()`.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file handle creation or update fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateFile(_:replacingPublicMeta:replacingPrivateMeta:replacingSize:)",
              "params": [
                {
                  "description": "The unique identifier of the File to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "New public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "New private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new size of the File in bytes.",
                  "name": "size",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` for writing data to the updated File.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateFile(\n\t_ fileId: String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data,\n\treplacingSize size: Int64\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Updates an existing File by overwriting its metadata.\n",
              "methodType": "method",
              "name": "updateFileMeta(of:replacingPublicMeta:replacingPrivateMeta:)",
              "params": [
                {
                  "description": "The unique identifier of the File to be updated.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "New public metadata for the File, which will be unencrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "New private metadata for the File, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateFileMeta(\n\tof fileId: String,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privateMeta: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Opens a File for reading and returns a file handle (`StoreFileHandle`).\nThis method opens an existing File, identified by its file ID, and returns a handle that can be used to read the file’s content.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the file cannot be opened.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "openFile(_:)",
              "params": [
                {
                  "description": "The unique identifier of the File to open.",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.StoreFileHandle` for reading the File’s content.\n",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func openFile(\n\t_ fileId: String\n) throws -> privmx.StoreFileHandle",
              "type": "method"
            },
            {
              "description": "Reads from an opened file.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "When the operation fails",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "readFromFile(withHandle:length:)",
              "params": [
                {
                  "description": "the handle to an opened File",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "amount of bytes to be read",
                  "name": "length",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`privmx.StoreFileHandle` for reading\n",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func readFromFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\tlength: Int64\n) throws -> Data",
              "type": "method"
            },
            {
              "description": "Writes a chunk of data to an opened file on the Platform.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedWritingToFile` if an exception was thrown in C++ code, or another error occurred.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "writeToFile(withHandle:uploading:)",
              "params": [
                {
                  "description": "the handle to an opened file",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "the data to be uploaded",
                  "name": "dataChunk",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func writeToFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\tuploading dataChunk: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Closes an open File",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedClosingFile` if an exception was thrown in C++ code, or another error occurred.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "closeFile(withHandle:)",
              "params": [
                {
                  "description": "the handle to an open file",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "The Id of the File\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func closeFile(\n\twithHandle handle: privmx.StoreFileHandle\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Deletes the specified File.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDeletingFile` if an exception was thrown in C++ code, or another error occurred.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteFile(_:)",
              "params": [
                {
                  "description": "which File should be deleted",
                  "name": "fileId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "True if the file was deleted successfully, false otherwise.\n",
                  "type": {
                    "name": "",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteFile(\n\t_ fileId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Moves the read/write cursor within an open File.\nThis method repositions the read/write cursor in a file, allowing for random access operations such as reading or writing from a specific position.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the seek operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "seekInFile(withHandle:toPosition:)",
              "params": [
                {
                  "description": "The handle of the opened File.",
                  "name": "handle",
                  "type": {
                    "name": "privmx.StoreFileHandle",
                    "optional": false
                  }
                },
                {
                  "description": "The new position for the cursor, in bytes.",
                  "name": "position",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func seekInFile(\n\twithHandle handle: privmx.StoreFileHandle,\n\ttoPosition position: Int64\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "unubscribeFromFileEvents(in:)",
              "params": [
                {
                  "description": "",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func unubscribeFromFileEvents(\n\tin storeId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from events related to Files in a specific Store.\nThis method stops the client from receiving notifications about file-related events in a specific Store.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the unsubscribing fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromFileEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Store for which to unsubscribe from file events.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func unsubscribeFromFileEvents(\n\tin storeId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to events related to Files in a specific Store.\nThis method subscribes to file-related events for a specific Store, enabling the client to receive notifications about changes to Files, such as uploads or deletions.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "An error if the subscription fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForFileEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Store for which to subscribe to file events.",
                  "name": "storeId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func subscribeForFileEvents(\n\tin storeId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "StoreApi",
          "type": "class"
        }
      ],
      "title": "StoreApi"
    }
  ],
  "threads": [
    {
      "content": [
        {
          "description": "Declaring thread and message management methods using Swift types.",
          "fields": [],
          "methods": [
            {
              "description": "Lists the Threads the user has access to in a specified context.\nThis method retrieves a list of Threads in the given context, with pagination and filtering options.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedListingThreads` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listThreads(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which to list Threads.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object for filtering and paginating the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.ThreadsList` instance containing the list of Threads.\n",
                  "type": {
                    "name": "privmx.ThreadList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listThreads(\n\tfrom contextId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.ThreadList",
              "type": "method"
            },
            {
              "description": "Retrieves detailed information about a specific Thread.\nThis method returns metadata and details of a Thread identified by its unique thread ID.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGettingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getThread(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to retrieve.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.Thread` instance containing the Thread’s details.\n",
                  "type": {
                    "name": "privmx.endpoint.thread.Thread",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getThread(\n\t_ threadId: String\n) throws -> privmx.endpoint.thread.Thread",
              "type": "method"
            },
            {
              "description": "Deletes a specific Thread from the platform.\nThis method removes a Thread, identified by its thread ID, from the platform.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDeletingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteThread(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to delete.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteThread(\n\t_ threadId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Creates a new Thread in a specified context.\nThis method creates a new Thread with specified users, managers, and metadata in the given context. Note: Managers do not automatically have access to the thread unless explicitly added as users. Note: when no policies are supplied, the default ones inherited from the context will be used instead.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedCreatingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createThread(in:for:managedBy:withPublicMeta:withPrivateMeta:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the context in which to create the Thread.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing users who will have access to the Thread.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing managers responsible for the Thread.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "pubMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container, as well as the items within.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created Thread.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func createThread(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta pubMeta: Data,\n\twithPrivateMeta privMeta: Data,\n\twithPolicies policies: privmx.endpoint.core.ContainerPolicy?\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing Thread with new users, managers, and metadata.\nThis method updates a Thread, replacing its existing users, managers, and metadata with new values. The update can be forced and a new key can be generated if necessary.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUpdatingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateThread(_:atVersion:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to update.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the Thread, used to ensure version consistency.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing users who will have access to the Thread.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing managers responsible for the Thread.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "pubMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether to force the update, bypassing version control.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether a new key should be generated for the Thread.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The new policies for the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateThread(\n\t_ threadId: String,\n\tatVersion version: Int64,\n\treplacingUsers users: [privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers: [privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta pubMeta: Data,\n\treplacingPrivateMeta privMeta: Data,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicy?\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Lists Messages from a specific Thread.\nThis method retrieves a list of Messages from the specified Thread, filtered and paginated based on the query.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedListingMessages` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listMessages(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread from which to list Messages.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object for filtering and paginating the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.MessageList` instance containing the list of Messages.\n",
                  "type": {
                    "name": "privmx.MessageList",
                    "optional": false
                  }
                }
              ],
              "snippet": "func listMessages(\n\tfrom threadId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.MessageList",
              "type": "method"
            },
            {
              "description": "Retrieves a specific Message by its ID.\nThis method returns the details of a Message identified by its message ID.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGettingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getMessage(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to retrieve.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.Message` instance containing the Message’s details.\n",
                  "type": {
                    "name": "privmx.endpoint.thread.Message",
                    "optional": false
                  }
                }
              ],
              "snippet": "func getMessage(\n\t_ messageId: String\n) throws -> privmx.endpoint.thread.Message",
              "type": "method"
            },
            {
              "description": "Sends a Message in a Thread.\nThis method sends a Message to the specified Thread, with the option to include both public and private metadata.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedCreatingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "sendMessage(in:withPublicMeta:withPrivateMeta:containing:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to send the Message to.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata associated with the Message, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata associated with the Message, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The actual content of the Message as `Data`, which will be encrypted.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the created Message.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func sendMessage(\n\tin threadId: String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tcontaining data: Data\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing Message.\nThis method updates a Message by replacing its data and metadata with new values.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUpdatingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateMessage(_:replacingData:replacingPublicMeta:replacingPrivateMeta:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to update.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The new content of the Message as `Data`, which will be encrypted.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata of the Message, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "func updateMessage(\n\t_ messageId: String,\n\treplacingData data: Data,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privMeta: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Deletes a specific Message.\nThis method deletes a Message identified by its unique message ID from the platform.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDeletingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteMessage(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to delete.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func deleteMessage(\n\t_ messageId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "subscribeForThreadEvents()",
              "params": [],
              "snippet": "func subscribeForThreadEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "",
              "methodType": "method",
              "name": "unsubscribeFromThreadEvents()",
              "params": [],
              "snippet": "func unsubscribeFromThreadEvents(\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to receive events related to Messages in a specific Thread.\nThis method subscribes to message-related events, allowing the client to receive notifications about changes in the Messages of the specified Thread.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSubscribing` if the subscription process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForMessageEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread for which to subscribe to message events.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func subscribeForMessageEvents(\n\tin threadId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from receiving events related to Messages in a specific Thread.\nThis method unsubscribes from message-related events for the specified Thread, stopping further notifications.",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUnsubscribing` if the unsubscribing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromMessageEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread for which to unsubscribe from message events.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "func unsubscribeFromMessageEvents(\n\tin threadId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "PrivMXThread",
          "type": "class"
        }
      ],
      "title": "PrivMXThread"
    },
    {
      "content": [
        {
          "description": "Swift wrapper for `privmx.NativeThreadApiWrapper`, providing Thread-related operations within PrivMX platform.",
          "fields": [],
          "methods": [
            {
              "description": "Lists the Threads the user has access to in a specified context.\nThis method retrieves a list of Threads in the given context, with pagination and filtering options.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedListingThreads` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listThreads(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the context from which to list Threads.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object for filtering and paginating the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.ThreadsList` instance containing the list of Threads.\n",
                  "type": {
                    "name": "privmx.ThreadList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listThreads(\n\tfrom contextId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.ThreadList",
              "type": "method"
            },
            {
              "description": "Retrieves detailed information about a specific Thread.\nThis method returns metadata and details of a Thread identified by its unique thread ID.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGettingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getThread(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to retrieve.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.Thread` instance containing the Thread’s details.\n",
                  "type": {
                    "name": "privmx.endpoint.thread.Thread",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getThread(\n\t_ threadId: String\n) throws -> privmx.endpoint.thread.Thread",
              "type": "method"
            },
            {
              "description": "Deletes a specific Thread from the platform.\nThis method removes a Thread, identified by its thread ID, from the platform.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDeletingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteThread(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to delete.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteThread(\n\t_ threadId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Creates a new Thread in a specified context.\nThis method creates a new Thread with specified users, managers, and metadata in the given context. Note: Managers do not automatically have access to the thread unless explicitly added as users. Note: when no policies are supplied, the default ones inherited from the context will be used instead.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedCreatingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "createThread(in:for:managedBy:withPublicMeta:withPrivateMeta:withPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the context in which to create the Thread.",
                  "name": "contextId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing users who will have access to the Thread.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A list of `UserWithPubKey` objects representing managers responsible for the Thread.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata associated with the Thread, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata associated with the Thread, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The policies governing the Container, as well as the items within.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the newly created Thread.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func createThread(\n\tin contextId: String,\n\tfor users: [privmx.endpoint.core.UserWithPubKey],\n\tmanagedBy managers: [privmx.endpoint.core.UserWithPubKey],\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\twithPolicies policies:privmx.endpoint.core.ContainerPolicy? = nil\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Lists Messages from a specific Thread.\nThis method retrieves a list of Messages from the specified Thread, filtered and paginated based on the query.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedListingMessages` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "listMessages(from:basedOn:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread from which to list Messages.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "A paging query object for filtering and paginating the results.",
                  "name": "query",
                  "type": {
                    "name": "privmx.endpoint.core.PagingQuery",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.core.MessageList` instance containing the list of Messages.\n",
                  "type": {
                    "name": "privmx.MessageList",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func listMessages(\n\tfrom threadId: String,\n\tbasedOn query: privmx.endpoint.core.PagingQuery\n) throws -> privmx.MessageList",
              "type": "method"
            },
            {
              "description": "Retrieves a specific Message by its ID.\nThis method returns the details of a Message identified by its message ID.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedGettingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "getMessage(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to retrieve.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `privmx.endpoint.thread.Message` instance containing the Message’s details.\n",
                  "type": {
                    "name": "privmx.endpoint.thread.Message",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func getMessage(\n\t_ messageId: String\n) throws -> privmx.endpoint.thread.Message",
              "type": "method"
            },
            {
              "description": "Sends a Message in a Thread.\nThis method sends a Message to the specified Thread, with the option to include both public and private metadata.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedCreatingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "sendMessage(in:withPublicMeta:withPrivateMeta:containing:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to send the Message to.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The public metadata associated with the Message, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The private metadata associated with the Message, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The actual content of the Message as `Data`, which will be encrypted.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "A `String` representing the ID of the created Message.\n",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func sendMessage(\n\tin threadId: String,\n\twithPublicMeta publicMeta: Data,\n\twithPrivateMeta privateMeta: Data,\n\tcontaining data: Data\n) throws -> String",
              "type": "method"
            },
            {
              "description": "Updates an existing Message.\nThis method updates a Message by replacing its data and metadata with new values.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUpdatingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateMessage(_:replacingData:replacingPublicMeta:replacingPrivateMeta:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to update.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The new content of the Message as `Data`, which will be encrypted.",
                  "name": "data",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata of the Message, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "privMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateMessage(\n\t_ messageId: String,\n\treplacingData data: Data,\n\treplacingPublicMeta publicMeta: Data,\n\treplacingPrivateMeta privMeta: Data\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Deletes a specific Message.\nThis method deletes a Message identified by its unique message ID from the platform.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedDeletingMessage` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "deleteMessage(_:)",
              "params": [
                {
                  "description": "The unique identifier of the Message to delete.",
                  "name": "messageId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func deleteMessage(\n\t_ messageId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Updates an existing Thread with new users, managers, and metadata.\nThis method updates a Thread, replacing its existing users, managers, and metadata with new values. The update can be forced and a new key can be generated if necessary.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUpdatingThread` if the operation fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "updateThread(_:atVersion:replacingUsers:replacingManagers:replacingPublicMeta:replacingPrivateMeta:force:forceGenerateNewKey:replacingPolicies:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread to update.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "The current version of the Thread, used to ensure version consistency.",
                  "name": "version",
                  "type": {
                    "name": "Int64",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing users who will have access to the Thread.",
                  "name": "users",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "A new list of `UserWithPubKey` objects representing managers responsible for the Thread.",
                  "name": "managers",
                  "type": {
                    "name": "[privmx.endpoint.core.UserWithPubKey]",
                    "optional": false
                  }
                },
                {
                  "description": "The new public metadata of the Thread, which will not be encrypted.",
                  "name": "publicMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "The new private metadata of the Thread, which will be encrypted.",
                  "name": "privateMeta",
                  "type": {
                    "name": "Data",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether to force the update, bypassing version control.",
                  "name": "force",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "A boolean indicating whether a new key should be generated for the Thread.",
                  "name": "forceGenerateNewKey",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                },
                {
                  "description": "The new policies for the Container.",
                  "name": "policies",
                  "type": {
                    "name": "privmx.endpoint.core.ContainerPolicy?",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func updateThread(\n\t_ threadId: String,\n\tatVersion version: Int64,\n\treplacingUsers users:[privmx.endpoint.core.UserWithPubKey],\n\treplacingManagers managers:[privmx.endpoint.core.UserWithPubKey],\n\treplacingPublicMeta publicMeta:Data,\n\treplacingPrivateMeta privateMeta:Data,\n\tforce: Bool,\n\tforceGenerateNewKey: Bool,\n\treplacingPolicies policies: privmx.endpoint.core.ContainerPolicy? = nil\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Subscribes to receive events related to Messages in a specific Thread.\nThis method subscribes to message-related events, allowing the client to receive notifications about changes in the Messages of the specified Thread.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedSubscribing` if the subscription process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "subscribeForMessageEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread for which to subscribe to message events.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func subscribeForMessageEvents(\n\tin threadId: String\n) throws -> Void",
              "type": "method"
            },
            {
              "description": "Unsubscribes from receiving events related to Messages in a specific Thread.\nThis method unsubscribes from message-related events for the specified Thread, stopping further notifications.\n",
              "exceptions": [
                {
                  "code": 0,
                  "description": "`PrivMXEndpointError.failedUnsubscribing` if the unsubscribing process fails.",
                  "type": {
                    "name": "PrivMXEndpointError",
                    "optional": false
                  }
                }
              ],
              "methodType": "method",
              "name": "unsubscribeFromMessageEvents(in:)",
              "params": [
                {
                  "description": "The unique identifier of the Thread for which to unsubscribe from message events.",
                  "name": "threadId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func unsubscribeFromMessageEvents(\n\tin threadId: String\n) throws -> Void",
              "type": "method"
            }
          ],
          "name": "ThreadApi",
          "type": "class"
        }
      ],
      "title": "ThreadApi"
    }
  ],
  "types": [
    {
      "content": [
        {
          "description": " Holds information about the file.",
          "fields": [
            {
              "description": "The unique identifier for the file.\nThis property returns the `fileId` from the `info` property of the file, converted to a `String`.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `File` instances for equality.\nThis function compares several key properties of the two `File` instances, including `info`, `privateMeta`, `publicMeta`, `authorPubKey`, `size`, and `statusCode`.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `File` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.store.File",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `File` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.store.File",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both files are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (\n\tlhs: privmx.endpoint.store.File,\n\trhs: privmx.endpoint.store.File\n) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `File` instance.\nThis function combines the `info` property into the hash to uniquely identify the file.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher) -> Void",
              "type": "method"
            }
          ],
          "name": "File",
          "type": "class"
        }
      ],
      "title": "File"
    },
    {
      "content": [
        {
          "description": " Holds information about the Message.",
          "fields": [
            {
              "description": "The unique identifier for the message.\nThis property returns the `id` from the `info` property of the message.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `Message` instances for equality.\nThis function compares all relevant fields of the `Message` object, including `info`, `data`, `privateMeta`, `publicMeta`, and `authorPubKey`.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `Message` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.thread.Message",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `Message` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.thread.Message",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both messages are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (\n\tlhs: privmx.endpoint.thread.Message,\n\trhs: privmx.endpoint.thread.Message\n) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `Message` instance.\nThis function combines the `info` property into the hash to uniquely identify the message.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher) -> Void",
              "type": "method"
            }
          ],
          "name": "Message",
          "type": "class"
        }
      ],
      "title": "Message"
    },
    {
      "content": [
        {
          "description": " Holds file&apos;s information created by server",
          "fields": [
            {
              "description": "The unique identifier for the file.\nThis property returns the `fileId` as a `String`, which serves as the unique identifier for the file.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `ServerFileInfo` instances for equality.\nThis function compares key properties of the two `ServerFileInfo` instances, including `fileId`, `storeId`, `author`, and `createDate`.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `ServerFileInfo` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.store.ServerFileInfo",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `ServerFileInfo` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.store.ServerFileInfo",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both file info instances are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (\n\tlhs: privmx.endpoint.store.ServerFileInfo,\n\trhs: privmx.endpoint.store.ServerFileInfo\n) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `ServerFileInfo` instance.\nThis function combines the `fileId` and `createDate` properties to generate a unique hash value for the file info.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher) -> Void",
              "type": "method"
            }
          ],
          "name": "ServerFileInfo",
          "type": "class"
        }
      ],
      "title": "ServerFileInfo"
    },
    {
      "content": [
        {
          "description": " Holds message&apos;s information created by server.",
          "fields": [
            {
              "description": "The unique identifier for the message.\nThis property returns the `messageId` converted to a `String` to serve as the unique identifier.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `ServerMessageInfo` instances for equality.\nThis function compares the `messageId`, `threadId`, `createDate`, and `author` fields of the two instances.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `ServerMessageInfo` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.thread.ServerMessageInfo",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `ServerMessageInfo` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.thread.ServerMessageInfo",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both instances are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (lhs: privmx.endpoint.thread.ServerMessageInfo, rhs: privmx.endpoint.thread.ServerMessageInfo) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `ServerMessageInfo` instance.\nThis function combines the `messageId` and `threadId` properties into the hash to uniquely identify the message info.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher)",
              "type": "method"
            }
          ],
          "name": "ServerMessageInfo",
          "type": "class"
        }
      ],
      "title": "ServerMessageInfo"
    },
    {
      "content": [
        {
          "description": " Holds all available information about a Store.",
          "fields": [
            {
              "description": "The unique identifier for the store.\nThis property returns the `storeId` as a `String`, which serves as the unique identifier for the store.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `Store` instances for equality.\nThis function compares multiple key properties of the two `Store` instances, including `storeId`, `contextId`, `createDate`, `creator`, `privateMeta`, `publicMeta`, `filesCount`, `lastFileDate`, `lastModificationDate`, `lastModifier`, `managers`, `users`, `version`, and `statusCode`.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `Store` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.store.Store",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `Store` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.store.Store",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both stores are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (\n\tlhs: privmx.endpoint.store.Store,\n\trhs: privmx.endpoint.store.Store\n) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `Store` instance.\nThis function combines several properties, including `storeId`, `lastModificationDate`, and `version` to generate a unique hash value for the store.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher) -> Void",
              "type": "method"
            }
          ],
          "name": "Store",
          "type": "class"
        }
      ],
      "title": "Store"
    },
    {
      "content": [
        {
          "description": " Holds all available information about a Thread.",
          "fields": [
            {
              "description": "The unique identifier for the thread.\nThis property returns the `threadId` as a `String`, which serves as the unique identifier for the thread.\n",
              "name": "id",
              "snippet": "public var id: String",
              "type": {
                "name": "String",
                "optional": false
              }
            }
          ],
          "methods": [
            {
              "description": "Compares two `Thread` instances for equality.\nThis function compares multiple key properties of the two `Thread` instances, including `threadId`, `contextId`, `createDate`, `creator`, `lastModifier`, `lastModificationDate`, `messagesCount`, `lastMsgDate`, `publicMeta`, `privateMeta`, `users`, `managers`, `version`, and `statusCode`.",
              "methodType": "static",
              "name": "==(_:_:)",
              "params": [
                {
                  "description": "The left-hand side `Thread` instance.",
                  "name": "lhs",
                  "type": {
                    "name": "privmx.endpoint.thread.Thread",
                    "optional": false
                  }
                },
                {
                  "description": "The right-hand side `Thread` instance.",
                  "name": "rhs",
                  "type": {
                    "name": "privmx.endpoint.thread.Thread",
                    "optional": false
                  }
                }
              ],
              "returns": [
                {
                  "description": "`true` if all relevant fields of both threads are equal, otherwise `false`.\n",
                  "type": {
                    "name": "Bool",
                    "optional": false
                  }
                }
              ],
              "snippet": "public static func == (\n\tlhs: privmx.endpoint.thread.Thread,\n\trhs: privmx.endpoint.thread.Thread\n) -> Bool",
              "type": "method"
            },
            {
              "description": "Generates a hash value for the `Thread` instance.\nThis function combines several properties, including `threadId`, `lastModificationDate`, `lastMsgDate`, and `version` to generate a unique hash value for the thread.",
              "methodType": "method",
              "name": "hash(into:)",
              "params": [
                {
                  "description": "The `Hasher` instance used to compute the hash value.",
                  "name": "hasher",
                  "type": {
                    "name": "inout Hasher",
                    "optional": false
                  }
                }
              ],
              "snippet": "public func hash(into hasher: inout Hasher) -> Void",
              "type": "method"
            }
          ],
          "name": "Thread",
          "type": "class"
        }
      ],
      "title": "Thread"
    },
    {
      "content": [
        {
          "description": " Contains ID of a user and the corresponding public key.",
          "fields": [],
          "methods": [
            {
              "description": "",
              "methodType": "method",
              "name": "init(userId:pubKey:)",
              "params": [
                {
                  "description": "",
                  "name": "userId",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                },
                {
                  "description": "",
                  "name": "pubKey",
                  "type": {
                    "name": "String",
                    "optional": false
                  }
                }
              ],
              "snippet": "init(\n\tuserId: String,\n\tpubKey: String\n)",
              "type": "method"
            }
          ],
          "name": "UserWithPubKey",
          "type": "class"
        }
      ],
      "title": "UserWithPubKey"
    }
  ]
}