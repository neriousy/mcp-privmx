{
  "timestamp": "2025-06-03T18:32:38.109Z",
  "totalChunks": 142,
  "chunks": [
    {
      "id": "Core-method-endpoint-connectpublic-mbguw0ce",
      "content": "# Endpoint.connectPublic\n\nConnects to the Platform backend as a guest user.\n\n# Endpoint.connectPublic()\n\nConnects to the Platform backend as a guest user.\n\n## Signature\n```javascript\nconnectPublic(solutionId, bridgeUrl)\n```\n\n## Parameters\n- `solutionId` (string): ID of the Solution\n- `bridgeUrl` (string): the Bridge Server URL\n\n## Returns\n- Promise<Connection>: instance of Connection\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: connectPublic Example\n\nBasic usage of Endpoint.connectPublic()\n\n```javascript\nconst result = await Endpoint.connectPublic(\"solutionId\", \"bridgeUrl\");\n```\n\n\n\n## Parameters\n\n- **solutionId** (string): ID of the Solution\n- **bridgeUrl** (string): the Bridge Server URL\n\n\n## Returns\n\n- **Promise<Connection>**: instance of Connection\n\n\n## Common Issues & Solutions\n\n### Connection timeout or failure\n\n**Cause**: Network issues or invalid credentials\n\n**Solution**: Check network connectivity and verify credentials. Implement retry logic.\n\n```typescript\ntry {\n  await Connection.connect(endpoint);\n} catch (error) {\n  if (error.code === 'TIMEOUT') {\n    // Retry with exponential backoff\n    await retryWithBackoff(() => Connection.connect(endpoint));\n  }\n}\n```\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "connectPublic",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "connectpublic",
          "connection",
          "platform",
          "authentication",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "Endpoint operations"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-createthreadapi-mbguw0ce-part-0",
      "content": "# Endpoint.createThreadApi\n\nCreates an instance of the Thread API.\n\n# Endpoint.createThreadApi()\n\nCreates an instance of the Thread API.\n\n## Signature\n```javascript\ncreateThreadApi(connection)\n```\n\n## Parameters\n- `connection` (Connection): instance of Connection\n\n## Returns\n- Promise<ThreadApi>: instance of ThreadApi\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: createThreadApi Example\n\nBasic usage of Endpoint.createThreadApi()\n\n```javascript\nconst result = await Endpoint.createThreadApi(connection);\n```\n\n## Parameters\n\n- **connection** (Connection): instance of Connection\n\n## Returns\n\n- **Promise<ThreadApi>**: instance of ThreadApi\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "createThreadApi",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "createthreadapi",
          "crud",
          "creation",
          "new",
          "connection",
          "platform",
          "authentication",
          "sub-chunk",
          "part-0",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Endpoint.connect()",
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-createstoreapi-mbguw0ce",
      "content": "# Endpoint.createStoreApi\n\nCreates an instance of the Store API.\n\n# Endpoint.createStoreApi()\n\nCreates an instance of the Store API.\n\n## Signature\n```javascript\ncreateStoreApi(connection)\n```\n\n## Parameters\n- `connection` (Connection): instance of Connection\n\n## Returns\n- Promise<StoreApi>: instance of StoreApi\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: createStoreApi Example\n\nBasic usage of Endpoint.createStoreApi()\n\n```javascript\nconst result = await Endpoint.createStoreApi(connection);\n```\n\n\n\n## Parameters\n\n- **connection** (Connection): instance of Connection\n\n\n## Returns\n\n- **Promise<StoreApi>**: instance of StoreApi\n\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "createStoreApi",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "createstoreapi",
          "crud",
          "creation",
          "new",
          "connection",
          "platform",
          "authentication",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Endpoint.connect()",
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-createcryptoapi-mbguw0ce",
      "content": "# Endpoint.createCryptoApi\n\nCreates an instance of the Crypto API.\n\n# Endpoint.createCryptoApi()\n\nCreates an instance of the Crypto API.\n\n## Signature\n```javascript\ncreateCryptoApi()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<CryptoApi>: instance of CryptoApi\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: createCryptoApi Example\n\nBasic usage of Endpoint.createCryptoApi()\n\n```javascript\nconst result = await Endpoint.createCryptoApi();\n```\n\n\n\n## Returns\n\n- **Promise<CryptoApi>**: instance of CryptoApi\n\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "createCryptoApi",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "createcryptoapi",
          "crud",
          "creation",
          "new",
          "connection",
          "platform",
          "authentication",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-createeventapi-mbguw0ce",
      "content": "# Endpoint.createEventApi\n\nCreates an instance of 'EventApi'.\n\n# Endpoint.createEventApi()\n\nCreates an instance of 'EventApi'.\n\n## Signature\n```javascript\ncreateEventApi(connection)\n```\n\n## Parameters\n- `connection` (Connection): instance of 'Connection'\n\n## Returns\n- Promise<EventApi>: instance of EventApi\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: createEventApi Example\n\nBasic usage of Endpoint.createEventApi()\n\n```javascript\nconst result = await Endpoint.createEventApi(connection);\n```\n\n\n\n## Parameters\n\n- **connection** (Connection): instance of 'Connection'\n\n\n## Returns\n\n- **Promise<EventApi>**: instance of EventApi\n\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "createEventApi",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "createeventapi",
          "crud",
          "creation",
          "new",
          "connection",
          "platform",
          "authentication",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Endpoint.connect()",
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ]
      }
    },
    {
      "id": "Core-method-connection-disconnect-mbguw0ce",
      "content": "# Connection.disconnect\n\nDisconnects from the Platform backend.\n\n# Connection.disconnect()\n\nDisconnects from the Platform backend.\n\n## Signature\n```javascript\ndisconnect()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Connection management operations.\n\n## Examples\n\n### Example 1: disconnect Example\n\nBasic usage of Connection.disconnect()\n\n```javascript\nawait Connection.disconnect();\n```\n\n\n\n## Common Issues & Solutions\n\n### Connection timeout or failure\n\n**Cause**: Network issues or invalid credentials\n\n**Solution**: Check network connectivity and verify credentials. Implement retry logic.\n\n```typescript\ntry {\n  await Connection.connect(endpoint);\n} catch (error) {\n  if (error.code === 'TIMEOUT') {\n    // Retry with exponential backoff\n    await retryWithBackoff(() => Connection.connect(endpoint));\n  }\n}\n```\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Connection",
        "methodName": "disconnect",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "connection",
          "disconnect",
          "platform",
          "authentication",
          "quality:1.00"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "Connection operations"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-connect-mbguw0ce-part-0",
      "content": "# Endpoint.connect\n\nConnects to the platform backend.\n\n# Endpoint.connect()\n\nConnects to the platform backend.\n\n## Signature\n```javascript\nconnect(userPrivKey, solutionId, bridgeUrl)\n```\n\n## Parameters\n- `userPrivKey` (string): user's private key\n- `solutionId` (string): ID of the Solution\n- `bridgeUrl` (string): the Bridge Server URL\n\n## Returns\n- Promise<Connection>: instance of Connection\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of establishing secure connection to PrivMX Bridge.\n\n## Examples\n\n### Example 1: connect Example\n\nBasic usage of Endpoint.connect()\n\n```javascript\nconst result = await Endpoint.connect(\"userPrivKey\", \"solutionId\", \"bridgeUrl\");\n```\n\n## Parameters\n\n- **userPrivKey** (string): user's private key\n- **solutionId** (string): ID of the Solution\n- **bridgeUrl** (string): the Bridge Server URL\n\n## Returns\n\n- **Promise<Connection>**: instance of Connection\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "connect",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "connect",
          "connection",
          "platform",
          "authentication",
          "sub-chunk",
          "part-0",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Invalid private key format",
          "Wrong bridge URL"
        ],
        "useCases": [
          "User authentication",
          "Bridge connection"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-createinboxapi-mbguw0ce-part-0",
      "content": "# Endpoint.createInboxApi\n\nCreates an instance of the Inbox API.\n\n# Endpoint.createInboxApi()\n\nCreates an instance of the Inbox API.\n\n## Signature\n```javascript\ncreateInboxApi(connection, threadApi, storeApi)\n```\n\n## Parameters\n- `connection` (Connection): instance of Connection\n- `threadApi` (ThreadApi): instance of ThreadApi\n- `storeApi` (StoreApi): instance of StoreApi\n\n## Returns\n- Promise<InboxApi>: instance of InboxApi\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: createInboxApi Example\n\nBasic usage of Endpoint.createInboxApi()\n\n```javascript\nconst result = await Endpoint.createInboxApi(connection, threadApi, storeApi);\n```\n\n## Parameters\n\n- **connection** (Connection): instance of Connection\n- **threadApi** (ThreadApi): instance of ThreadApi\n- **storeApi** (StoreApi): instance of StoreApi\n\n## Returns\n\n- **Promise<InboxApi>**: instance of InboxApi\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "createInboxApi",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "createinboxapi",
          "crud",
          "creation",
          "new",
          "connection",
          "platform",
          "authentication",
          "sub-chunk",
          "part-0",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Endpoint.connect()",
          "Endpoint.createThreadApi()",
          "Endpoint.createStoreApi()",
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-createthread-mbguw0ce-part-1",
      "content": "es\n\n### Example 1: createThread Example\n\nBasic usage of ThreadApi.createThread()\n\n```javascript\nconst result = await ThreadApi.createThread(\"contextId\", [], [], publicMeta, privateMeta, policies);\n```## Parameters\n\n- **contextId** (string): ID of the Context to create the Thread in\n- **users** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Thread\n- **managers** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **policies** (ContainerPolicy): Thread's policies\n\n## Returns\n\n- **Promise<string>**: ID of the created Thread\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.update`\n- `ThreadApi.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "createThread",
        "importance": "critical",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "createthread",
          "crud",
          "creation",
          "new",
          "messaging",
          "communication",
          "collaboration",
          "sub-chunk",
          "part-1",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Empty users array",
          "Missing manager permissions"
        ],
        "useCases": [
          "Group messaging",
          "Collaborative workspace"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.update",
          "ThreadApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-createstore-mbguw0ce-part-1",
      "content": "xamples\n\n### Example 1: createStore Example\n\nBasic usage of StoreApi.createStore()\n\n```javascript\nconst result = await StoreApi.createStore(\"contextId\", [], [], publicMeta, privateMeta, policies);\n```## Parameters\n\n- **contextId** (string): ID of the Context to create the Store in\n- **users** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Store\n- **managers** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **policies** (ContainerPolicy): Store's policies\n\n## Returns\n\n- **Promise<string>**: created Store ID\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.update`\n- `StoreApi.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "createStore",
        "importance": "critical",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "createstore",
          "crud",
          "creation",
          "new",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-1",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.update",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-createfile-mbguw0ce-part-0",
      "content": "# StoreApi.createFile\n\nCreates a new file in a Store.\n\n# StoreApi.createFile()\n\nCreates a new file in a Store.\n\n## Signature\n```javascript\ncreateFile(storeId, publicMeta, privateMeta, size)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to create the file in\n- `publicMeta` (Uint8Array): public file metadata\n- `privateMeta` (Uint8Array): private file metadata\n- `size` (number): size of the file\n\n## Returns\n- Promise<number>: handle to write data\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: createFile Example\n\nBasic usage of StoreApi.createFile()\n\n```javascript\nconst result = await StoreApi.createFile(\"storeId\", publicMeta, privateMeta, 0);\n```\n\n## Parameters\n\n- **storeId** (string): ID of the Store to create the file in\n- **publicMeta** (Uint8Array): public file metadata\n- **privateMeta** (Uint8Array): private file metadata\n- **size** (number): size of the file\n\n## Returns\n\n- **Promise<number>**: handle to write data\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.update`\n- `StoreApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "createFile",
        "importance": "critical",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "createfile",
          "crud",
          "creation",
          "new",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-0",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.update",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-createinbox-mbguw0ce-part-1",
      "content": "Example 1: createInbox Example\n\nBasic usage of InboxApi.createInbox()\n\n```javascript\nconst result = await InboxApi.createInbox(\"contextId\", [], [], publicMeta, privateMeta, filesConfig, policies);\n```## Parameters\n\n- **contextId** (string): ID of the Context of the new Inbox\n- **users** (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access to the created Inbox\n- **managers** (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **filesConfig** (FilesConfig): struct to override default file configuration\n- **policies** (ContainerWithoutItemPolicy): Inbox policies\n\n## Returns\n\n- **Promise<string>**: ID of the created Inbox\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.update`\n- `InboxApi.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "createInbox",
        "importance": "critical",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "createinbox",
          "crud",
          "creation",
          "new",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-1",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.update",
          "InboxApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-createfilehandle-mbguw0ce-part-0",
      "content": "# InboxApi.createFileHandle\n\nCreates a file handle to send a file to an Inbox. You do not have to be logged in to call this function.\n\n# InboxApi.createFileHandle()\n\nCreates a file handle to send a file to an Inbox. You do not have to be logged in to call this function.\n\n## Signature\n```javascript\ncreateFileHandle(publicMeta, privateMeta, fileSize)\n```\n\n## Parameters\n- `publicMeta` (Uint8Array): public file metadata\n- `privateMeta` (Uint8Array): private file metadata\n- `fileSize` (number): size of the file to send\n\n## Returns\n- Promise<number>: file handle\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: createFileHandle Example\n\nBasic usage of InboxApi.createFileHandle()\n\n```javascript\nconst result = await InboxApi.createFileHandle(publicMeta, privateMeta, 0);\n```\n\n## Parameters\n\n- **publicMeta** (Uint8Array): public file metadata\n- **privateMeta** (Uint8Array): private file metadata\n- **fileSize** (number): size of the file to send\n\n## Returns\n\n- **Promise<number>**: file handle\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.update`\n- `InboxApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "createFileHandle",
        "importance": "critical",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "createfilehandle",
          "crud",
          "creation",
          "new",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-0",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.update",
          "InboxApi.delete"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-setup-mbguw0ce",
      "content": "# Endpoint.setup\n\nLoad the Endpoint's WASM assets and initialize the Endpoint library.\n\n# Endpoint.setup()\n\nLoad the Endpoint's WASM assets and initialize the Endpoint library.\n\n## Signature\n```javascript\nsetup(assetsBasePath)\n```\n\n## Parameters\n- `assetsBasePath` (string?): base path/url to the Endpoint's WebAssembly assets (like: endpoint-wasm-module.js, driver-web-context.js and others)\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of application initialization and library preparation.\n\n## Examples\n\n### Example 1: setup Example\n\nBasic usage of Endpoint.setup()\n\n```javascript\nawait Endpoint.setup(\"assetsBasePath\");\n```\n\n\n\n## Parameters\n\n- **assetsBasePath** (string?): base path/url to the Endpoint's WebAssembly assets (like: endpoint-wasm-module.js, driver-web-context.js and others)\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "setup",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "setup",
          "connection",
          "platform",
          "authentication",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Forgetting to await",
          "Missing WASM assets path"
        ],
        "useCases": [
          "Application initialization",
          "Library configuration"
        ]
      }
    },
    {
      "id": "Core-method-endpoint-geteventqueue-mbguw0ce",
      "content": "# Endpoint.getEventQueue\n\nGets the EventQueue instance.\n\n# Endpoint.getEventQueue()\n\nGets the EventQueue instance.\n\n## Signature\n```javascript\ngetEventQueue()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<EventQueue>: instance of EventQueue\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Endpoint management operations.\n\n## Examples\n\n### Example 1: getEventQueue Example\n\nBasic usage of Endpoint.getEventQueue()\n\n```javascript\nconst result = await Endpoint.getEventQueue();\n```\n\n\n\n## Returns\n\n- **Promise<EventQueue>**: instance of EventQueue\n\n\n## Related Methods\n\n- `Endpoint.create`\n- `Endpoint.list`\n- `Endpoint.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Endpoint",
        "methodName": "getEventQueue",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "endpoint",
          "geteventqueue",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "connection",
          "platform",
          "authentication",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "Endpoint operations"
        ],
        "relatedMethods": [
          "Endpoint.create",
          "Endpoint.list",
          "Endpoint.update"
        ]
      }
    },
    {
      "id": "Core-method-connection-getconnectionid-mbguw0ce",
      "content": "# Connection.getConnectionId\n\nGets the ID of the current connection.\n\n# Connection.getConnectionId()\n\nGets the ID of the current connection.\n\n## Signature\n```javascript\ngetConnectionId()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<number>: ID of the connection\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Connection management operations.\n\n## Examples\n\n### Example 1: getConnectionId Example\n\nBasic usage of Connection.getConnectionId()\n\n```javascript\nconst result = await Connection.getConnectionId();\n```\n\n\n\n## Returns\n\n- **Promise<number>**: ID of the connection\n\n\n## Related Methods\n\n- `Connection.create`\n- `Connection.list`\n- `Connection.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Connection",
        "methodName": "getConnectionId",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "connection",
          "getconnectionid",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "platform",
          "authentication",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "Connection operations"
        ],
        "relatedMethods": [
          "Connection.create",
          "Connection.list",
          "Connection.update"
        ]
      }
    },
    {
      "id": "Core-method-connection-getcontextusers-mbguw0ce",
      "content": "# Connection.getContextUsers\n\nGets a list of users of given context.\n\n# Connection.getContextUsers()\n\nGets a list of users of given context.\n\n## Signature\n```javascript\ngetContextUsers(contextId)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context\n\n## Returns\n- Promise<UserInfo[]>: a list of the UserInfo objects\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Connection management operations.\n\n## Examples\n\n### Example 1: getContextUsers Example\n\nBasic usage of Connection.getContextUsers()\n\n```javascript\nconst result = await Connection.getContextUsers(\"contextId\");\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context\n\n\n## Returns\n\n- **Promise<UserInfo[]>**: a list of the UserInfo objects\n\n\n## Related Methods\n\n- `Connection.create`\n- `Connection.list`\n- `Connection.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Connection",
        "methodName": "getContextUsers",
        "importance": "critical",
        "tags": [
          "core",
          "method",
          "connection",
          "getcontextusers",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "platform",
          "authentication",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "Connection operations"
        ],
        "relatedMethods": [
          "Connection.create",
          "Connection.list",
          "Connection.update"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-createthread-mbguw0ce-part-0",
      "content": "# ThreadApi.createThread\n\nCreates a new Thread in given Context.\n\n# ThreadApi.createThread()\n\nCreates a new Thread in given Context.\n\n## Signature\n```javascript\ncreateThread(contextId, users, managers, publicMeta, privateMeta, policies)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context to create the Thread in\n- `users` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Thread\n- `managers` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `policies` (ContainerPolicy): Thread's policies\n\n## Returns\n- Promise<string>: ID of the created Thread\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of setting up encrypted communication channels.\n\n## Examples\n\n### Example 1: createThread Example\n\nBasic usage of ThreadApi.createThread()\n\n```javascript\nconst result = await ThreadApi.createThread(\"contextId\", [], [], publicMeta, privateMeta, policies);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "createThread",
        "importance": "critical",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "createthread",
          "crud",
          "creation",
          "new",
          "messaging",
          "communication",
          "collaboration",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Empty users array",
          "Missing manager permissions"
        ],
        "useCases": [
          "Group messaging",
          "Collaborative workspace"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.update",
          "ThreadApi.delete"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-getthread-mbguw0ce",
      "content": "# ThreadApi.getThread\n\nGets a Thread by given Thread ID.\n\n# ThreadApi.getThread()\n\nGets a Thread by given Thread ID.\n\n## Signature\n```javascript\ngetThread(threadId)\n```\n\n## Parameters\n- `threadId` (string): ID of Thread to get\n\n## Returns\n- Promise<Thread>: struct containing info about the Thread\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: getThread Example\n\nBasic usage of ThreadApi.getThread()\n\n```javascript\nconst result = await ThreadApi.getThread(\"threadId\");\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of Thread to get\n\n\n## Returns\n\n- **Promise<Thread>**: struct containing info about the Thread\n\n\n## Related Methods\n\n- `ThreadApi.create`\n- `ThreadApi.list`\n- `ThreadApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "getThread",
        "importance": "critical",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "getthread",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.create",
          "ThreadApi.list",
          "ThreadApi.update"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-getmessage-mbguw0ce",
      "content": "# ThreadApi.getMessage\n\nGets a message by given message ID.\n\n# ThreadApi.getMessage()\n\nGets a message by given message ID.\n\n## Signature\n```javascript\ngetMessage(messageId)\n```\n\n## Parameters\n- `messageId` (string): ID of the message to get\n\n## Returns\n- Promise<Message>: struct containing the message\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: getMessage Example\n\nBasic usage of ThreadApi.getMessage()\n\n```javascript\nconst result = await ThreadApi.getMessage(\"messageId\");\n```\n\n\n\n## Parameters\n\n- **messageId** (string): ID of the message to get\n\n\n## Returns\n\n- **Promise<Message>**: struct containing the message\n\n\n## Related Methods\n\n- `ThreadApi.create`\n- `ThreadApi.list`\n- `ThreadApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "getMessage",
        "importance": "critical",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "getmessage",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.create",
          "ThreadApi.list",
          "ThreadApi.update"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-createstore-mbguw0ce-part-0",
      "content": "# StoreApi.createStore\n\nCreates a new Store in given Context.\n\n# StoreApi.createStore()\n\nCreates a new Store in given Context.\n\n## Signature\n```javascript\ncreateStore(contextId, users, managers, publicMeta, privateMeta, policies)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context to create the Store in\n- `users` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Store\n- `managers` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `policies` (ContainerPolicy): Store's policies\n\n## Returns\n- Promise<string>: created Store ID\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: createStore Example\n\nBasic usage of StoreApi.createStore()\n\n```javascript\nconst result = await StoreApi.createStore(\"contextId\", [], [], publicMeta, privateMeta, policies);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "createStore",
        "importance": "critical",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "createstore",
          "crud",
          "creation",
          "new",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.update",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-getstore-mbguw0ce",
      "content": "# StoreApi.getStore\n\nGets a single Store by given Store ID.\n\n# StoreApi.getStore()\n\nGets a single Store by given Store ID.\n\n## Signature\n```javascript\ngetStore(storeId)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to get\n\n## Returns\n- Promise<Store>: struct containing information about the Store\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: getStore Example\n\nBasic usage of StoreApi.getStore()\n\n```javascript\nconst result = await StoreApi.getStore(\"storeId\");\n```\n\n\n\n## Parameters\n\n- **storeId** (string): ID of the Store to get\n\n\n## Returns\n\n- **Promise<Store>**: struct containing information about the Store\n\n\n## Related Methods\n\n- `StoreApi.create`\n- `StoreApi.list`\n- `StoreApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "getStore",
        "importance": "critical",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "getstore",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "files",
          "storage",
          "documents",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.create",
          "StoreApi.list",
          "StoreApi.update"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-getfile-mbguw0ce",
      "content": "# StoreApi.getFile\n\nGets a single file by the given file ID.\n\n# StoreApi.getFile()\n\nGets a single file by the given file ID.\n\n## Signature\n```javascript\ngetFile(fileId)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to get\n\n## Returns\n- Promise<File>: struct containing information about the file\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: getFile Example\n\nBasic usage of StoreApi.getFile()\n\n```javascript\nconst result = await StoreApi.getFile(\"fileId\");\n```\n\n\n\n## Parameters\n\n- **fileId** (string): ID of the file to get\n\n\n## Returns\n\n- **Promise<File>**: struct containing information about the file\n\n\n## Related Methods\n\n- `StoreApi.create`\n- `StoreApi.list`\n- `StoreApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "getFile",
        "importance": "critical",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "getfile",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "files",
          "storage",
          "documents",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.create",
          "StoreApi.list",
          "StoreApi.update"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-createinbox-mbguw0ce-part-0",
      "content": "# InboxApi.createInbox\n\nCreates a new Inbox.\n\n# InboxApi.createInbox()\n\nCreates a new Inbox.\n\n## Signature\n```javascript\ncreateInbox(contextId, users, managers, publicMeta, privateMeta, filesConfig, policies)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context of the new Inbox\n- `users` (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access to the created Inbox\n- `managers` (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `filesConfig` (FilesConfig): struct to override default file configuration\n- `policies` (ContainerWithoutItemPolicy): Inbox policies\n\n## Returns\n- Promise<string>: ID of the created Inbox\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: createInbox Example\n\nBasic usage of InboxApi.createInbox()\n\n```javascript\nconst result = await InboxApi.createInbox(\"contextId\", [], [], publicMeta, privateMeta, filesConfig, policies);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "createInbox",
        "importance": "critical",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "createinbox",
          "crud",
          "creation",
          "new",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.update",
          "InboxApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-getinbox-mbguw0ce",
      "content": "# InboxApi.getInbox\n\nGets a single Inbox by given Inbox ID.\n\n# InboxApi.getInbox()\n\nGets a single Inbox by given Inbox ID.\n\n## Signature\n```javascript\ngetInbox(inboxId)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to get\n\n## Returns\n- Promise<Inbox>: struct containing information about the Inbox\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: getInbox Example\n\nBasic usage of InboxApi.getInbox()\n\n```javascript\nconst result = await InboxApi.getInbox(\"inboxId\");\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to get\n\n\n## Returns\n\n- **Promise<Inbox>**: struct containing information about the Inbox\n\n\n## Related Methods\n\n- `InboxApi.create`\n- `InboxApi.list`\n- `InboxApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "getInbox",
        "importance": "critical",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "getinbox",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.create",
          "InboxApi.list",
          "InboxApi.update"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-getinboxpublicview-mbguw0ce",
      "content": "# InboxApi.getInboxPublicView\n\nGets public data of given Inbox. You do not have to be logged in to call this function.\n\n# InboxApi.getInboxPublicView()\n\nGets public data of given Inbox. You do not have to be logged in to call this function.\n\n## Signature\n```javascript\ngetInboxPublicView(inboxId)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to get\n\n## Returns\n- Promise<InboxPublicView>: struct containing public accessible information about the Inbox\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: getInboxPublicView Example\n\nBasic usage of InboxApi.getInboxPublicView()\n\n```javascript\nconst result = await InboxApi.getInboxPublicView(\"inboxId\");\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to get\n\n\n## Returns\n\n- **Promise<InboxPublicView>**: struct containing public accessible information about the Inbox\n\n\n## Related Methods\n\n- `InboxApi.create`\n- `InboxApi.list`\n- `InboxApi.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "getInboxPublicView",
        "importance": "critical",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "getinboxpublicview",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.create",
          "InboxApi.list",
          "InboxApi.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getprivatepartasbase58-mbguw0ce",
      "content": "# ExtKey.getPrivatePartAsBase58\n\nConverts ExtKey to Base58 string.\n\n# ExtKey.getPrivatePartAsBase58()\n\nConverts ExtKey to Base58 string.\n\n## Signature\n```javascript\ngetPrivatePartAsBase58()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<string>: ExtKey in Base58 format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPrivatePartAsBase58 Example\n\nBasic usage of ExtKey.getPrivatePartAsBase58()\n\n```javascript\nconst result = await ExtKey.getPrivatePartAsBase58();\n```\n\n\n\n## Returns\n\n- **Promise<string>**: ExtKey in Base58 format\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPrivatePartAsBase58",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getprivatepartasbase58",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getpublicpartasbase58-mbguw0ce",
      "content": "# ExtKey.getPublicPartAsBase58\n\nConverts the public part of ExtKey to Base58 string.\n\n# ExtKey.getPublicPartAsBase58()\n\nConverts the public part of ExtKey to Base58 string.\n\n## Signature\n```javascript\ngetPublicPartAsBase58()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<string>: ExtKey in Base58 format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPublicPartAsBase58 Example\n\nBasic usage of ExtKey.getPublicPartAsBase58()\n\n```javascript\nconst result = await ExtKey.getPublicPartAsBase58();\n```\n\n\n\n## Returns\n\n- **Promise<string>**: ExtKey in Base58 format\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPublicPartAsBase58",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getpublicpartasbase58",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getprivatekey-mbguw0ce",
      "content": "# ExtKey.getPrivateKey\n\nExtracts ECC PrivateKey.\n\n# ExtKey.getPrivateKey()\n\nExtracts ECC PrivateKey.\n\n## Signature\n```javascript\ngetPrivateKey()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<string>: ECC key in WIF format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPrivateKey Example\n\nBasic usage of ExtKey.getPrivateKey()\n\n```javascript\nconst result = await ExtKey.getPrivateKey();\n```\n\n\n\n## Returns\n\n- **Promise<string>**: ECC key in WIF format\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPrivateKey",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getprivatekey",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getpublickey-mbguw0cf",
      "content": "# ExtKey.getPublicKey\n\nExtracts ECC PublicKey.\n\n# ExtKey.getPublicKey()\n\nExtracts ECC PublicKey.\n\n## Signature\n```javascript\ngetPublicKey()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<string>: ECC key in BASE58DER format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPublicKey Example\n\nBasic usage of ExtKey.getPublicKey()\n\n```javascript\nconst result = await ExtKey.getPublicKey();\n```\n\n\n\n## Returns\n\n- **Promise<string>**: ECC key in BASE58DER format\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPublicKey",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getpublickey",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getprivateenckey-mbguw0cf",
      "content": "# ExtKey.getPrivateEncKey\n\nExtracts raw ECC PrivateKey.\n\n# ExtKey.getPrivateEncKey()\n\nExtracts raw ECC PrivateKey.\n\n## Signature\n```javascript\ngetPrivateEncKey()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<Uint8Array>: ECC PrivateKey\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPrivateEncKey Example\n\nBasic usage of ExtKey.getPrivateEncKey()\n\n```javascript\nconst result = await ExtKey.getPrivateEncKey();\n```\n\n\n\n## Returns\n\n- **Promise<Uint8Array>**: ECC PrivateKey\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPrivateEncKey",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getprivateenckey",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getpublickeyasbase58address-mbguw0cf",
      "content": "# ExtKey.getPublicKeyAsBase58Address\n\nExtracts ECC PublicKey Address.\n\n# ExtKey.getPublicKeyAsBase58Address()\n\nExtracts ECC PublicKey Address.\n\n## Signature\n```javascript\ngetPublicKeyAsBase58Address()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<string>: ECC Address in BASE58 format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getPublicKeyAsBase58Address Example\n\nBasic usage of ExtKey.getPublicKeyAsBase58Address()\n\n```javascript\nconst result = await ExtKey.getPublicKeyAsBase58Address();\n```\n\n\n\n## Returns\n\n- **Promise<string>**: ECC Address in BASE58 format\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getPublicKeyAsBase58Address",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getpublickeyasbase58address",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-getchaincode-mbguw0cf",
      "content": "# ExtKey.getChainCode\n\nGets the chain code of Extended Key.\n\n# ExtKey.getChainCode()\n\nGets the chain code of Extended Key.\n\n## Signature\n```javascript\ngetChainCode()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<Uint8Array>: Raw chain code\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: getChainCode Example\n\nBasic usage of ExtKey.getChainCode()\n\n```javascript\nconst result = await ExtKey.getChainCode();\n```\n\n\n\n## Returns\n\n- **Promise<Uint8Array>**: Raw chain code\n\n\n## Related Methods\n\n- `ExtKey.create`\n- `ExtKey.list`\n- `ExtKey.update`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "getChainCode",
        "importance": "critical",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "getchaincode",
          "crud",
          "retrieval",
          "fetch",
          "read",
          "encryption",
          "security",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not handling missing resources",
          "Assuming resource always exists"
        ],
        "useCases": [
          "ExtKey operations"
        ],
        "relatedMethods": [
          "ExtKey.create",
          "ExtKey.list",
          "ExtKey.update"
        ]
      }
    },
    {
      "id": "merged-Core-class-endpoint-mbguw0ce-9",
      "content": "# Endpoint\n\nClass with the static factory methods to create instances of Connection and APIs\n\n# Endpoint\n\nClass with the static factory methods to create instances of Connection and APIs\n\n## Available Methods:\n- setup()\n- getEventQueue()\n- connect()\n- connectPublic()\n- createThreadApi()\n- createStoreApi()\n- createInboxApi()\n- createCryptoApi()\n- createEventApi()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Connection.connect`\n- `Platform.login`\n- `Context.create`\n\n\n\n---\n\ns private key\n- **solutionId** (string): ID of the Solution\n- **bridgeUrl** (string): the Bridge Server URL\n\n## Returns\n\n- **Promise<Connection>**: instance of Connection\n\n## Common Issues & Solutions### Connection timeout or failure\n\n**Cause**: Network issues or invalid credentials\n\n**Solution**: Check network connectivity and verify credentials. Implement retry logic.\n\n```typescript\ntry {\n  await Connection.connect(endpoint);\n} catch (error) {\n  if (error.code === 'TIMEOUT') {\n    // Retry with exponential backoff\n    await retryWithBackoff(() => Connection.connect(endpoint));\n  }\n}\n```\n\n---\n\nipt\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n---\n\n (StoreApi): instance of StoreApi\n\n## Returns\n\n- **Promise<InboxApi>**: instance of InboxApi\n\n## Related Methods\n\n- `Endpoint.get`\n- `Endpoint.update`\n- `Endpoint.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n\n---\n\n# Connection\n\nClass representing instance of Connection\n\n# Connection\n\nClass representing instance of Connection\n\n## Available Methods:\n- getConnectionId()\n- listContexts()\n- getContextUsers()\n- disconnect()\n- setUserVerifier()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Connection.connect`\n- `Platform.login`\n- `Context.create`\n\n\n\n---\n\nxt of Connection management operations.\n\n## Examples\n\n### Example 1: setUserVerifier Example\n\nBasic usage of Connection.setUserVerifier()\n\n```javascript\nawait Connection.setUserVerifier(verifier);\n```## Parameters\n\n- **verifier** (UserVerifierInterface): an implementation of the UserVerifierInterface\n\n---\n\n# EventQueue\n\nClass representing instance of Event Queue\n\n# EventQueue\n\nClass representing instance of Event Queue\n\n## Available Methods:\n- waitEvent()\n- emitBreakEvent()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Connection.connect`\n- `Platform.login`\n- `Context.create`\n\n\n\n---\n\n# EventQueue.waitEvent\n\n\n\n# EventQueue.waitEvent()\n\n\n\n## Signature\n```javascript\nwaitEvent()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<Event>: undefined undefined\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of EventQueue management operations.\n\n## Examples\n\n### Example 1: waitEvent Example\n\nBasic usage of EventQueue.waitEvent()\n\n```javascript\nconst result = await EventQueue.waitEvent();\n```\n\n\n\n## Returns\n\n- **Promise<Event>**: undefined undefined\n\n\n---\n\n# EventQueue.emitBreakEvent\n\n\n\n# EventQueue.emitBreakEvent()\n\n\n\n## Signature\n```javascript\nemitBreakEvent()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of EventQueue management operations.\n\n## Examples\n\n### Example 1: emitBreakEvent Example\n\nBasic usage of EventQueue.emitBreakEvent()\n\n```javascript\nawait EventQueue.emitBreakEvent();\n```\n\n",
      "metadata": {
        "type": "class",
        "namespace": "Core",
        "className": "Endpoint",
        "importance": "critical",
        "tags": [
          "core",
          "class",
          "endpoint",
          "connection",
          "platform",
          "authentication",
          "method",
          "connect",
          "sub-chunk",
          "part-1",
          "createthreadapi",
          "crud",
          "creation",
          "new",
          "createinboxapi",
          "setuserverifier",
          "eventqueue",
          "waitevent",
          "emitbreakevent",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "relatedMethods": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Endpoint.get",
          "Endpoint.update",
          "Endpoint.delete"
        ],
        "useCases": [
          "User authentication",
          "Bridge connection",
          "Endpoint operations",
          "Connection operations",
          "EventQueue operations"
        ],
        "commonMistakes": [
          "Invalid private key format",
          "Wrong bridge URL",
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "dependencies": [
          "Endpoint.connect()",
          "Connection.connect",
          "Platform.login",
          "Endpoint.createThreadApi()",
          "Endpoint.createStoreApi()"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-deletethread-mbguw0ce",
      "content": "# ThreadApi.deleteThread\n\nDeletes a Thread by given Thread ID.\n\n# ThreadApi.deleteThread()\n\nDeletes a Thread by given Thread ID.\n\n## Signature\n```javascript\ndeleteThread(threadId)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to delete\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: deleteThread Example\n\nBasic usage of ThreadApi.deleteThread()\n\n```javascript\nawait ThreadApi.deleteThread(\"threadId\");\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of the Thread to delete\n\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "deleteThread",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "deletethread",
          "crud",
          "removal",
          "cleanup",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.list"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-deletemessage-mbguw0ce",
      "content": "# ThreadApi.deleteMessage\n\nDeletes a message by given message ID.\n\n# ThreadApi.deleteMessage()\n\nDeletes a message by given message ID.\n\n## Signature\n```javascript\ndeleteMessage(messageId)\n```\n\n## Parameters\n- `messageId` (string): ID of the message to delete\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: deleteMessage Example\n\nBasic usage of ThreadApi.deleteMessage()\n\n```javascript\nawait ThreadApi.deleteMessage(\"messageId\");\n```\n\n\n\n## Parameters\n\n- **messageId** (string): ID of the message to delete\n\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "deleteMessage",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "deletemessage",
          "crud",
          "removal",
          "cleanup",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.list"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-deletestore-mbguw0ce",
      "content": "# StoreApi.deleteStore\n\nDeletes a Store by given Store ID.\n\n# StoreApi.deleteStore()\n\nDeletes a Store by given Store ID.\n\n## Signature\n```javascript\ndeleteStore(storeId)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to delete\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: deleteStore Example\n\nBasic usage of StoreApi.deleteStore()\n\n```javascript\nawait StoreApi.deleteStore(\"storeId\");\n```\n\n\n\n## Parameters\n\n- **storeId** (string): ID of the Store to delete\n\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "deleteStore",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "deletestore",
          "crud",
          "removal",
          "cleanup",
          "files",
          "storage",
          "documents",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.list"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-deletefile-mbguw0ce",
      "content": "# StoreApi.deleteFile\n\nDeletes a file by given ID.\n\n# StoreApi.deleteFile()\n\nDeletes a file by given ID.\n\n## Signature\n```javascript\ndeleteFile(fileId)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to delete\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: deleteFile Example\n\nBasic usage of StoreApi.deleteFile()\n\n```javascript\nawait StoreApi.deleteFile(\"fileId\");\n```\n\n\n\n## Parameters\n\n- **fileId** (string): ID of the file to delete\n\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "deleteFile",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "deletefile",
          "crud",
          "removal",
          "cleanup",
          "files",
          "storage",
          "documents",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.list"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-deleteinbox-mbguw0ce",
      "content": "# InboxApi.deleteInbox\n\nDeletes an Inbox by given Inbox ID.\n\n# InboxApi.deleteInbox()\n\nDeletes an Inbox by given Inbox ID.\n\n## Signature\n```javascript\ndeleteInbox(inboxId)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to delete\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: deleteInbox Example\n\nBasic usage of InboxApi.deleteInbox()\n\n```javascript\nawait InboxApi.deleteInbox(\"inboxId\");\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to delete\n\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "deleteInbox",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "deleteinbox",
          "crud",
          "removal",
          "cleanup",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.list"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-deleteentry-mbguw0ce",
      "content": "# InboxApi.deleteEntry\n\nDelete an entry from an Inbox.\n\n# InboxApi.deleteEntry()\n\nDelete an entry from an Inbox.\n\n## Signature\n```javascript\ndeleteEntry(inboxEntryId)\n```\n\n## Parameters\n- `inboxEntryId` (string): ID of an entry to delete from the Inbox\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: deleteEntry Example\n\nBasic usage of InboxApi.deleteEntry()\n\n```javascript\nawait InboxApi.deleteEntry(\"inboxEntryId\");\n```\n\n\n\n## Parameters\n\n- **inboxEntryId** (string): ID of an entry to delete from the Inbox\n\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.list`\n\n\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "deleteEntry",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "deleteentry",
          "crud",
          "removal",
          "cleanup",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.97"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking dependencies before deletion",
          "Missing confirmation for destructive operations"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.list"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-updatethread-mbguw0ce-part-1",
      "content": "les\n\n### Example 1: updateThread Example\n\nBasic usage of ThreadApi.updateThread()\n\n```javascript\nawait ThreadApi.updateThread(\"threadId\", [], [], publicMeta, privateMeta, 0, true, true, policies);\n```## Parameters\n\n- **threadId** (string): ID of the Thread to update\n- **users** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Thread\n- **managers** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **version** (number): current version of the updated Thread\n- **force** (boolean): force update (without checking version)\n- **forceGenerateNewKey** (boolean): force to regenerate a key for the Thread\n- **policies** (ContainerPolicy): Thread's policies\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.create`\n- `ThreadApi.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "updateThread",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "updatethread",
          "crud",
          "modification",
          "edit",
          "messaging",
          "communication",
          "collaboration",
          "sub-chunk",
          "part-1",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.create",
          "ThreadApi.delete"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-updatemessage-mbguw0ce-part-0",
      "content": "# ThreadApi.updateMessage\n\nUpdate message in a Thread.\n\n# ThreadApi.updateMessage()\n\nUpdate message in a Thread.\n\n## Signature\n```javascript\nupdateMessage(messageId, publicMeta, privateMeta, data)\n```\n\n## Parameters\n- `messageId` (string): ID of the message to update\n- `publicMeta` (Uint8Array): public message metadata\n- `privateMeta` (Uint8Array): private message metadata\n- `data` (Uint8Array): content of the message\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: updateMessage Example\n\nBasic usage of ThreadApi.updateMessage()\n\n```javascript\nawait ThreadApi.updateMessage(\"messageId\", publicMeta, privateMeta, data);\n```\n\n## Parameters\n\n- **messageId** (string): ID of the message to update\n- **publicMeta** (Uint8Array): public message metadata\n- **privateMeta** (Uint8Array): private message metadata\n- **data** (Uint8Array): content of the message\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.create`\n- `ThreadApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "updateMessage",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "updatemessage",
          "crud",
          "modification",
          "edit",
          "messaging",
          "communication",
          "collaboration",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.create",
          "ThreadApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-updatestore-mbguw0ce-part-1",
      "content": " Examples\n\n### Example 1: updateStore Example\n\nBasic usage of StoreApi.updateStore()\n\n```javascript\nawait StoreApi.updateStore(\"storeId\", [], [], publicMeta, privateMeta, 0, true, true, policies);\n```## Parameters\n\n- **storeId** (string): ID of the Store to update\n- **users** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Store\n- **managers** (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **version** (number): current version of the updated Store\n- **force** (boolean): force update (without checking version)\n- **forceGenerateNewKey** (boolean): force to regenerate a key for the Store\n- **policies** (ContainerPolicy): Store's policies\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n- `StoreApi.delete`\n\n## Common Issues & Solutions\n\n### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "updateStore",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "updatestore",
          "crud",
          "modification",
          "edit",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-1",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-updatefile-mbguw0ce-part-0",
      "content": "# StoreApi.updateFile\n\nUpdate an existing file in a Store.\n\n# StoreApi.updateFile()\n\nUpdate an existing file in a Store.\n\n## Signature\n```javascript\nupdateFile(fileId, publicMeta, privateMeta, size)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to update\n- `publicMeta` (Uint8Array): public file metadata\n- `privateMeta` (Uint8Array): private file metadata\n- `size` (number): size of the file\n\n## Returns\n- Promise<number>: handle to write file data\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: updateFile Example\n\nBasic usage of StoreApi.updateFile()\n\n```javascript\nconst result = await StoreApi.updateFile(\"fileId\", publicMeta, privateMeta, 0);\n```\n\n## Parameters\n\n- **fileId** (string): ID of the file to update\n- **publicMeta** (Uint8Array): public file metadata\n- **privateMeta** (Uint8Array): private file metadata\n- **size** (number): size of the file\n\n## Returns\n\n- **Promise<number>**: handle to write file data\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n- `StoreApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "updateFile",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "updatefile",
          "crud",
          "modification",
          "edit",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-updatefilemeta-mbguw0ce-part-0",
      "content": "# StoreApi.updateFileMeta\n\nUpdate metadata of an existing file in a Store.\n\n# StoreApi.updateFileMeta()\n\nUpdate metadata of an existing file in a Store.\n\n## Signature\n```javascript\nupdateFileMeta(fileId, publicMeta, privateMeta)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to update\n- `publicMeta` (Uint8Array): public file metadata\n- `privateMeta` (Uint8Array): private file metadata\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: updateFileMeta Example\n\nBasic usage of StoreApi.updateFileMeta()\n\n```javascript\nawait StoreApi.updateFileMeta(\"fileId\", publicMeta, privateMeta);\n```\n\n## Parameters\n\n- **fileId** (string): ID of the file to update\n- **publicMeta** (Uint8Array): public file metadata\n- **privateMeta** (Uint8Array): private file metadata\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n- `StoreApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "updateFileMeta",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "updatefilemeta",
          "crud",
          "modification",
          "edit",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-0",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-updateinbox-mbguw0ce-part-1",
      "content": "MX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples### Example 1: updateInbox Example\n\nBasic usage of InboxApi.updateInbox()\n\n```javascript\nawait InboxApi.updateInbox(\"inboxId\", [], [], publicMeta, privateMeta, filesConfig, 0, true, true, policies);\n```\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to update\n- **users** (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access to the created Inbox\n- **managers** (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox\n- **publicMeta** (Uint8Array): public (unencrypted) metadata\n- **privateMeta** (Uint8Array): private (encrypted) metadata\n- **filesConfig** (FilesConfig | undefined): struct to override default files configuration\n- **version** (number): current version of the updated Inbox\n- **force** (boolean): force update (without checking version)\n- **forceGenerateNewKey** (boolean): force to regenerate a key for the Inbox\n- **policies** (ContainerWithoutItemPolicy): Inbox policies\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.create`\n- `InboxApi.delete`\n\n## Common Issues & Solutions",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "updateInbox",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "updateinbox",
          "crud",
          "modification",
          "edit",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-1",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.create",
          "InboxApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-listentries-mbguw0ce",
      "content": "# InboxApi.listEntries\n\nGets list of entries in given Inbox.\n\n# InboxApi.listEntries()\n\nGets list of entries in given Inbox.\n\n## Signature\n```javascript\nlistEntries(inboxId, pagingQuery)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<InboxEntry>>: struct containing list of entries\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: listEntries Example\n\nBasic usage of InboxApi.listEntries()\n\n```javascript\nconst result = await InboxApi.listEntries(\"inboxId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<InboxEntry>>**: struct containing list of entries\n\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "listEntries",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "listentries",
          "crud",
          "enumeration",
          "browse",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.95"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.create"
        ]
      }
    },
    {
      "id": "Core-method-connection-listcontexts-mbguw0ce",
      "content": "# Connection.listContexts\n\nGets a list of Contexts available for the user.\n\n# Connection.listContexts()\n\nGets a list of Contexts available for the user.\n\n## Signature\n```javascript\nlistContexts(pagingQuery)\n```\n\n## Parameters\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<Context>>: struct containing a list of Contexts\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Connection management operations.\n\n## Examples\n\n### Example 1: listContexts Example\n\nBasic usage of Connection.listContexts()\n\n```javascript\nconst result = await Connection.listContexts(pagingQuery);\n```\n\n\n\n## Parameters\n\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<Context>>**: struct containing a list of Contexts\n\n\n## Related Methods\n\n- `Connection.get`\n- `Connection.create`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Connection",
        "methodName": "listContexts",
        "importance": "high",
        "tags": [
          "core",
          "method",
          "connection",
          "listcontexts",
          "crud",
          "enumeration",
          "browse",
          "platform",
          "authentication",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "Connection operations"
        ],
        "relatedMethods": [
          "Connection.get",
          "Connection.create"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-updatethread-mbguw0ce-part-0",
      "content": "# ThreadApi.updateThread\n\nUpdates an existing Thread.\n\n# ThreadApi.updateThread()\n\nUpdates an existing Thread.\n\n## Signature\n```javascript\nupdateThread(threadId, users, managers, publicMeta, privateMeta, version, force, forceGenerateNewKey, policies)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to update\n- `users` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Thread\n- `managers` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Thread\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `version` (number): current version of the updated Thread\n- `force` (boolean): force update (without checking version)\n- `forceGenerateNewKey` (boolean): force to regenerate a key for the Thread\n- `policies` (ContainerPolicy): Thread's policies\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: updateThread Example\n\nBasic usage of ThreadApi.updateThread()\n\n```javascript\nawait ThreadApi.updateThread(\"threadId\", [], [], publicMeta, privateMeta, 0, true, true, policies);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "updateThread",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "updatethread",
          "crud",
          "modification",
          "edit",
          "messaging",
          "communication",
          "collaboration",
          "sub-chunk",
          "part-0",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.create",
          "ThreadApi.delete"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-listthreads-mbguw0ce",
      "content": "# ThreadApi.listThreads\n\nGets a list of Threads in given Context.\n\n# ThreadApi.listThreads()\n\nGets a list of Threads in given Context.\n\n## Signature\n```javascript\nlistThreads(contextId, pagingQuery)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context to get the Threads from\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<Thread>>: struct containing a list of Threads\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: listThreads Example\n\nBasic usage of ThreadApi.listThreads()\n\n```javascript\nconst result = await ThreadApi.listThreads(\"contextId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context to get the Threads from\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<Thread>>**: struct containing a list of Threads\n\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "listThreads",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "listthreads",
          "crud",
          "enumeration",
          "browse",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.create"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-listmessages-mbguw0ce",
      "content": "# ThreadApi.listMessages\n\nGets a list of messages from a Thread.\n\n# ThreadApi.listMessages()\n\nGets a list of messages from a Thread.\n\n## Signature\n```javascript\nlistMessages(threadId, pagingQuery)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to list messages from\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<Message>>: struct containing a list of messages\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: listMessages Example\n\nBasic usage of ThreadApi.listMessages()\n\n```javascript\nconst result = await ThreadApi.listMessages(\"threadId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of the Thread to list messages from\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<Message>>**: struct containing a list of messages\n\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "listMessages",
        "importance": "high",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "listmessages",
          "crud",
          "enumeration",
          "browse",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ThreadApi operations"
        ],
        "relatedMethods": [
          "ThreadApi.get",
          "ThreadApi.create"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-updatestore-mbguw0ce-part-0",
      "content": "# StoreApi.updateStore\n\nUpdates an existing Store.\n\n# StoreApi.updateStore()\n\nUpdates an existing Store.\n\n## Signature\n```javascript\nupdateStore(storeId, users, managers, publicMeta, privateMeta, version, force, forceGenerateNewKey, policies)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to update\n- `users` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access to the created Store\n- `managers` (UserWithPubKey[]): array of UserWithPubKey structs which indicates who will have access (and management rights) to the created Store\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `version` (number): current version of the updated Store\n- `force` (boolean): force update (without checking version)\n- `forceGenerateNewKey` (boolean): force to regenerate a key for the Store\n- `policies` (ContainerPolicy): Store's policies\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: updateStore Example\n\nBasic usage of StoreApi.updateStore()\n\n```javascript\nawait StoreApi.updateStore(\"storeId\", [], [], publicMeta, privateMeta, 0, true, true, policies);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "updateStore",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "updatestore",
          "crud",
          "modification",
          "edit",
          "files",
          "storage",
          "documents",
          "sub-chunk",
          "part-0",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create",
          "StoreApi.delete"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-liststores-mbguw0ce",
      "content": "# StoreApi.listStores\n\nGets a list of Stores in given Context.\n\n# StoreApi.listStores()\n\nGets a list of Stores in given Context.\n\n## Signature\n```javascript\nlistStores(contextId, pagingQuery)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context to get the Stores from\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<Store>>: struct containing list of Stores\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: listStores Example\n\nBasic usage of StoreApi.listStores()\n\n```javascript\nconst result = await StoreApi.listStores(\"contextId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context to get the Stores from\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<Store>>**: struct containing list of Stores\n\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "listStores",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "liststores",
          "crud",
          "enumeration",
          "browse",
          "files",
          "storage",
          "documents",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-listfiles-mbguw0ce",
      "content": "# StoreApi.listFiles\n\nGets a list of files in given Store.\n\n# StoreApi.listFiles()\n\nGets a list of files in given Store.\n\n## Signature\n```javascript\nlistFiles(storeId, pagingQuery)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to get files from\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<File>>: struct containing list of files\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: listFiles Example\n\nBasic usage of StoreApi.listFiles()\n\n```javascript\nconst result = await StoreApi.listFiles(\"storeId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **storeId** (string): ID of the Store to get files from\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<File>>**: struct containing list of files\n\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "listFiles",
        "importance": "high",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "listfiles",
          "crud",
          "enumeration",
          "browse",
          "files",
          "storage",
          "documents",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ],
        "relatedMethods": [
          "StoreApi.get",
          "StoreApi.create"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-listinboxes-mbguw0ce",
      "content": "# InboxApi.listInboxes\n\nGets s list of Inboxes in given Context.\n\n# InboxApi.listInboxes()\n\nGets s list of Inboxes in given Context.\n\n## Signature\n```javascript\nlistInboxes(contextId, pagingQuery)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context to get Inboxes from\n- `pagingQuery` (PagingQuery): struct with list query parameters\n\n## Returns\n- Promise<PagingList<Inbox>>: struct containing list of Inboxes\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: listInboxes Example\n\nBasic usage of InboxApi.listInboxes()\n\n```javascript\nconst result = await InboxApi.listInboxes(\"contextId\", pagingQuery);\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context to get Inboxes from\n- **pagingQuery** (PagingQuery): struct with list query parameters\n\n\n## Returns\n\n- **Promise<PagingList<Inbox>>**: struct containing list of Inboxes\n\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.create`\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "listInboxes",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "listinboxes",
          "crud",
          "enumeration",
          "browse",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.93"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.create"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-updateinbox-mbguw0ce-part-0",
      "content": "# InboxApi.updateInbox\n\nUpdates an existing Inbox.\n\n# InboxApi.updateInbox()\n\nUpdates an existing Inbox.\n\n## Signature\n```javascript\nupdateInbox(inboxId, users, managers, publicMeta, privateMeta, filesConfig, version, force, forceGenerateNewKey, policies)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to update\n- `users` (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access to the created Inbox\n- `managers` (UserWithPubKey[]): vector of UserWithPubKey structs which indicates who will have access (and management rights) to the created Inbox\n- `publicMeta` (Uint8Array): public (unencrypted) metadata\n- `privateMeta` (Uint8Array): private (encrypted) metadata\n- `filesConfig` (FilesConfig | undefined): struct to override default files configuration\n- `version` (number): current version of the updated Inbox\n- `force` (boolean): force update (without checking version)\n- `forceGenerateNewKey` (boolean): force to regenerate a key for the Inbox\n- `policies` (ContainerWithoutItemPolicy): Inbox policies\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "updateInbox",
        "importance": "high",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "updateinbox",
          "crud",
          "modification",
          "edit",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-0",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "useCases": [
          "InboxApi operations"
        ],
        "relatedMethods": [
          "InboxApi.get",
          "InboxApi.create",
          "InboxApi.delete"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-prepareentry-mbguw0ce-part-0",
      "content": "# InboxApi.prepareEntry\n\nPrepares a request to send data to an Inbox. You do not have to be logged in to call this function.\n\n# InboxApi.prepareEntry()\n\nPrepares a request to send data to an Inbox. You do not have to be logged in to call this function.\n\n## Signature\n```javascript\nprepareEntry(inboxId, data, inboxFileHandles, userPrivKey)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to which the request applies\n- `data` (Uint8Array): entry data to send\n- `inboxFileHandles` (number[]?): optional list of file handles that will be sent with the request\n- `userPrivKey` (string | undefined?): optional sender's private key which can be used later to encrypt data for that sender\n\n## Returns\n- Promise<number>: Inbox handle\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: prepareEntry Example\n\nBasic usage of InboxApi.prepareEntry()\n\n```javascript\nconst result = await InboxApi.prepareEntry(\"inboxId\", data, [], userPrivKey);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "prepareEntry",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "prepareentry",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-0",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-sendentry-mbguw0ce",
      "content": "# InboxApi.sendEntry\n\nSends data to an Inbox. You do not have to be logged in to call this function.\n\n# InboxApi.sendEntry()\n\nSends data to an Inbox. You do not have to be logged in to call this function.\n\n## Signature\n```javascript\nsendEntry(inboxHandle)\n```\n\n## Parameters\n- `inboxHandle` (number): ID of the Inbox to which the request applies\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: sendEntry Example\n\nBasic usage of InboxApi.sendEntry()\n\n```javascript\nawait InboxApi.sendEntry(0);\n```\n\n\n\n## Parameters\n\n- **inboxHandle** (number): ID of the Inbox to which the request applies\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "sendEntry",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "sendentry",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-readentry-mbguw0ce",
      "content": "# InboxApi.readEntry\n\nGets an entry from an Inbox.\n\n# InboxApi.readEntry()\n\nGets an entry from an Inbox.\n\n## Signature\n```javascript\nreadEntry(inboxEntryId)\n```\n\n## Parameters\n- `inboxEntryId` (string): ID of an entry to read from the Inbox\n\n## Returns\n- Promise<InboxEntry>: struct containing data of the selected entry stored in the Inbox\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: readEntry Example\n\nBasic usage of InboxApi.readEntry()\n\n```javascript\nconst result = await InboxApi.readEntry(\"inboxEntryId\");\n```\n\n\n\n## Parameters\n\n- **inboxEntryId** (string): ID of an entry to read from the Inbox\n\n\n## Returns\n\n- **Promise<InboxEntry>**: struct containing data of the selected entry stored in the Inbox\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "readEntry",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "readentry",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-writetofile-mbguw0ce-part-0",
      "content": "# InboxApi.writeToFile\n\nSends a file's data chunk to an Inbox. (note: To send the entire file - divide it into pieces of the desired size and call the function for each fragment.) You do not have to be logged in to call this function.\n\n# InboxApi.writeToFile()\n\nSends a file's data chunk to an Inbox. (note: To send the entire file - divide it into pieces of the desired size and call the function for each fragment.) You do not have to be logged in to call this function.\n\n## Signature\n```javascript\nwriteToFile(inboxHandle, inboxFileHandle, dataChunk)\n```\n\n## Parameters\n- `inboxHandle` (number): Handle to the prepared Inbox entry\n- `inboxFileHandle` (number): handle to the file where the uploaded chunk belongs\n- `dataChunk` (Uint8Array): - file chunk to send\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: writeToFile Example\n\nBasic usage of InboxApi.writeToFile()\n\n```javascript\nawait InboxApi.writeToFile(0, 0, dataChunk);\n```\n\n## Parameters\n\n- **inboxHandle** (number): Handle to the prepared Inbox entry\n- **inboxFileHandle** (number): handle to the file where the uploaded chunk belongs\n- **dataChunk** (Uint8Array): - file chunk to send",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "writeToFile",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "writetofile",
          "inbox",
          "notifications",
          "delivery",
          "sub-chunk",
          "part-0",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-subscribeforentryevents-mbguw0ce",
      "content": "# InboxApi.subscribeForEntryEvents\n\nSubscribes for events in given Inbox.\n\n# InboxApi.subscribeForEntryEvents()\n\nSubscribes for events in given Inbox.\n\n## Signature\n```javascript\nsubscribeForEntryEvents(inboxId)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to subscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: subscribeForEntryEvents Example\n\nBasic usage of InboxApi.subscribeForEntryEvents()\n\n```javascript\nawait InboxApi.subscribeForEntryEvents(\"inboxId\");\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to subscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "subscribeForEntryEvents",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "subscribeforentryevents",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-unsubscribefromentryevents-mbguw0ce",
      "content": "# InboxApi.unsubscribeFromEntryEvents\n\nUnsubscribes from events in given Inbox.\n\n# InboxApi.unsubscribeFromEntryEvents()\n\nUnsubscribes from events in given Inbox.\n\n## Signature\n```javascript\nunsubscribeFromEntryEvents(inboxId)\n```\n\n## Parameters\n- `inboxId` (string): ID of the Inbox to unsubscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromEntryEvents Example\n\nBasic usage of InboxApi.unsubscribeFromEntryEvents()\n\n```javascript\nawait InboxApi.unsubscribeFromEntryEvents(\"inboxId\");\n```\n\n\n\n## Parameters\n\n- **inboxId** (string): ID of the Inbox to unsubscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "unsubscribeFromEntryEvents",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "unsubscribefromentryevents",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.92"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Core-method-connection-setuserverifier-mbguw0ce-part-0",
      "content": "# Connection.setUserVerifier\n\nSets user's custom verification callback. The feature allows the developer to set up a callback for user verification. A developer can implement an interface and pass the implementation to the function. Each time data is read from the container, a callback will be triggered, allowing the developer to validate the sender in an external service, e.g. Developer's Application Server or PKI Server.\n\n# Connection.setUserVerifier()\n\nSets user's custom verification callback. The feature allows the developer to set up a callback for user verification. A developer can implement an interface and pass the implementation to the function. Each time data is read from the container, a callback will be triggered, allowing the developer to validate the sender in an external service, e.g. Developer's Application Server or PKI Server.\n\n## Signature\n```javascript\nsetUserVerifier(verifier)\n```\n\n## Parameters\n- `verifier` (UserVerifierInterface): an implementation of the UserVerifierInterface\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of Connection management operations.\n\n## Examples\n\n### Example 1: setUserVerifier Example\n\nBasic usage of Connection.setUserVerifier()\n\n```javascript\nawait Connection.setUserVerifier(verifier);\n```",
      "metadata": {
        "type": "method",
        "namespace": "Core",
        "className": "Connection",
        "methodName": "setUserVerifier",
        "importance": "medium",
        "tags": [
          "core",
          "method",
          "connection",
          "setuserverifier",
          "platform",
          "authentication",
          "sub-chunk",
          "part-0",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "Connection operations"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-sendmessage-mbguw0ce",
      "content": "# ThreadApi.sendMessage\n\nSends a message in a Thread.\n\n# ThreadApi.sendMessage()\n\nSends a message in a Thread.\n\n## Signature\n```javascript\nsendMessage(threadId, publicMeta, privateMeta, data)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to send message to\n- `publicMeta` (Uint8Array): public message metadata\n- `privateMeta` (Uint8Array): private message metadata\n- `data` (Uint8Array): content of the message\n\n## Returns\n- Promise<string>: ID of the new message\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of real-time messaging and data exchange.\n\n## Examples\n\n### Example 1: sendMessage Example\n\nBasic usage of ThreadApi.sendMessage()\n\n```javascript\nconst result = await ThreadApi.sendMessage(\"threadId\", publicMeta, privateMeta, data);\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of the Thread to send message to\n- **publicMeta** (Uint8Array): public message metadata\n- **privateMeta** (Uint8Array): private message metadata\n- **data** (Uint8Array): content of the message\n\n\n## Returns\n\n- **Promise<string>**: ID of the new message\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "sendMessage",
        "importance": "medium",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "sendmessage",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Data not serialized",
          "Missing thread access"
        ],
        "useCases": [
          "Chat messages",
          "Notifications"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-subscribeformessageevents-mbguw0ce",
      "content": "# ThreadApi.subscribeForMessageEvents\n\nSubscribes for events in given Thread.\n\n# ThreadApi.subscribeForMessageEvents()\n\nSubscribes for events in given Thread.\n\n## Signature\n```javascript\nsubscribeForMessageEvents(threadId)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to subscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: subscribeForMessageEvents Example\n\nBasic usage of ThreadApi.subscribeForMessageEvents()\n\n```javascript\nawait ThreadApi.subscribeForMessageEvents(\"threadId\");\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of the Thread to subscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "subscribeForMessageEvents",
        "importance": "medium",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "subscribeformessageevents",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ThreadApi operations"
        ]
      }
    },
    {
      "id": "Threads-method-threadapi-unsubscribefrommessageevents-mbguw0ce",
      "content": "# ThreadApi.unsubscribeFromMessageEvents\n\nUnsubscribes from events in given Thread.\n\n# ThreadApi.unsubscribeFromMessageEvents()\n\nUnsubscribes from events in given Thread.\n\n## Signature\n```javascript\nunsubscribeFromMessageEvents(threadId)\n```\n\n## Parameters\n- `threadId` (string): ID of the Thread to unsubscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromMessageEvents Example\n\nBasic usage of ThreadApi.unsubscribeFromMessageEvents()\n\n```javascript\nawait ThreadApi.unsubscribeFromMessageEvents(\"threadId\");\n```\n\n\n\n## Parameters\n\n- **threadId** (string): ID of the Thread to unsubscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Threads",
        "className": "ThreadApi",
        "methodName": "unsubscribeFromMessageEvents",
        "importance": "medium",
        "tags": [
          "threads",
          "method",
          "threadapi",
          "unsubscribefrommessageevents",
          "messaging",
          "communication",
          "collaboration",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ThreadApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-writetofile-mbguw0ce",
      "content": "# StoreApi.writeToFile\n\nWrites a file data.\n\n# StoreApi.writeToFile()\n\nWrites a file data.\n\n## Signature\n```javascript\nwriteToFile(fileHandle, dataChunk)\n```\n\n## Parameters\n- `fileHandle` (number): handle to write file data\n- `dataChunk` (Uint8Array): file data chunk\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: writeToFile Example\n\nBasic usage of StoreApi.writeToFile()\n\n```javascript\nawait StoreApi.writeToFile(0, dataChunk);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to write file data\n- **dataChunk** (Uint8Array): file data chunk\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "writeToFile",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "writetofile",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-openfile-mbguw0ce",
      "content": "# StoreApi.openFile\n\nOpens a file to read.\n\n# StoreApi.openFile()\n\nOpens a file to read.\n\n## Signature\n```javascript\nopenFile(fileId)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to read\n\n## Returns\n- Promise<number>: handle to read file data\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: openFile Example\n\nBasic usage of StoreApi.openFile()\n\n```javascript\nconst result = await StoreApi.openFile(\"fileId\");\n```\n\n\n\n## Parameters\n\n- **fileId** (string): ID of the file to read\n\n\n## Returns\n\n- **Promise<number>**: handle to read file data\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "openFile",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "openfile",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-readfromfile-mbguw0ce",
      "content": "# StoreApi.readFromFile\n\nReads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.\n\n# StoreApi.readFromFile()\n\nReads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.\n\n## Signature\n```javascript\nreadFromFile(fileHandle, length)\n```\n\n## Parameters\n- `fileHandle` (number): handle to write file data\n- `length` (number): size of data to read\n\n## Returns\n- Promise<Uint8Array>: array buffer with file data chunk\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: readFromFile Example\n\nBasic usage of StoreApi.readFromFile()\n\n```javascript\nconst result = await StoreApi.readFromFile(0, 0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to write file data\n- **length** (number): size of data to read\n\n\n## Returns\n\n- **Promise<Uint8Array>**: array buffer with file data chunk\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "readFromFile",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "readfromfile",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-seekinfile-mbguw0ce",
      "content": "# StoreApi.seekInFile\n\nMoves read cursor.\n\n# StoreApi.seekInFile()\n\nMoves read cursor.\n\n## Signature\n```javascript\nseekInFile(fileHandle, position)\n```\n\n## Parameters\n- `fileHandle` (number): handle to write file data\n- `position` (number): new cursor position\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: seekInFile Example\n\nBasic usage of StoreApi.seekInFile()\n\n```javascript\nawait StoreApi.seekInFile(0, 0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to write file data\n- **position** (number): new cursor position\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "seekInFile",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "seekinfile",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-closefile-mbguw0ce",
      "content": "# StoreApi.closeFile\n\nCloses the file handle.\n\n# StoreApi.closeFile()\n\nCloses the file handle.\n\n## Signature\n```javascript\ncloseFile(fileHandle)\n```\n\n## Parameters\n- `fileHandle` (number): handle to read/write file data\n\n## Returns\n- Promise<string>: ID of closed file\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: closeFile Example\n\nBasic usage of StoreApi.closeFile()\n\n```javascript\nconst result = await StoreApi.closeFile(0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to read/write file data\n\n\n## Returns\n\n- **Promise<string>**: ID of closed file\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "closeFile",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "closefile",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-subscribeforstoreevents-mbguw0ce",
      "content": "# StoreApi.subscribeForStoreEvents\n\nSubscribes for the Store module main events.\n\n# StoreApi.subscribeForStoreEvents()\n\nSubscribes for the Store module main events.\n\n## Signature\n```javascript\nsubscribeForStoreEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: subscribeForStoreEvents Example\n\nBasic usage of StoreApi.subscribeForStoreEvents()\n\n```javascript\nawait StoreApi.subscribeForStoreEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "subscribeForStoreEvents",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "subscribeforstoreevents",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-unsubscribefromstoreevents-mbguw0ce",
      "content": "# StoreApi.unsubscribeFromStoreEvents\n\nUnsubscribes from the Store module main events.\n\n# StoreApi.unsubscribeFromStoreEvents()\n\nUnsubscribes from the Store module main events.\n\n## Signature\n```javascript\nunsubscribeFromStoreEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromStoreEvents Example\n\nBasic usage of StoreApi.unsubscribeFromStoreEvents()\n\n```javascript\nawait StoreApi.unsubscribeFromStoreEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "unsubscribeFromStoreEvents",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "unsubscribefromstoreevents",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-subscribeforfileevents-mbguw0ce",
      "content": "# StoreApi.subscribeForFileEvents\n\nSubscribes for events in given Store.\n\n# StoreApi.subscribeForFileEvents()\n\nSubscribes for events in given Store.\n\n## Signature\n```javascript\nsubscribeForFileEvents(storeId)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to subscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: subscribeForFileEvents Example\n\nBasic usage of StoreApi.subscribeForFileEvents()\n\n```javascript\nawait StoreApi.subscribeForFileEvents(\"storeId\");\n```\n\n\n\n## Parameters\n\n- **storeId** (string): ID of the Store to subscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "subscribeForFileEvents",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "subscribeforfileevents",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Stores-method-storeapi-unsubscribefromfileevents-mbguw0ce",
      "content": "# StoreApi.unsubscribeFromFileEvents\n\nUnsubscribes from events in given Store.\n\n# StoreApi.unsubscribeFromFileEvents()\n\nUnsubscribes from events in given Store.\n\n## Signature\n```javascript\nunsubscribeFromFileEvents(storeId)\n```\n\n## Parameters\n- `storeId` (string): ID of the Store to unsubscribe\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of StoreApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromFileEvents Example\n\nBasic usage of StoreApi.unsubscribeFromFileEvents()\n\n```javascript\nawait StoreApi.unsubscribeFromFileEvents(\"storeId\");\n```\n\n\n\n## Parameters\n\n- **storeId** (string): ID of the Store to unsubscribe\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Stores",
        "className": "StoreApi",
        "methodName": "unsubscribeFromFileEvents",
        "importance": "medium",
        "tags": [
          "stores",
          "method",
          "storeapi",
          "unsubscribefromfileevents",
          "files",
          "storage",
          "documents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Store.get"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "StoreApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-openfile-mbguw0ce",
      "content": "# InboxApi.openFile\n\nOpens a file to read.\n\n# InboxApi.openFile()\n\nOpens a file to read.\n\n## Signature\n```javascript\nopenFile(fileId)\n```\n\n## Parameters\n- `fileId` (string): ID of the file to read\n\n## Returns\n- Promise<number>: handle to read file data\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: openFile Example\n\nBasic usage of InboxApi.openFile()\n\n```javascript\nconst result = await InboxApi.openFile(\"fileId\");\n```\n\n\n\n## Parameters\n\n- **fileId** (string): ID of the file to read\n\n\n## Returns\n\n- **Promise<number>**: handle to read file data\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "openFile",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "openfile",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-readfromfile-mbguw0ce",
      "content": "# InboxApi.readFromFile\n\nReads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.\n\n# InboxApi.readFromFile()\n\nReads file data. Single read call moves the files's cursor position by declared length or set it at the end of the file.\n\n## Signature\n```javascript\nreadFromFile(fileHandle, length)\n```\n\n## Parameters\n- `fileHandle` (number): handle to the file\n- `length` (number): size of data to read\n\n## Returns\n- Promise<Uint8Array>: buffer with file data chunk\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: readFromFile Example\n\nBasic usage of InboxApi.readFromFile()\n\n```javascript\nconst result = await InboxApi.readFromFile(0, 0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to the file\n- **length** (number): size of data to read\n\n\n## Returns\n\n- **Promise<Uint8Array>**: buffer with file data chunk\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "readFromFile",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "readfromfile",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-seekinfile-mbguw0ce",
      "content": "# InboxApi.seekInFile\n\nMoves file's read cursor.\n\n# InboxApi.seekInFile()\n\nMoves file's read cursor.\n\n## Signature\n```javascript\nseekInFile(fileHandle, position)\n```\n\n## Parameters\n- `fileHandle` (number): handle to the file\n- `position` (number): sets new cursor position\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: seekInFile Example\n\nBasic usage of InboxApi.seekInFile()\n\n```javascript\nawait InboxApi.seekInFile(0, 0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to the file\n- **position** (number): sets new cursor position\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "seekInFile",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "seekinfile",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-closefile-mbguw0ce",
      "content": "# InboxApi.closeFile\n\nCloses a file by given handle.\n\n# InboxApi.closeFile()\n\nCloses a file by given handle.\n\n## Signature\n```javascript\ncloseFile(fileHandle)\n```\n\n## Parameters\n- `fileHandle` (number): handle to the file\n\n## Returns\n- Promise<string>: ID of closed file\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: closeFile Example\n\nBasic usage of InboxApi.closeFile()\n\n```javascript\nconst result = await InboxApi.closeFile(0);\n```\n\n\n\n## Parameters\n\n- **fileHandle** (number): handle to the file\n\n\n## Returns\n\n- **Promise<string>**: ID of closed file\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "closeFile",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "closefile",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-subscribeforinboxevents-mbguw0ce",
      "content": "# InboxApi.subscribeForInboxEvents\n\nSubscribes for the Inbox module main events.\n\n# InboxApi.subscribeForInboxEvents()\n\nSubscribes for the Inbox module main events.\n\n## Signature\n```javascript\nsubscribeForInboxEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: subscribeForInboxEvents Example\n\nBasic usage of InboxApi.subscribeForInboxEvents()\n\n```javascript\nawait InboxApi.subscribeForInboxEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "subscribeForInboxEvents",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "subscribeforinboxevents",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Inboxes-method-inboxapi-unsubscribefrominboxevents-mbguw0ce",
      "content": "# InboxApi.unsubscribeFromInboxEvents\n\nUnsubscribes from the Inbox module main events.\n\n# InboxApi.unsubscribeFromInboxEvents()\n\nUnsubscribes from the Inbox module main events.\n\n## Signature\n```javascript\nunsubscribeFromInboxEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of InboxApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromInboxEvents Example\n\nBasic usage of InboxApi.unsubscribeFromInboxEvents()\n\n```javascript\nawait InboxApi.unsubscribeFromInboxEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "methodName": "unsubscribeFromInboxEvents",
        "importance": "medium",
        "tags": [
          "inboxes",
          "method",
          "inboxapi",
          "unsubscribefrominboxevents",
          "inbox",
          "notifications",
          "delivery",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "InboxApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-signdata-mbguw0ce",
      "content": "# CryptoApi.signData\n\nCreates a signature of data using given key.\n\n# CryptoApi.signData()\n\nCreates a signature of data using given key.\n\n## Signature\n```javascript\nsignData(data, privateKey)\n```\n\n## Parameters\n- `data` (Uint8Array): buffer to sign\n- `privateKey` (string): key used to sign data\n\n## Returns\n- Promise<Uint8Array>: signature \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: signData Example\n\nBasic usage of CryptoApi.signData()\n\n```javascript\nconst result = await CryptoApi.signData(data, \"privateKey\");\n```\n\n\n\n## Parameters\n\n- **data** (Uint8Array): buffer to sign\n- **privateKey** (string): key used to sign data\n\n\n## Returns\n\n- **Promise<Uint8Array>**: signature \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "signData",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "signdata",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-verifysignature-mbguw0ce",
      "content": "# CryptoApi.verifySignature\n\nValidate a signature of data using given key.\n\n# CryptoApi.verifySignature()\n\nValidate a signature of data using given key.\n\n## Signature\n```javascript\nverifySignature(data, signature, publicKey)\n```\n\n## Parameters\n- `data` (Uint8Array): buffer\n- `signature` (Uint8Array): signature of data to verify\n- `publicKey` (string): public ECC key in BASE58DER format used to validate data\n\n## Returns\n- undefined: data validation result\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: verifySignature Example\n\nBasic usage of CryptoApi.verifySignature()\n\n```javascript\nconst result = await CryptoApi.verifySignature(data, signature, \"publicKey\");\n```\n\n\n\n## Parameters\n\n- **data** (Uint8Array): buffer\n- **signature** (Uint8Array): signature of data to verify\n- **publicKey** (string): public ECC key in BASE58DER format used to validate data\n\n\n## Returns\n\n- **undefined**: data validation result\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "verifySignature",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "verifysignature",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-generateprivatekey-mbguw0ce",
      "content": "# CryptoApi.generatePrivateKey\n\nGenerates a new private ECC key.\n\n# CryptoApi.generatePrivateKey()\n\nGenerates a new private ECC key.\n\n## Signature\n```javascript\ngeneratePrivateKey(randomSeed)\n```\n\n## Parameters\n- `randomSeed` (string | undefined?): optional string used as the base to generate the new key\n\n## Returns\n- Promise<string>: generated ECC key in WIF format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: generatePrivateKey Example\n\nBasic usage of CryptoApi.generatePrivateKey()\n\n```javascript\nconst result = await CryptoApi.generatePrivateKey(randomSeed);\n```\n\n\n\n## Parameters\n\n- **randomSeed** (string | undefined?): optional string used as the base to generate the new key\n\n\n## Returns\n\n- **Promise<string>**: generated ECC key in WIF format\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "generatePrivateKey",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "generateprivatekey",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-deriveprivatekey-mbguw0ce",
      "content": "# CryptoApi.derivePrivateKey\n\n(deprecated) Generates a new private ECC key from a password using pbkdf2.\n\n# CryptoApi.derivePrivateKey()\n\n(deprecated) Generates a new private ECC key from a password using pbkdf2.\n\n## Signature\n```javascript\nderivePrivateKey(password, salt)\n```\n\n## Parameters\n- `password` (string): the password used to generate the new key\n- `salt` (string): random string (additional input for the hashing function)\n\n## Returns\n- Promise<string>: generated ECC key in WIF format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: derivePrivateKey Example\n\nBasic usage of CryptoApi.derivePrivateKey()\n\n```javascript\nconst result = await CryptoApi.derivePrivateKey(\"password\", \"salt\");\n```\n\n\n\n## Parameters\n\n- **password** (string): the password used to generate the new key\n- **salt** (string): random string (additional input for the hashing function)\n\n\n## Returns\n\n- **Promise<string>**: generated ECC key in WIF format\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "derivePrivateKey",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "deriveprivatekey",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-deriveprivatekey2-mbguw0ce",
      "content": "# CryptoApi.derivePrivateKey2\n\nGenerates a new private ECC key from a password using pbkdf2.\n\n# CryptoApi.derivePrivateKey2()\n\nGenerates a new private ECC key from a password using pbkdf2.\n\n## Signature\n```javascript\nderivePrivateKey2(password, salt)\n```\n\n## Parameters\n- `password` (string): the password used to generate the new key\n- `salt` (string): random string (additional input for the hashing function)\n\n## Returns\n- Promise<string>: generated ECC key in WIF format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: derivePrivateKey2 Example\n\nBasic usage of CryptoApi.derivePrivateKey2()\n\n```javascript\nconst result = await CryptoApi.derivePrivateKey2(\"password\", \"salt\");\n```\n\n\n\n## Parameters\n\n- **password** (string): the password used to generate the new key\n- **salt** (string): random string (additional input for the hashing function)\n\n\n## Returns\n\n- **Promise<string>**: generated ECC key in WIF format\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "derivePrivateKey2",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "deriveprivatekey2",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-derivepublickey-mbguw0ce",
      "content": "# CryptoApi.derivePublicKey\n\nGenerates a new public ECC key as a pair to an existing private key.\n\n# CryptoApi.derivePublicKey()\n\nGenerates a new public ECC key as a pair to an existing private key.\n\n## Signature\n```javascript\nderivePublicKey(privateKey)\n```\n\n## Parameters\n- `privateKey` (string): private ECC key in WIF format\n\n## Returns\n- Promise<string>: generated ECC key in BASE58DER format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: derivePublicKey Example\n\nBasic usage of CryptoApi.derivePublicKey()\n\n```javascript\nconst result = await CryptoApi.derivePublicKey(\"privateKey\");\n```\n\n\n\n## Parameters\n\n- **privateKey** (string): private ECC key in WIF format\n\n\n## Returns\n\n- **Promise<string>**: generated ECC key in BASE58DER format\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "derivePublicKey",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "derivepublickey",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-encryptdatasymmetric-mbguw0ce",
      "content": "# CryptoApi.encryptDataSymmetric\n\nEncrypts buffer with a given key using AES.\n\n# CryptoApi.encryptDataSymmetric()\n\nEncrypts buffer with a given key using AES.\n\n## Signature\n```javascript\nencryptDataSymmetric(data, symmetricKey)\n```\n\n## Parameters\n- `data` (Uint8Array): buffer to encrypt\n- `symmetricKey` (Uint8Array): key used to encrypt data\n\n## Returns\n- Promise<Uint8Array>: encrypted data buffer\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: encryptDataSymmetric Example\n\nBasic usage of CryptoApi.encryptDataSymmetric()\n\n```javascript\nconst result = await CryptoApi.encryptDataSymmetric(data, symmetricKey);\n```\n\n\n\n## Parameters\n\n- **data** (Uint8Array): buffer to encrypt\n- **symmetricKey** (Uint8Array): key used to encrypt data\n\n\n## Returns\n\n- **Promise<Uint8Array>**: encrypted data buffer\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "encryptDataSymmetric",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "encryptdatasymmetric",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-decryptdatasymmetric-mbguw0ce",
      "content": "# CryptoApi.decryptDataSymmetric\n\nDecrypts buffer with a given key using AES.\n\n# CryptoApi.decryptDataSymmetric()\n\nDecrypts buffer with a given key using AES.\n\n## Signature\n```javascript\ndecryptDataSymmetric(data, symmetricKey)\n```\n\n## Parameters\n- `data` (Uint8Array): buffer to decrypt\n- `symmetricKey` (Uint8Array): key used to decrypt data\n\n## Returns\n- Promise<Uint8Array>: plain (decrypted) data buffer\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: decryptDataSymmetric Example\n\nBasic usage of CryptoApi.decryptDataSymmetric()\n\n```javascript\nconst result = await CryptoApi.decryptDataSymmetric(data, symmetricKey);\n```\n\n\n\n## Parameters\n\n- **data** (Uint8Array): buffer to decrypt\n- **symmetricKey** (Uint8Array): key used to decrypt data\n\n\n## Returns\n\n- **Promise<Uint8Array>**: plain (decrypted) data buffer\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "decryptDataSymmetric",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "decryptdatasymmetric",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-convertpemkeytowifkey-mbguw0ce",
      "content": "# CryptoApi.convertPEMKeytoWIFKey\n\nConverts given private key in PEM format to its WIF format.\n\n# CryptoApi.convertPEMKeytoWIFKey()\n\nConverts given private key in PEM format to its WIF format.\n\n## Signature\n```javascript\nconvertPEMKeytoWIFKey(pemKey)\n```\n\n## Parameters\n- `pemKey` (string): private key to convert\n\n## Returns\n- Promise<string>: private key in WIF format\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: convertPEMKeytoWIFKey Example\n\nBasic usage of CryptoApi.convertPEMKeytoWIFKey()\n\n```javascript\nconst result = await CryptoApi.convertPEMKeytoWIFKey(\"pemKey\");\n```\n\n\n\n## Parameters\n\n- **pemKey** (string): private key to convert\n\n\n## Returns\n\n- **Promise<string>**: private key in WIF format\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "convertPEMKeytoWIFKey",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "convertpemkeytowifkey",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-generatebip39-mbguw0ce",
      "content": "# CryptoApi.generateBip39\n\nGenerates ECC key and BIP-39 mnemonic from a password using BIP-39.\n\n# CryptoApi.generateBip39()\n\nGenerates ECC key and BIP-39 mnemonic from a password using BIP-39.\n\n## Signature\n```javascript\ngenerateBip39(strength, password)\n```\n\n## Parameters\n- `strength` (number): size of BIP-39 entropy, must be a multiple of 32\n- `password` (string): the password used to generate the Key\n\n## Returns\n- Promise<BIP39>: object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: generateBip39 Example\n\nBasic usage of CryptoApi.generateBip39()\n\n```javascript\nconst result = await CryptoApi.generateBip39(0, \"password\");\n```\n\n\n\n## Parameters\n\n- **strength** (number): size of BIP-39 entropy, must be a multiple of 32\n- **password** (string): the password used to generate the Key\n\n\n## Returns\n\n- **Promise<BIP39>**: object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "generateBip39",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "generatebip39",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-frommnemonic-mbguw0ce",
      "content": "# CryptoApi.fromMnemonic\n\nGenerates ECC key using BIP-39 mnemonic.\n\n# CryptoApi.fromMnemonic()\n\nGenerates ECC key using BIP-39 mnemonic.\n\n## Signature\n```javascript\nfromMnemonic(mnemonic, password)\n```\n\n## Parameters\n- `mnemonic` (string): the BIP-39 entropy used to generate the Key\n- `password` (string): the password used to generate the Key\n\n## Returns\n- Promise<BIP39>: BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: fromMnemonic Example\n\nBasic usage of CryptoApi.fromMnemonic()\n\n```javascript\nconst result = await CryptoApi.fromMnemonic(\"mnemonic\", \"password\");\n```\n\n\n\n## Parameters\n\n- **mnemonic** (string): the BIP-39 entropy used to generate the Key\n- **password** (string): the password used to generate the Key\n\n\n## Returns\n\n- **Promise<BIP39>**: BIP39_t object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "fromMnemonic",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "frommnemonic",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-fromentropy-mbguw0ce",
      "content": "# CryptoApi.fromEntropy\n\nGenerates ECC key using BIP-39 entropy.\n\n# CryptoApi.fromEntropy()\n\nGenerates ECC key using BIP-39 entropy.\n\n## Signature\n```javascript\nfromEntropy(entropy, password)\n```\n\n## Parameters\n- `entropy` (Uint8Array): the BIP-39 entropy used to generate the Key\n- `password` (string): the password used to generate the Key\n\n## Returns\n- Promise<BIP39>: object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: fromEntropy Example\n\nBasic usage of CryptoApi.fromEntropy()\n\n```javascript\nconst result = await CryptoApi.fromEntropy(entropy, \"password\");\n```\n\n\n\n## Parameters\n\n- **entropy** (Uint8Array): the BIP-39 entropy used to generate the Key\n- **password** (string): the password used to generate the Key\n\n\n## Returns\n\n- **Promise<BIP39>**: object containing ECC Key and associated with it BIP-39 mnemonic and entropy\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "fromEntropy",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "fromentropy",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-entropytomnemonic-mbguw0ce",
      "content": "# CryptoApi.entropyToMnemonic\n\nConverts BIP-39 entropy to mnemonic.\n\n# CryptoApi.entropyToMnemonic()\n\nConverts BIP-39 entropy to mnemonic.\n\n## Signature\n```javascript\nentropyToMnemonic(entropy)\n```\n\n## Parameters\n- `entropy` (Uint8Array): BIP-39 entropy\n\n## Returns\n- Promise<string>: BIP-39 mnemonic\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: entropyToMnemonic Example\n\nBasic usage of CryptoApi.entropyToMnemonic()\n\n```javascript\nconst result = await CryptoApi.entropyToMnemonic(entropy);\n```\n\n\n\n## Parameters\n\n- **entropy** (Uint8Array): BIP-39 entropy\n\n\n## Returns\n\n- **Promise<string>**: BIP-39 mnemonic\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "entropyToMnemonic",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "entropytomnemonic",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-mnemonictoentropy-mbguw0ce",
      "content": "# CryptoApi.mnemonicToEntropy\n\nConverts BIP-39 mnemonic to entropy.\n\n# CryptoApi.mnemonicToEntropy()\n\nConverts BIP-39 mnemonic to entropy.\n\n## Signature\n```javascript\nmnemonicToEntropy(mnemonic)\n```\n\n## Parameters\n- `mnemonic` (string): BIP-39 mnemonic\n\n## Returns\n- Promise<Uint8Array>: BIP-39 entropy\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: mnemonicToEntropy Example\n\nBasic usage of CryptoApi.mnemonicToEntropy()\n\n```javascript\nconst result = await CryptoApi.mnemonicToEntropy(\"mnemonic\");\n```\n\n\n\n## Parameters\n\n- **mnemonic** (string): BIP-39 mnemonic\n\n\n## Returns\n\n- **Promise<Uint8Array>**: BIP-39 entropy\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "mnemonicToEntropy",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "mnemonictoentropy",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-cryptoapi-mnemonictoseed-mbguw0ce",
      "content": "# CryptoApi.mnemonicToSeed\n\nGenerates a seed used to generate a key using BIP-39 mnemonic with PBKDF2.\n\n# CryptoApi.mnemonicToSeed()\n\nGenerates a seed used to generate a key using BIP-39 mnemonic with PBKDF2.\n\n## Signature\n```javascript\nmnemonicToSeed(mnemonic, password)\n```\n\n## Parameters\n- `mnemonic` (string): BIP-39 mnemonic\n- `password` (string): the password used to generate the seed\n\n## Returns\n- Promise<Uint8Array>: generated seed\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: mnemonicToSeed Example\n\nBasic usage of CryptoApi.mnemonicToSeed()\n\n```javascript\nconst result = await CryptoApi.mnemonicToSeed(\"mnemonic\", \"password\");\n```\n\n\n\n## Parameters\n\n- **mnemonic** (string): BIP-39 mnemonic\n- **password** (string): the password used to generate the seed\n\n\n## Returns\n\n- **Promise<Uint8Array>**: generated seed\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "methodName": "mnemonicToSeed",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "cryptoapi",
          "mnemonictoseed",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "CryptoApi operations"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-fromseed-mbguw0ce",
      "content": "# ExtKey.fromSeed\n\nCreates ExtKey from given seed.\n\n# ExtKey.fromSeed()\n\nCreates ExtKey from given seed.\n\n## Signature\n```javascript\nfromSeed(seed)\n```\n\n## Parameters\n- `seed` (Uint8Array): the seed used to generate Key\n\n## Returns\n- Promise<ExtKey>: object \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: fromSeed Example\n\nBasic usage of ExtKey.fromSeed()\n\n```javascript\nconst result = await ExtKey.fromSeed(seed);\n```\n\n\n\n## Parameters\n\n- **seed** (Uint8Array): the seed used to generate Key\n\n\n## Returns\n\n- **Promise<ExtKey>**: object \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "fromSeed",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "fromseed",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ExtKey operations"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-frombase58-mbguw0ce",
      "content": "# ExtKey.fromBase58\n\nDecodes ExtKey from Base58 format.\n\n# ExtKey.fromBase58()\n\nDecodes ExtKey from Base58 format.\n\n## Signature\n```javascript\nfromBase58(base58)\n```\n\n## Parameters\n- `base58` (string): the ExtKey in Base58\n\n## Returns\n- Promise<ExtKey>: object \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: fromBase58 Example\n\nBasic usage of ExtKey.fromBase58()\n\n```javascript\nconst result = await ExtKey.fromBase58(\"base58\");\n```\n\n\n\n## Parameters\n\n- **base58** (string): the ExtKey in Base58\n\n\n## Returns\n\n- **Promise<ExtKey>**: object \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "fromBase58",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "frombase58",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ExtKey operations"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-derive-mbguw0ce",
      "content": "# ExtKey.derive\n\nGenerates child ExtKey from a current ExtKey using BIP32.\n\n# ExtKey.derive()\n\nGenerates child ExtKey from a current ExtKey using BIP32.\n\n## Signature\n```javascript\nderive(index)\n```\n\n## Parameters\n- `index` (number): number from 0 to 2^31-1\n\n## Returns\n- Promise<ExtKey>: object \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: derive Example\n\nBasic usage of ExtKey.derive()\n\n```javascript\nconst result = await ExtKey.derive(0);\n```\n\n\n\n## Parameters\n\n- **index** (number): number from 0 to 2^31-1\n\n\n## Returns\n\n- **Promise<ExtKey>**: object \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "derive",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "derive",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ExtKey operations"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-derivehardened-mbguw0ce",
      "content": "# ExtKey.deriveHardened\n\nGenerates hardened child ExtKey from a current ExtKey using BIP32.\n\n# ExtKey.deriveHardened()\n\nGenerates hardened child ExtKey from a current ExtKey using BIP32.\n\n## Signature\n```javascript\nderiveHardened(index)\n```\n\n## Parameters\n- `index` (number): number from 0 to 2^31-1\n\n## Returns\n- Promise<ExtKey>: object \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: deriveHardened Example\n\nBasic usage of ExtKey.deriveHardened()\n\n```javascript\nconst result = await ExtKey.deriveHardened(0);\n```\n\n\n\n## Parameters\n\n- **index** (number): number from 0 to 2^31-1\n\n\n## Returns\n\n- **Promise<ExtKey>**: object \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "deriveHardened",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "derivehardened",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ExtKey operations"
        ]
      }
    },
    {
      "id": "Crypto-method-extkey-verifycompactsignaturewithhash-mbguw0cf",
      "content": "# ExtKey.verifyCompactSignatureWithHash\n\nValidates a signature of a message.\n\n# ExtKey.verifyCompactSignatureWithHash()\n\nValidates a signature of a message.\n\n## Signature\n```javascript\nverifyCompactSignatureWithHash(message, signature)\n```\n\n## Parameters\n- `message` (Uint8Array): data used on validation\n- `signature` (Uint8Array): signature of data to verify\n\n## Returns\n- Promise<boolean>: message validation result\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: verifyCompactSignatureWithHash Example\n\nBasic usage of ExtKey.verifyCompactSignatureWithHash()\n\n```javascript\nconst result = await ExtKey.verifyCompactSignatureWithHash(message, signature);\n```\n\n\n\n## Parameters\n\n- **message** (Uint8Array): data used on validation\n- **signature** (Uint8Array): signature of data to verify\n\n\n## Returns\n\n- **Promise<boolean>**: message validation result\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "method",
        "namespace": "Crypto",
        "className": "ExtKey",
        "methodName": "verifyCompactSignatureWithHash",
        "importance": "medium",
        "tags": [
          "crypto",
          "method",
          "extkey",
          "verifycompactsignaturewithhash",
          "encryption",
          "security",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [
          "Context.create",
          "Context.connect"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "ExtKey operations"
        ]
      }
    },
    {
      "id": "Events-method-eventapi-emitevent-mbguw0cf",
      "content": "# EventApi.emitEvent\n\nEmits the custom event on the given Context and channel.\n\n# EventApi.emitEvent()\n\nEmits the custom event on the given Context and channel.\n\n## Signature\n```javascript\nemitEvent(contextId, channelName, eventData, users)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context\n- `channelName` (string): name of the Channel\n- `eventData` (Uint8Array): event's data\n- `users` (UserWithPubKey[]): list of UserWithPubKey objects which defines the recipients of the event\n\n## Returns\n- undefined: undefined undefined\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of EventApi management operations.\n\n## Examples\n\n### Example 1: emitEvent Example\n\nBasic usage of EventApi.emitEvent()\n\n```javascript\nconst result = await EventApi.emitEvent(\"contextId\", \"channelName\", eventData, []);\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context\n- **channelName** (string): name of the Channel\n- **eventData** (Uint8Array): event's data\n- **users** (UserWithPubKey[]): list of UserWithPubKey objects which defines the recipients of the event\n\n\n## Returns\n\n- **undefined**: undefined undefined\n",
      "metadata": {
        "type": "method",
        "namespace": "Events",
        "className": "EventApi",
        "methodName": "emitEvent",
        "importance": "medium",
        "tags": [
          "events",
          "method",
          "eventapi",
          "emitevent",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "EventApi operations"
        ]
      }
    },
    {
      "id": "Events-method-eventapi-subscribeforcustomevents-mbguw0cf",
      "content": "# EventApi.subscribeForCustomEvents\n\nSubscribe for the custom events on the given channel.\n\n# EventApi.subscribeForCustomEvents()\n\nSubscribe for the custom events on the given channel.\n\n## Signature\n```javascript\nsubscribeForCustomEvents(contextId, channelName)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context\n- `channelName` (string): name of the Channel\n\n## Returns\n- undefined: undefined undefined\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of EventApi management operations.\n\n## Examples\n\n### Example 1: subscribeForCustomEvents Example\n\nBasic usage of EventApi.subscribeForCustomEvents()\n\n```javascript\nconst result = await EventApi.subscribeForCustomEvents(\"contextId\", \"channelName\");\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context\n- **channelName** (string): name of the Channel\n\n\n## Returns\n\n- **undefined**: undefined undefined\n",
      "metadata": {
        "type": "method",
        "namespace": "Events",
        "className": "EventApi",
        "methodName": "subscribeForCustomEvents",
        "importance": "medium",
        "tags": [
          "events",
          "method",
          "eventapi",
          "subscribeforcustomevents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "EventApi operations"
        ]
      }
    },
    {
      "id": "Events-method-eventapi-unsubscribefromcustomevents-mbguw0cf",
      "content": "# EventApi.unsubscribeFromCustomEvents\n\nUnsubscribe from the custom events on the given channel.\n\n# EventApi.unsubscribeFromCustomEvents()\n\nUnsubscribe from the custom events on the given channel.\n\n## Signature\n```javascript\nunsubscribeFromCustomEvents(contextId, channelName)\n```\n\n## Parameters\n- `contextId` (string): ID of the Context\n- `channelName` (string): name of the Channel\n\n## Returns\n- undefined: undefined undefined\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of EventApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromCustomEvents Example\n\nBasic usage of EventApi.unsubscribeFromCustomEvents()\n\n```javascript\nconst result = await EventApi.unsubscribeFromCustomEvents(\"contextId\", \"channelName\");\n```\n\n\n\n## Parameters\n\n- **contextId** (string): ID of the Context\n- **channelName** (string): name of the Channel\n\n\n## Returns\n\n- **undefined**: undefined undefined\n",
      "metadata": {
        "type": "method",
        "namespace": "Events",
        "className": "EventApi",
        "methodName": "unsubscribeFromCustomEvents",
        "importance": "medium",
        "tags": [
          "events",
          "method",
          "eventapi",
          "unsubscribefromcustomevents",
          "quality:0.90"
        ],
        "sourceFile": "spec/out.js.json",
        "dependencies": [],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "useCases": [
          "EventApi operations"
        ]
      }
    },
    {
      "id": "merged-Threads-class-threadapi-mbguw0ce-5",
      "content": "# ThreadApi\n\nClass representing instance of Threads API\n\n# ThreadApi\n\nClass representing instance of Threads API\n\n## Available Methods:\n- createThread()\n- updateThread()\n- deleteThread()\n- getThread()\n- listThreads()\n- getMessage()\n- listMessages()\n- sendMessage()\n- deleteMessage()\n- updateMessage()\n- subscribeForThreadEvents()\n- unsubscribeFromThreadEvents()\n- subscribeForMessageEvents()\n- unsubscribeFromMessageEvents()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Thread.create`\n- `Thread.get`\n- `Message.send`\n- `Message.list`\n\n\n\n---\n\nipt\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\n** (Uint8Array): private message metadata\n- **data** (Uint8Array): content of the message\n\n## Related Methods\n\n- `ThreadApi.get`\n- `ThreadApi.create`\n- `ThreadApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Thread.get`\n\n---\n\n# ThreadApi.subscribeForThreadEvents\n\nSubscribes for the Thread module main events.\n\n# ThreadApi.subscribeForThreadEvents()\n\nSubscribes for the Thread module main events.\n\n## Signature\n```javascript\nsubscribeForThreadEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: subscribeForThreadEvents Example\n\nBasic usage of ThreadApi.subscribeForThreadEvents()\n\n```javascript\nawait ThreadApi.subscribeForThreadEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n\n\n---\n\n# ThreadApi.unsubscribeFromThreadEvents\n\nUnsubscribes from the Thread module main events.\n\n# ThreadApi.unsubscribeFromThreadEvents()\n\nUnsubscribes from the Thread module main events.\n\n## Signature\n```javascript\nunsubscribeFromThreadEvents()\n```\n\n## Parameters\nNo parameters\n\n## Returns\nvoid\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ThreadApi management operations.\n\n## Examples\n\n### Example 1: unsubscribeFromThreadEvents Example\n\nBasic usage of ThreadApi.unsubscribeFromThreadEvents()\n\n```javascript\nawait ThreadApi.unsubscribeFromThreadEvents();\n```\n\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "class",
        "namespace": "Threads",
        "className": "ThreadApi",
        "importance": "medium",
        "tags": [
          "threads",
          "class",
          "threadapi",
          "messaging",
          "communication",
          "collaboration",
          "method",
          "updatethread",
          "crud",
          "modification",
          "edit",
          "sub-chunk",
          "part-2",
          "updatemessage",
          "part-1",
          "subscribeforthreadevents",
          "unsubscribefromthreadevents",
          "quality:0.85"
        ],
        "sourceFile": "spec/out.js.json",
        "relatedMethods": [
          "Thread.create",
          "Thread.get",
          "Message.send",
          "Message.list",
          "ThreadApi.get",
          "ThreadApi.create",
          "ThreadApi.delete"
        ],
        "useCases": [
          "Team communication",
          "Message collaboration",
          "Discussion threads",
          "ThreadApi operations"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Thread.get"
        ]
      }
    },
    {
      "id": "merged-Inboxes-class-inboxapi-mbguw0ce-6",
      "content": "# InboxApi\n\nClass representing instance of Inboxes API\n\n# InboxApi\n\nClass representing instance of Inboxes API\n\n## Available Methods:\n- createInbox()\n- updateInbox()\n- getInbox()\n- listInboxes()\n- getInboxPublicView()\n- deleteInbox()\n- prepareEntry()\n- sendEntry()\n- readEntry()\n- listEntries()\n- deleteEntry()\n- createFileHandle()\n- writeToFile()\n- openFile()\n- readFromFile()\n- seekInFile()\n- closeFile()\n- subscribeForInboxEvents()\n- unsubscribeFromInboxEvents()\n- subscribeForEntryEvents()\n- unsubscribeFromEntryEvents()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Inbox.create`\n- `Inbox.get`\n- `InboxMessage.send`\n\n\n\n---\n\nipt\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\no regenerate a key for the Inbox\n- **policies** (ContainerWithoutItemPolicy): Inbox policies\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.create`\n- `InboxApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\nt operations.\n\n## Examples\n\n### Example 1: prepareEntry Example\n\nBasic usage of InboxApi.prepareEntry()\n\n```javascript\nconst result = await InboxApi.prepareEntry(\"inboxId\", data, [], userPrivKey);\n```## Parameters\n\n- **inboxId** (string): ID of the Inbox to which the request applies\n- **data** (Uint8Array): entry data to send\n- **inboxFileHandles** (number[]?): optional list of file handles that will be sent with the request\n- **userPrivKey** (string | undefined?): optional sender's private key which can be used later to encrypt data for that sender\n\n## Returns\n\n- **Promise<number>**: Inbox handle\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\nileSize** (number): size of the file to send\n\n## Returns\n\n- **Promise<number>**: file handle\n\n## Related Methods\n\n- `InboxApi.get`\n- `InboxApi.update`\n- `InboxApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\ns\n\n- **inboxHandle** (number): Handle to the prepared Inbox entry\n- **inboxFileHandle** (number): handle to the file where the uploaded chunk belongs\n- **dataChunk** (Uint8Array): - file chunk to send## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`",
      "metadata": {
        "type": "class",
        "namespace": "Inboxes",
        "className": "InboxApi",
        "importance": "medium",
        "tags": [
          "inboxes",
          "class",
          "inboxapi",
          "inbox",
          "notifications",
          "delivery",
          "method",
          "createinbox",
          "crud",
          "creation",
          "new",
          "sub-chunk",
          "part-2",
          "updateinbox",
          "modification",
          "edit",
          "prepareentry",
          "part-1",
          "createfilehandle",
          "writetofile",
          "quality:0.85"
        ],
        "sourceFile": "spec/out.js.json",
        "relatedMethods": [
          "Inbox.create",
          "Inbox.get",
          "InboxMessage.send",
          "InboxApi.get",
          "InboxApi.update",
          "InboxApi.delete",
          "InboxApi.create"
        ],
        "useCases": [
          "Message delivery",
          "Notification system",
          "Communication hub",
          "InboxApi operations"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not validating input parameters",
          "Creating duplicate resources",
          "Not checking if resource exists first",
          "Partial updates without validation"
        ],
        "dependencies": [
          "Connection.connect",
          "Platform.login",
          "Context.create",
          "Context.connect"
        ]
      }
    },
    {
      "id": "merged-Stores-class-storeapi-mbguw0ce-5",
      "content": "# StoreApi\n\nClass representing instance of Stores API\n\n# StoreApi\n\nClass representing instance of Stores API\n\n## Available Methods:\n- createStore()\n- updateStore()\n- deleteStore()\n- getStore()\n- listStores()\n- createFile()\n- updateFile()\n- updateFileMeta()\n- writeToFile()\n- deleteFile()\n- getFile()\n- listFiles()\n- openFile()\n- readFromFile()\n- seekInFile()\n- closeFile()\n- subscribeForStoreEvents()\n- unsubscribeFromStoreEvents()\n- subscribeForFileEvents()\n- unsubscribeFromFileEvents()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n## Related Methods\n\n- `Store.create`\n- `Store.get`\n- `File.upload`\n- `File.download`\n\n\n\n---\n\nipt\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n---\n\n**size** (number): size of the file\n\n## Returns\n\n- **Promise<number>**: handle to write data\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.update`\n- `StoreApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Connection.connect`\n- Called `Platform.login`\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n---\n\ne** (number): size of the file\n\n## Returns\n\n- **Promise<number>**: handle to write file data\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n- `StoreApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`\n\n---\n\na** (Uint8Array): public file metadata\n- **privateMeta** (Uint8Array): private file metadata\n\n## Related Methods\n\n- `StoreApi.get`\n- `StoreApi.create`\n- `StoreApi.delete`\n\n## Common Issues & Solutions### Permission denied error\n\n**Cause**: User lacks necessary permissions for the operation\n\n**Solution**: Ensure user has proper access rights or is listed as a manager.\n\n```typescript\n// Check user permissions before operation\nconst hasPermission = await Context.checkUserPermission(userId, 'create');\nif (!hasPermission) {\n  throw new Error('User lacks create permission');\n}\n```\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n- Called `Store.get`",
      "metadata": {
        "type": "class",
        "namespace": "Stores",
        "className": "StoreApi",
        "importance": "medium",
        "tags": [
          "stores",
          "class",
          "storeapi",
          "files",
          "storage",
          "documents",
          "method",
          "updatestore",
          "crud",
          "modification",
          "edit",
          "sub-chunk",
          "part-2",
          "createfile",
          "creation",
          "new",
          "part-1",
          "updatefile",
          "updatefilemeta",
          "quality:0.80"
        ],
        "sourceFile": "spec/out.js.json",
        "relatedMethods": [
          "Store.create",
          "Store.get",
          "File.upload",
          "File.download",
          "StoreApi.get",
          "StoreApi.create",
          "StoreApi.delete",
          "StoreApi.update"
        ],
        "useCases": [
          "File management",
          "Document storage",
          "Asset organization",
          "StoreApi operations"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling",
          "Not checking if resource exists first",
          "Partial updates without validation",
          "Not validating input parameters",
          "Creating duplicate resources"
        ],
        "dependencies": [
          "Context.create",
          "Context.connect",
          "Connection.connect",
          "Platform.login",
          "Store.get"
        ]
      }
    },
    {
      "id": "merged-Crypto-class-cryptoapi-mbguw0ce-5",
      "content": "# CryptoApi\n\nClass representing instance of Crypto API\n\n# CryptoApi\n\nClass representing instance of Crypto API\n\n## Available Methods:\n- signData()\n- verifySignature()\n- generatePrivateKey()\n- derivePrivateKey()\n- derivePrivateKey2()\n- derivePublicKey()\n- generateKeySymmetric()\n- encryptDataSymmetric()\n- decryptDataSymmetric()\n- convertPEMKeytoWIFKey()\n- generateBip39()\n- fromMnemonic()\n- fromEntropy()\n- entropyToMnemonic()\n- mnemonicToEntropy()\n- mnemonicToSeed()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n---\n\n# CryptoApi.generateKeySymmetric\n\nGenerates a new symmetric key.\n\n# CryptoApi.generateKeySymmetric()\n\nGenerates a new symmetric key.\n\n## Signature\n```javascript\ngenerateKeySymmetric()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<Uint8Array>: generated key.\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of CryptoApi management operations.\n\n## Examples\n\n### Example 1: generateKeySymmetric Example\n\nBasic usage of CryptoApi.generateKeySymmetric()\n\n```javascript\nconst result = await CryptoApi.generateKeySymmetric();\n```\n\n\n\n## Returns\n\n- **Promise<Uint8Array>**: generated key.\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n\n\n---\n\n# ExtKey\n\nClass representing instance of ExtKey\n\n# ExtKey\n\nClass representing instance of ExtKey\n\n## Available Methods:\n- fromSeed()\n- fromBase58()\n- generateRandom()\n- derive()\n- deriveHardened()\n- getPrivatePartAsBase58()\n- getPublicPartAsBase58()\n- getPrivateKey()\n- getPublicKey()\n- getPrivateEncKey()\n- getPublicKeyAsBase58Address()\n- getChainCode()\n- verifyCompactSignatureWithHash()\n- isPrivate()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.\n\n---\n\n# ExtKey.generateRandom\n\nGenerates a new ExtKey.\n\n# ExtKey.generateRandom()\n\nGenerates a new ExtKey.\n\n## Signature\n```javascript\ngenerateRandom()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<ExtKey>: object \n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: generateRandom Example\n\nBasic usage of ExtKey.generateRandom()\n\n```javascript\nconst result = await ExtKey.generateRandom();\n```\n\n\n\n## Returns\n\n- **Promise<ExtKey>**: object \n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n\n\n---\n\n# ExtKey.isPrivate\n\nChecks if ExtKey is Private.\n\n# ExtKey.isPrivate()\n\nChecks if ExtKey is Private.\n\n## Signature\n```javascript\nisPrivate()\n```\n\n## Parameters\nNo parameters\n\n## Returns\n- Promise<boolean>: true if ExtKey is private\n\n## Method Type: method\n\n## Prerequisites\n- Must have active connection to PrivMX Bridge\n- Required permissions for this operation\n- Valid authentication context\n\n## Common Usage Pattern\nThis method is typically used in the context of ExtKey management operations.\n\n## Examples\n\n### Example 1: isPrivate Example\n\nBasic usage of ExtKey.isPrivate()\n\n```javascript\nconst result = await ExtKey.isPrivate();\n```\n\n\n\n## Returns\n\n- **Promise<boolean>**: true if ExtKey is private\n\n\n## Prerequisites\n\nBefore using this method, ensure you have:\n\n- Called `Context.create`\n- Called `Context.connect`\n\n",
      "metadata": {
        "type": "class",
        "namespace": "Crypto",
        "className": "CryptoApi",
        "importance": "medium",
        "tags": [
          "crypto",
          "class",
          "cryptoapi",
          "encryption",
          "security",
          "method",
          "generatekeysymmetric",
          "extkey",
          "generaterandom",
          "isprivate",
          "quality:0.80"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [
          "CryptoApi operations",
          "ExtKey operations"
        ],
        "commonMistakes": [
          "Not checking return values for errors",
          "Missing proper error handling"
        ],
        "relatedMethods": [],
        "dependencies": [
          "Context.create",
          "Context.connect"
        ]
      }
    },
    {
      "id": "merged-general-example-setting-up-headers-in-different-environments-mbguw0cf-149",
      "content": "# Setting Up Headers in Different Environments\n\n<Tabs items={[\"Vite\",\"Next.js\",\"Express\",\"Nginx\",\"Apache\",\"Webpack\"]}>\n\n# Setting Up Headers in Different Environments\n\n<Tabs items={[\"Vite\",\"Next.js\",\"Express\",\"Nginx\",\"Apache\",\"Webpack\"]}>\n\n\n\n\n## Content\n\n<Tabs items={[\"Vite\",\"Next.js\",\"Express\",\"Nginx\",\"Apache\",\"Webpack\"]}>\n<Tab>\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Vite\n\nTo configure these headers in a Vite project for specific routes (such as the page containing the scripts and the scripts themselves), you need to set up a middleware in the Vite configuration file:\n\n\n\n## Related Sections\n\n- [Vite](#general-example-vite-vite-mbguw0cf)\n- [Content](#general-example-vite-content-mbguw0cf)\n- [JS Example](#general-example-vite-js-example-mbguw0cf)\n\n\n---\n\n**Navigation**: Vite\n\n---\n\n# Vite\n\n\nTo configure these headers in a Vite project for specific routes (such as the page containing the scripts and the scripts themselves), you need to set up a middleware in the Vite configuration file:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To configure these headers in a Vite project for specific routes (such as the page containing the s...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-vite-content-mbguw0cf)\n- [Vite](#general-example-vite-root-mbguw0cf)\n- [JS Example](#general-example-vite-js-example-mbguw0cf)\n\n\n---\n\n**Navigation**: Vite > Content\n\n---\n\n## Content\n\n\nTo configure these headers in a Vite project for specific routes (such as the page containing the scripts and the scripts themselves), you need to set up a middleware in the Vite configuration file:\n\n\n\n</Tab>\n<Tab>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\n// vite.config.js\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugin...\n\n\n## Related Sections\n\n- [Vite](#general-example-vite-vite-mbguw0cf)\n- [Vite](#general-example-vite-root-mbguw0cf)\n- [JS Example](#general-example-vite-js-example-mbguw0cf)\n\n\n---\n\n**Navigation**: Vite > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// vite.config.js\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    {\n      name: 'configure-response-headers',\n      configureServer: server => {\n        server.middlewares.use((req, res, next) => {\n          // Apply headers only to relevant paths\n          if (req.url.startsWith('/privmx-assets') || req.url === '/YOUR_SUBPAGE') {\n            res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');\n            res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');\n          }\n          next();\n        });\n      },\n    },\n  ],\n});\n\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-vite-content-mbguw0cf)\n- [Vite](#general-example-vite-vite-mbguw0cf)\n- [Vite](#general-example-vite-root-mbguw0cf)\n\n\n---\n\n# Next.js\n\nIn a Next.js project, you can set these headers specifically for the page containing the scripts and the script files (e.g., public/privmx-assets/) in the next.config.js file:\n\n\n\n## Related Sections\n\n- [Next.js](#general-example-next-js-next.js-mbguw0cg)\n- [Content](#general-example-next-js-content-mbguw0cg)\n- [JS Example](#general-example-next-js-js-example-mbguw0cg)\n\n\n---\n\n**Navigation**: Next.js\n\n---\n\n# Next.js\n\n\nIn a Next.js project, you can set these headers specifically for the page containing the scripts and the script files (e.g., public/privmx-assets/) in the next.config.js file:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: In a Next.js project, you can set these headers specifically for the page containing the scripts and...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-next-js-content-mbguw0cg)\n- [Next.js](#general-example-next-js-root-mbguw0cg)\n- [JS Example](#general-example-next-js-js-example-mbguw0cg)\n\n\n---\n\n**Navigation**: Next.js > Content\n\n---\n\n## Content\n\nIn a Next.js project, you can set these headers specifically for the page containing the scripts and the script files (e.g., public/privmx-assets/) in the next.config.js file:\n\n\n</Tab>\n<Tab>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\n// next.config.mjs\nconst nextConfig = {\n  // ..rest of the configuration\n  headers: async () =...\n\n\n## Related Sections\n\n- [Next.js](#general-example-next-js-next.js-mbguw0cg)\n- [JS Example](#general-example-next-js-js-example-mbguw0cg)\n- [Next.js](#general-example-next-js-root-mbguw0cg)\n\n\n---\n\n# Express\n\nFor an Express.js server, you can set these headers in your middleware:\n\n\n\n## Related Sections\n\n- [Express](#general-example-express-express-mbguw0ch)\n- [Content](#general-example-express-content-mbguw0ch)\n- [JS Example](#general-example-express-js-example-mbguw0ch)\n\n\n---\n\n**Navigation**: Express\n\n---\n\n# Express\n\n\nFor an Express.js server, you can set these headers in your middleware:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: For an Express.js server, you can set these headers in your middleware:\n\n\n\n</Tab>\n<Tab>...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-express-content-mbguw0ch)\n- [Express](#general-example-express-root-mbguw0ch)\n- [JS Example](#general-example-express-js-example-mbguw0ch)\n\n\n---\n\n**Navigation**: Express > Content\n\n---\n\n## Content\n\nFor an Express.js server, you can set these headers in your middleware:\n\n\n\n</Tab>\n<Tab>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst express = require('express');\nconst app = express();\n\napp.use('/privmx-assets', (req, re...\n\n\n## Related Sections\n\n- [Express](#general-example-express-express-mbguw0ch)\n- [JS Example](#general-example-express-js-example-mbguw0ch)\n- [Express](#general-example-express-root-mbguw0ch)\n\n\n---\n\n**Navigation**: Express > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.use('/privmx-assets', (req, res, next) => {\n  res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');\n  res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');\n  next();\n});\n\napp.use('/your-page', (req, res, next) => {\n  res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');\n  res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');\n  next();\n});\n\n// your other middleware and routes\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-express-content-mbguw0ch)\n- [Express](#general-example-express-express-mbguw0ch)\n- [Express](#general-example-express-root-mbguw0ch)\n\n\n---\n\n# Nginx\n\nTo set these headers only for the page containing the scripts and the script files, you need to modify your Nginx configuration file:\n\n\n\n## Related Sections\n\n- [Nginx](#general-example-nginx-nginx-mbguw0cj)\n- [Content](#general-example-nginx-content-mbguw0cj)\n- [/etc/nginx/nginx.conf or /etc/nginx/sites-available/your-site](#general-example-nginx-/etc/nginx/nginx.conf-or-/etc/nginx/sites-available/your-site-mbguw0cj)\n\n\n---\n\n**Navigation**: Nginx\n\n---\n\n# Nginx\n\n\nTo set these headers only for the page containing the scripts and the script files, you need to modify your Nginx configuration file:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To set these headers only for the page containing the scripts and the script files, you need to modi...\n\n\n## Related Sections\n\n- [Nginx](#general-example-nginx-root-mbguw0cj)\n- [Content](#general-example-nginx-content-mbguw0cj)\n- [/etc/nginx/nginx.conf or /etc/nginx/sites-available/your-site](#general-example-nginx-/etc/nginx/nginx.conf-or-/etc/nginx/sites-available/your-site-mbguw0cj)\n\n\n---\n\n**Navigation**: Nginx > Content\n\n---\n\n## Content\n\nTo set these headers only for the page containing the scripts and the script files, you need to modify your Nginx configuration file:\n\n\n</Tab>\n<Tab>\n\n\n\n\n## Subsections\n\n- **TEXT Example**: ```text...\n\n\n## Related Sections\n\n- [Nginx](#general-example-nginx-nginx-mbguw0cj)\n- [Nginx](#general-example-nginx-root-mbguw0cj)\n- [/etc/nginx/nginx.conf or /etc/nginx/sites-available/your-site](#general-example-nginx-/etc/nginx/nginx.conf-or-/etc/nginx/sites-available/your-site-mbguw0cj)\n\n\n---\n\n**Navigation**: /etc/nginx/nginx.conf or /etc/nginx/sites-available/your-site\n\n---\n\n# /etc/nginx/nginx.conf or /etc/nginx/sites-available/your-site\n\nserver {\n  listen 80;\n  server_name your-site.com;\n\n  location /your-page {\n    add_header Cross-Origin-Embedder-Policy require-corp;\n    add_header Cross-Origin-Opener-Policy same-origin;\n  }\n\n  location /privmx-assets/ {\n    add_header Cross-Origin-Embedder-Policy require-corp;\n    add_header Cross-Origin-Opener-Policy same-origin;\n  }\n}\n\n\n```\n\n    \n\n\n\n## Subsections\n\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Nginx](#general-example-nginx-nginx-mbguw0cj)\n- [Content](#general-example-nginx-content-mbguw0cj)\n- [Nginx](#general-example-nginx-root-mbguw0cj)\n\n\n---\n\n# Apache\n\nTo configure these headers only for the page containing the scripts and the script files, add the following directives to your .htaccess file or your site's configuration file:\n\n\n\n## Related Sections\n\n- [Apache](#general-example-apache-apache-mbguw0cj)\n- [Content](#general-example-apache-content-mbguw0cj)\n- [.htaccess or httpd.conf](#general-example-apache-.htaccess-or-httpd.conf-mbguw0cj)\n\n\n---\n\n**Navigation**: Apache\n\n---\n\n# Apache\n\n\nTo configure these headers only for the page containing the scripts and the script files, add the following directives to your .htaccess file or your site's configuration file:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To configure these headers only for the page containing the scripts and the script files, add the fo...\n\n\n## Related Sections\n\n- [Apache](#general-example-apache-root-mbguw0cj)\n- [Content](#general-example-apache-content-mbguw0cj)\n- [.htaccess or httpd.conf](#general-example-apache-.htaccess-or-httpd.conf-mbguw0cj)\n\n\n---\n\n**Navigation**: Apache > Content\n\n---\n\n## Content\n\nTo configure these headers only for the page containing the scripts and the script files, add the following directives to your .htaccess file or your site's configuration file:\n\n\n</Tab>\n\n<Tab>\n\n\n\n\n\n## Subsections\n\n- **TEXT Example**: ```text...\n\n\n## Related Sections\n\n- [Apache](#general-example-apache-apache-mbguw0cj)\n- [Apache](#general-example-apache-root-mbguw0cj)\n- [.htaccess or httpd.conf](#general-example-apache-.htaccess-or-httpd.conf-mbguw0cj)\n\n\n---\n\n**Navigation**: .htaccess or httpd.conf\n\n---\n\n# .htaccess or httpd.conf\n\n<IfModule mod_headers.c>\n  <FilesMatch \"^/your-page$\">\n    Header set Cross-Origin-Embedder-Policy \"require-corp\"\n    Header set Cross-Origin-Opener-Policy \"same-origin\"\n  </FilesMatch>\n\n  <Directory \"public/privmx-assets/\">\n    Header set Cross-Origin-Embedder-Policy \"require-corp\"\n    Header set Cross-Origin-Opener-Policy \"same-origin\"\n  </Directory>\n</IfModule>\n```\n\n    \n\n\n\n## Subsections\n\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Apache](#general-example-apache-apache-mbguw0cj)\n- [Content](#general-example-apache-content-mbguw0cj)\n- [Apache](#general-example-apache-root-mbguw0cj)\n\n\n---\n\n# Webpack Dev Server\n\nBelow you will find an example configuration file for Webpack with a fully setup Webpack's Development Server:\n\n\n\n## Related Sections\n\n- [Webpack Dev Server](#general-example-webpack-dev-server-webpack-dev-server-mbguw0cj)\n- [Content](#general-example-webpack-dev-server-content-mbguw0cj)\n- [JS Example](#general-example-webpack-dev-server-js-example-mbguw0cj)\n\n\n---\n\n**Navigation**: Webpack Dev Server\n\n---\n\n# Webpack Dev Server\n\n\nBelow you will find an example configuration file for Webpack with a fully setup Webpack's Development Server:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: Below you will find an example configuration file for Webpack with a fully setup Webpack's Developm...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-webpack-dev-server-content-mbguw0cj)\n- [Webpack Dev Server](#general-example-webpack-dev-server-root-mbguw0cj)\n- [JS Example](#general-example-webpack-dev-server-js-example-mbguw0cj)\n\n\n---\n\n**Navigation**: Webpack Dev Server > Content\n\n---\n\n## Content\n\n\nBelow you will find an example configuration file for Webpack with a fully setup Webpack's Development Server:\n\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\n// webpack.config.cjs\nconst path = require('path');\nconst webpack = require('webpack');\nconst...\n\n\n## Related Sections\n\n- [Webpack Dev Server](#general-example-webpack-dev-server-webpack-dev-server-mbguw0cj)\n- [Webpack Dev Server](#general-example-webpack-dev-server-root-mbguw0cj)\n- [JS Example](#general-example-webpack-dev-server-js-example-mbguw0cj)\n\n\n---\n\n# Accessing via Public API\n\nEndpoint provides different ways to connect to a Bridge instance.\n\n# Accessing via Public API\n\nEndpoint provides different ways to connect to a Bridge instance.\n\n\n\n\n## Content\n\nEndpoint provides different ways to connect to a Bridge instance.\n\nWhen using \"public\" connection you don't have to pass a private key. A random private key will be generated for each connection.\n**The public connection provides only the methods related to sending Inbox entries and retrieving public metadata** related to the Inbox.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Public Connection\n\nTo submit data as unregistered user you have to connect using connectPublic(...) and then - prepare and send an Entry.\n\n\n\n## Related Sections\n\n- [Public Connection](#general-example-public-connection-public-connection-mbguw0ck)\n- [Content](#general-example-public-connection-content-mbguw0ck)\n- [TS Example](#general-example-public-connection-ts-example-mbguw0ck)\n\n\n---\n\n**Navigation**: Public Connection\n\n---\n\n# Public Connection\n\n\nTo submit data as unregistered user you have to connect using connectPublic(...) and then - prepare and send an Entry.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To submit data as unregistered user you have to connect using connectPublic(...) and then - prepare...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-public-connection-content-mbguw0ck)\n- [Public Connection](#general-example-public-connection-root-mbguw0ck)\n- [TS Example](#general-example-public-connection-ts-example-mbguw0ck)\n\n\n---\n\n**Navigation**: Public Connection > Content\n\n---\n\n## Content\n\n\nTo submit data as unregistered user you have to connect using connectPublic(...) and then - prepare and send an Entry.\n\n\nYou have to pass required Bridge URL and Solution ID. Then use an `inboxApi`.\n\n\n\n\n\n\n## Subsections\n\n- **TS Example**: ```ts\nconst publicConnection = await Endpoint.connectPublic(\n    \"SOLUTION_ID\",\n    \"BRIDGE_URL\"\n);...\n\n\n## Related Sections\n\n- [Public Connection](#general-example-public-connection-public-connection-mbguw0ck)\n- [TS Example](#general-example-public-connection-ts-example-mbguw0ck)\n- [Public Connection](#general-example-public-connection-root-mbguw0ck)\n\n\n---\n\n**Navigation**: Public Connection > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst publicConnection = await Endpoint.connectPublic(\n    \"SOLUTION_ID\",\n    \"BRIDGE_URL\"\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-public-connection-content-mbguw0ck)\n- [Public Connection](#general-example-public-connection-public-connection-mbguw0ck)\n- [Public Connection](#general-example-public-connection-root-mbguw0ck)\n\n\n---\n\n# Submitting Entries\n\n<Tabs groupId=\"variant\" items={[\"Prepare Entry\",\"With meta\",\"With Files\"]}>\n\n\n\n## Related Sections\n\n- [Submitting Entries](#general-example-submitting-entries-submitting-entries-mbguw0cl)\n- [Content](#general-example-submitting-entries-content-mbguw0cl)\n- [TS Example](#general-example-submitting-entries-ts-example-mbguw0cl)\n\n\n---\n\n**Navigation**: Submitting Entries\n\n---\n\n# Submitting Entries\n\n\n<Tabs groupId=\"variant\" items={[\"Prepare Entry\",\"With meta\",\"With Files\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Prepare Entry\",\"With meta\",\"With Files\"]}>\n<Tab>\n\n\n</Tab>\n<Tab>...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-submitting-entries-content-mbguw0cl)\n- [TS Example](#general-example-submitting-entries-ts-example-mbguw0cl)\n- [TS Example](#general-example-submitting-entries-ts-example-mbguw0cl)\n\n\n---\n\n**Navigation**: Submitting Entries > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst inboxHandle = await inboxApi.prepareEntry(\n    \"INBOX_ID\",\n    serializeObject(\"text to send\"),\n    [], // no files this time\n    undefined  // if logged with private connection, use user private key here.\n);\n\nawait inboxApi.sendEntry(\n    inboxHandle\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-submitting-entries-content-mbguw0cl)\n- [Submitting Entries](#general-example-submitting-entries-submitting-entries-mbguw0cl)\n- [Submitting Entries](#general-example-submitting-entries-root-mbguw0cl)\n\n\n---\n\n**Navigation**: Submitting Entries > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst dataToSend = serializeObject({\n        type: 'General inquiry',\n        answer: 'Example answer'\n    })\n\nconst inboxHandle = await inboxApi.prepareEntry(\n    \"INBOX_ID\",\n    dataToSend,\n    [], // no files this time\n    undefined  // if logged with private connection, use user private key here.\n);\n\nawait inboxApi.sendEntry(inboxHandle);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-submitting-entries-content-mbguw0cl)\n- [Submitting Entries](#general-example-submitting-entries-submitting-entries-mbguw0cl)\n- [Submitting Entries](#general-example-submitting-entries-root-mbguw0cl)\n\n\n---\n\n# Fetching Entries\n\nFetching entries requires a secure private connection.\n\n\n\n## Related Sections\n\n- [Fetching Entries](#general-example-fetching-entries-fetching-entries-mbguw0cm)\n- [Content](#general-example-fetching-entries-content-mbguw0cm)\n- [JS Example](#general-example-fetching-entries-js-example-mbguw0cm)\n\n\n---\n\n**Navigation**: Fetching Entries\n\n---\n\n# Fetching Entries\n\n\nFetching entries requires a secure private connection.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: Fetching entries requires a secure private connection.\n\n<Tabs groupId={'variant'} items={[\"Fetching...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-entries-content-mbguw0cm)\n- [JS Example](#general-example-fetching-entries-js-example-mbguw0cm)\n- [JS Example](#general-example-fetching-entries-js-example-mbguw0cm)\n\n\n---\n\n**Navigation**: Fetching Entries > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"desc\"};\nconst entries = await inboxApi.listEntries(\n    \"INBOX_ID\",\n    defaultListQuery\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-entries-content-mbguw0cm)\n- [Fetching Entries](#general-example-fetching-entries-fetching-entries-mbguw0cm)\n- [Fetching Entries](#general-example-fetching-entries-root-mbguw0cm)\n\n\n---\n\n**Navigation**: Fetching Entries > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"desc\"};\nconst entries = await inboxApi.listEntries(\n    \"INBOX_ID\",\n    defaultListQuery\n);\n\nconst deserializedEntries = entries.readItems.map(entry => {\n    return {\n        ...entry,\n        privateMeta: deserializeObject(entry.privateMeta),\n        data: deserializeObject(entry.data),\n        files: entry.files.map(file => ({\n            ...file,\n            privateMeta: deserializeObject(file.privateMeta)\n        }))\n    };\n});\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-entries-content-mbguw0cm)\n- [Fetching Entries](#general-example-fetching-entries-fetching-entries-mbguw0cm)\n- [Fetching Entries](#general-example-fetching-entries-root-mbguw0cm)\n\n\n---\n\n# Key Considerations\n\nPlease note the following:\n\n# Key Considerations\n\nPlease note the following:\n\n\n\n\n## Content\n\nPlease note the following:\n\n- Events will only trigger for active connections.\n- Events are not captured unless explicitly listened for.\n- A single instance of the `eventQueue` is shared across all connections.\n\n\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Quick Start Guide\n\n<div className={'fd-steps'}>\n\n# Quick Start Guide\n\n<div className={'fd-steps'}>\n\n\n\n\n## Content\n\n<div className={'fd-steps'}>\n    <div className={'fd-step'}>\n\n        ### Start listening in the loop with `listenForEvents`. \\\n        The function `EventQueue.waitEvent` returns a event when one is captured.\n\n        \n    </div>\n    <div className={'fd-step'}>\n        ### Subscribe to Tool (e.g. Thread) events:\n\n        \n    </div>\n    <div className={'fd-step'}>\n        ### Unsubscribe, if events no longer needed:\n\n\n        \n    </div>\n</div>\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Managing Files\n\n<Tabs items={[\"Uploading a simple file\",\"Reading a file\",\"List of Files\"]}>\n\n\n\n## Related Sections\n\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [JS Example](#general-example-managing-files-js-example-mbguw0cn)\n\n\n---\n\n**Navigation**: Managing Files\n\n---\n\n# Managing Files\n\n\n<Tabs items={[\"Uploading a simple file\",\"Reading a file\",\"List of Files\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs items={[\"Uploading a simple file\",\"Reading a file\",\"List of Files\"]}>\n\n<Tab >\nCreating files...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [JS Example](#general-example-managing-files-js-example-mbguw0cn)\n- [JS Example](#general-example-managing-files-js-example-mbguw0cn)\n\n\n---\n\n**Navigation**: Managing Files > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// for example, let's put some extra file info in the file's private meta\nconst sampleFileInfo = {\n    name: file.name,\n    mimetype: file.type\n};\n\nconst sampleFileData = serializeObject(\"sample file data\");\n\nconst fileHandle = await storesApi.createFile(storeId,\n    serializeObject(\"file's public meta-data\"),\n    serializeObject(sampleFileInfo),\n    sampleFileData.length\n);\n\nawait storesApi.writeToFile(fileHandle, sampleFileData);\nconst fileId = await storesApi.closeFile(fileHandle);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n- [Managing Files](#general-example-managing-files-root-mbguw0cn)\n\n\n---\n\n**Navigation**: Managing Files > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// read file contents of the file added to the Store\nconst fileInfo = await storesApi.getFile(fileId);\n\nconst fileHandle = await storesApi.openFile(fileId);\nconst data = await storesApi.readFromFile(fileHandle, fileInfo.size);\nawait storesApi.closeFile(fileHandle);\n\nconsole.log(\"File meta\\n public: \", deserializeObject(fileInfo.publicMeta));\nconsole.log(\"private: \", deserializeObject(fileInfo.privateMeta));\nconsole.log(\"data: \", deserializeObject(data));\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n- [Managing Files](#general-example-managing-files-root-mbguw0cn)\n\n\n---\n\n**Navigation**: Managing Files > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst filesList = await storeApi.listStores(\n    storeId,\n    defaultListQuery\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n- [Managing Files](#general-example-managing-files-root-mbguw0cn)\n\n\n---\n\n**Navigation**: Managing Files > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// filesList:\n{\n    readItems: [<fileObject1>, <fileObject2>,..., <fileObjectN>],\n    totalAvailable: <number_of_all_files_in_the_Store>\n}\n```\n\n    \n\n\n\n## Related Sections\n\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n- [Content](#general-example-managing-files-content-mbguw0cn)\n- [Managing Files](#general-example-managing-files-root-mbguw0cn)\n\n\n---\n\n# Modifying Files\n\n<Tabs items={[\"Updating info about File\",\"Deleting a File\"]}>\n\n\n\n## Related Sections\n\n- [Modifying Files](#general-example-modifying-files-modifying-files-mbguw0cp)\n- [Content](#general-example-modifying-files-content-mbguw0cp)\n- [JS Example](#general-example-modifying-files-js-example-mbguw0cp)\n\n\n---\n\n**Navigation**: Modifying Files\n\n---\n\n# Modifying Files\n\n\n<Tabs items={[\"Updating info about File\",\"Deleting a File\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs items={[\"Updating info about File\",\"Deleting a File\"]}>\n<Tab >\n\n</Tab>\n\n<Tab >\n\n</Tab>\n</Tabs...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-modifying-files-content-mbguw0cp)\n- [JS Example](#general-example-modifying-files-js-example-mbguw0cp)\n- [Modifying Files](#general-example-modifying-files-root-mbguw0cp)\n\n\n---\n\n**Navigation**: Modifying Files > Content\n\n---\n\n## Content\n\n\n<Tabs items={[\"Updating info about File\",\"Deleting a File\"]}>\n<Tab >\n\n</Tab>\n\n<Tab >\n\n</Tab>\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\n// Example: let's update given file's private meta to reflect the file's name change.\nconst cu...\n- **JS Example**: ```js\nawait storeApi.deleteFile(fileId);\n```...\n\n\n## Related Sections\n\n- [JS Example](#general-example-modifying-files-js-example-mbguw0cp)\n- [Modifying Files](#general-example-modifying-files-modifying-files-mbguw0cp)\n- [Modifying Files](#general-example-modifying-files-root-mbguw0cp)\n\n\n---\n\n**Navigation**: Modifying Files > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// Example: let's update given file's private meta to reflect the file's name change.\nconst currentFile =  storeApi.getFile(fileId);\n\nconst currentFilePrivateMeta = deserializeObject(currentFile.privateMeta);\n\nconst newFilePrivateMeta = {\n    name: \"newFileName\"\n};\nawait storeApi.updateFile(\n    fileId,\n    currentFile.publicMeta,\n    serializeObject(newFilePrivateMeta),\n    currentFile.fileSize\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-modifying-files-content-mbguw0cp)\n- [Modifying Files](#general-example-modifying-files-modifying-files-mbguw0cp)\n- [Modifying Files](#general-example-modifying-files-root-mbguw0cp)\n\n\n---\n\n# PrivMX Bridge\n\nTo proceed with this tutorial, you should already have your Bridge Server up and running. If not, you can find step-by-step instructions on [quick start](../start/quick-start) page.\n\n# PrivMX Bridge\n\nTo proceed with this tutorial, you should already have your Bridge Server up and running. If not, you can find step-by-step instructions on [quick start](../start/quick-start) page.\n\n\n\n\n## Content\nTo proceed with this tutorial, you should already have your Bridge Server up and running. If not, you can find step-by-step instructions on [quick start](../start/quick-start) page.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Helpers\n\nMost of the Endpoint's methods (for example creating or updating containers like Threads, Stores, etc.) require some data to be passed as a buffer. In JavaScript that buffer is represented as `Uint8Array`.\n\n\n\n## Related Sections\n\n- [Helpers](#general-example-helpers-helpers-mbguw0cp)\n- [Content](#general-example-helpers-content-mbguw0cp)\n- [JS Example](#general-example-helpers-js-example-mbguw0cp)\n\n\n---\n\n**Navigation**: Helpers\n\n---\n\n# Helpers\n\n\nMost of the Endpoint's methods (for example creating or updating containers like Threads, Stores, etc.) require some data to be passed as a buffer. In JavaScript that buffer is represented as `Uint8Array`.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: Most of the Endpoint's methods (for example creating or updating containers like Threads, Stores, et...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Helpers](#general-example-helpers-root-mbguw0cp)\n- [Content](#general-example-helpers-content-mbguw0cp)\n- [JS Example](#general-example-helpers-js-example-mbguw0cp)\n\n\n---\n\n**Navigation**: Helpers > Content\n\n---\n\n## Content\n\nMost of the Endpoint's methods (for example creating or updating containers like Threads, Stores, etc.) require some data to be passed as a buffer. In JavaScript that buffer is represented as `Uint8Array`.\n\nA common way to serialize JS objects is to serialize them to a JSON string using `JSON.stringify`. Next, in order to encode strings you can use\n`TextEncoder`. Because it's so common, in our examples we will use helper functions to do these conversions underneath.\n\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nfunction strToUInt8(text) {\n   return (new TextEncoder()).encode(text);\n}\n\nfunction uInt8ToStr...\n\n\n## Related Sections\n\n- [Helpers](#general-example-helpers-helpers-mbguw0cp)\n- [JS Example](#general-example-helpers-js-example-mbguw0cp)\n- [Helpers](#general-example-helpers-root-mbguw0cp)\n\n\n---\n\n**Navigation**: Helpers > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nfunction strToUInt8(text) {\n   return (new TextEncoder()).encode(text);\n}\n\nfunction uInt8ToStr(arr) {\n   return (new TextDecoder()).decode(arr);\n}\n\nfunction deserializeObject(binary){\n   return JSON.parse(uInt8ToStr(binary));\n}\n\nfunction serializeObject(object) {\n   return strToUInt8(JSON.stringify(object));\n}\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-helpers-content-mbguw0cp)\n- [Helpers](#general-example-helpers-helpers-mbguw0cp)\n- [Helpers](#general-example-helpers-root-mbguw0cp)\n\n\n---\n\n# Initial Assumptions\n\nAll the values below like `BRIDGE_URL`, `SOLUTION_ID`, `CONTEXT_ID`\n\n\n\n## Related Sections\n\n- [Initial Assumptions](#general-example-initial-assumptions-initial-assumptions-mbguw0cq)\n- [Content](#general-example-initial-assumptions-content-mbguw0cq)\n- [JS Example](#general-example-initial-assumptions-js-example-mbguw0cq)\n\n\n---\n\n**Navigation**: Initial Assumptions\n\n---\n\n# Initial Assumptions\n\n\nAll the values below like `BRIDGE_URL`, `SOLUTION_ID`, `CONTEXT_ID`\n\n\n\n\n\n\n## Subsections\n\n- **Content**: All the values below like `BRIDGE_URL`, `SOLUTION_ID`, `CONTEXT_ID`\nshould be replaced by the ones...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-initial-assumptions-content-mbguw0cq)\n- [Initial Assumptions](#general-example-initial-assumptions-root-mbguw0cq)\n- [JS Example](#general-example-initial-assumptions-js-example-mbguw0cq)\n\n\n---\n\n**Navigation**: Initial Assumptions > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst BRIDGE_URL = \"http://localhost:9111\";\nconst SOLUTION_ID = \"YOUR_SOLUTION_ID\";\nconst CONTEXT_ID = \"YOUR_CONTEXT_ID\";\n\nconst USER1_ID = \"user_1\";\nconst USER1_PUBLIC_KEY = \"PUBLIC_KEY_1\";\nconst USER1_PRIV = \"PRIVATE_KEY_1\";\n\nconst USER2_ID = \"user_2\";\nconst USER2_PUBLIC_KEY = \"PUBLIC_KEY_2\";\n\nconst USER3_ID = \"user_3\";\nconst USER3_PUBLIC_KEY = \"PUBLIC_KEY_3\";\n\n// Initialize Endpoint and its Wasm assets\nawait Endpoint.setup(\"/public\");\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-initial-assumptions-content-mbguw0cq)\n- [Initial Assumptions](#general-example-initial-assumptions-initial-assumptions-mbguw0cq)\n- [Initial Assumptions](#general-example-initial-assumptions-root-mbguw0cq)\n\n\n---\n\n# Basic Serialization Example - JSON\n\nconst dataObject = {\n\n\n\n## Related Sections\n\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-basic-serialization-example---json-mbguw0cq)\n- [Content](#general-example-basic-serialization-example---json-content-mbguw0cq)\n- [TS Example](#general-example-basic-serialization-example---json-ts-example-mbguw0cq)\n\n\n---\n\n**Navigation**: Basic Serialization Example - JSON\n\n---\n\n# Basic Serialization Example - JSON\n\n\nconst dataObject = {\n\n\n\n\n\n\n## Subsections\n\n- **Content**: ...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-basic-serialization-example---json-content-mbguw0cq)\n- [TS Example](#general-example-basic-serialization-example---json-ts-example-mbguw0cq)\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-root-mbguw0cq)\n\n\n---\n\n**Navigation**: Basic Serialization Example - JSON > Content\n\n---\n\n## Content\n\n\n\n\n\n\n\n\n## Subsections\n\n- **TS Example**: ```ts\nconst dataObject = {\n    content: 'MESSAGE_CONTENT',\n    type: 'text'\n};\n\nconst binaryData = s...\n\n\n## Related Sections\n\n- [TS Example](#general-example-basic-serialization-example---json-ts-example-mbguw0cq)\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-basic-serialization-example---json-mbguw0cq)\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-root-mbguw0cq)\n\n\n---\n\n**Navigation**: Basic Serialization Example - JSON > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst dataObject = {\n    content: 'MESSAGE_CONTENT',\n    type: 'text'\n};\n\nconst binaryData = serializeObject(dataObject); // returns data encoded to Uint8Array\nconst deserializedObject = deserializeObject(binaryData); // returns JavaScript object\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-basic-serialization-example---json-content-mbguw0cq)\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-basic-serialization-example---json-mbguw0cq)\n- [Basic Serialization Example - JSON](#general-example-basic-serialization-example---json-root-mbguw0cq)\n\n\n---\n\n# Create Client App\n\nFirst, you have to connect to your Bridge instance using `Endpoint.connect` method. It requires the API keys\n\n\n\n## Related Sections\n\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [JS Example](#general-example-create-client-app-js-example-mbguw0cq)\n\n\n---\n\n**Navigation**: Create Client App\n\n---\n\n# Create Client App\n\n\nFirst, you have to connect to your Bridge instance using `Endpoint.connect` method. It requires the API keys\n\n\n\n\n\n\n## Subsections\n\n- **Content**: First, you have to connect to your Bridge instance using `Endpoint.connect` method. It requires the...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Create Client App](#general-example-create-client-app-root-mbguw0cq)\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [JS Example](#general-example-create-client-app-js-example-mbguw0cq)\n\n\n---\n\nndMessage(\n   threadId, \n   strToUInt8(\"some public meta-data\"), \n   strToUI...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\nconst messagesList = await...## Related Sections\n\n- [JS Example](#general-example-create-client-app-js-example-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [JS Example](#general-example-create-client-app-js-example-mbguw0cq)\n\n---\n\n**Navigation**: Create Client App > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nimport {Endpoint} from \"@simplito/privmx-webendpoint\"\n\nconst connection = await Endpoint.connect(USER1_PRIV, SOLUTION_ID, BRIDGE_URL);\nconst threadApi  = await Endpoint.createThreadApi(connection);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-root-mbguw0cq)\n\n\n---\n\n**Navigation**: Create Client App > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n//using constants from initial assumptions\nconst exampleUser = {\n     userId: USER1_ID,\n     pubKey: USER1_PUBLIC_KEY,\n};\n\nconst newThreadId = await threadApi.createThread(\n   CONTEXT_ID, \n   [exampleUser], // list of users who will have access to the created Thread\n   [exampleUser], // list of managers of that Thread\n   strToUInt8(\"some public meta-data\"),\n   strToUInt8(\"some private meta-data, such as thread name\")\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-root-mbguw0cq)\n\n\n---\n\n**Navigation**: Create Client App > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nawait threadApi.sendMessage(\n   threadId, \n   strToUInt8(\"some public meta-data\"), \n   strToUInt8(\"some private meta-data\"), \n   strToUInt8(\"some message content\")\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-root-mbguw0cq)\n\n\n---\n\n**Navigation**: Create Client App > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\nconst messagesList = await threadApi.listMessages(threadId, defaultListQuery);\nconst decodedMessages = messages.readItems.map(x => {\n    return {\n        publicMeta: deserializedObject(x.publicMeta),\n        privateMeta: deserializedObject(x.privateMeta),\n        data: deserializedObject(x.data)\n    }\n})\n\nconsole.log(\"messages\", messages);\nconsole.log(\"messages in human-readable format\", decodedMessages)\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-create-client-app-content-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-create-client-app-mbguw0cq)\n- [Create Client App](#general-example-create-client-app-root-mbguw0cq)\n\n\n---\n\n# Next Steps\n\nWith everything ready to go, now it's time to start using all the capabilities of Endpoint and Bridge.\n\n# Next Steps\n\nWith everything ready to go, now it's time to start using all the capabilities of Endpoint and Bridge.\n\n\n\n\n## Content\n\nWith everything ready to go, now it's time to start using all the capabilities of Endpoint and Bridge.\n\nLearn how to use:\n\n-   [**Threads**](../start/threads/overview) - for exchanging encrypted messages;\n-   [**Stores**](../start/stores/overview) - for saving and sharing encrypted files;\n-   [**Inboxes**](../start/inboxes/overview) - for one way communication with external users.\n\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# EventManager Features\n\nWith `EventManager`, you can:\n\n# EventManager Features\n\nWith `EventManager`, you can:\n\n\n\n\n## Content\nWith `EventManager`, you can:\n\n- Start an event loop to listen for incoming events.\n- Create scoped event managers for specific Tools (e.g., Threads, Stores, Inboxes, connections).\n- Dynamically subscribe and unsubscribe from events.\n\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Usage Examples\n\n<Tabs groupId=\"tool\" items={[\"Threads\",\"Stores\",\"Inboxes\",\"Connection\"]}>\n\n\n\n## Related Sections\n\n- [Usage Examples](#general-example-usage-examples-usage-examples-mbguw0cs)\n- [Content](#general-example-usage-examples-content-mbguw0cs)\n- [JS Example](#general-example-usage-examples-js-example-mbguw0cs)\n\n\n---\n\n**Navigation**: Usage Examples\n\n---\n\n# Usage Examples\n\n\n<Tabs groupId=\"tool\" items={[\"Threads\",\"Stores\",\"Inboxes\",\"Connection\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"tool\" items={[\"Threads\",\"Stores\",\"Inboxes\",\"Connection\"]}>\n<Tab>\nThe example below de...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-usage-examples-content-mbguw0cs)\n- [JS Example](#general-example-usage-examples-js-example-mbguw0cs)\n- [JS Example](#general-example-usage-examples-js-example-mbguw0cs)\n\n\n---\n\ner } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...\n- **JS Example**: ```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...## Related Sections\n\n- [Usage Examples](#general-example-usage-examples-usage-examples-mbguw0cs)\n- [JS Example](#general-example-usage-examples-js-example-mbguw0cs)\n- [JS Example](#general-example-usage-examples-js-example-mbguw0cs)\n\n---\n\n# Working with Inboxes\n\nWhen working with Inboxes, you will use the following:\n\n\n\n## Related Sections\n\n- [Working with Inboxes](#general-example-working-with-inboxes-working-with-inboxes-mbguw0cu)\n- [Content](#general-example-working-with-inboxes-content-mbguw0cu)\n- [JS Example](#general-example-working-with-inboxes-js-example-mbguw0cu)\n\n\n---\n\n**Navigation**: Working with Inboxes\n\n---\n\n# Working with Inboxes\n\n\nWhen working with Inboxes, you will use the following:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: When working with Inboxes, you will use the following:\n- `inboxApi` - for methods used to manage In...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-working-with-inboxes-content-mbguw0cu)\n- [JS Example](#general-example-working-with-inboxes-js-example-mbguw0cu)\n- [Working with Inboxes](#general-example-working-with-inboxes-root-mbguw0cu)\n\n\n---\n\n**Navigation**: Working with Inboxes > Content\n\n---\n\n## Content\n\n\nWhen working with Inboxes, you will use the following:\n- `inboxApi` - for methods used to manage Inboxes in given Context\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst threadApi = await Endpoint.createThreadApi(connection);\nconst storeApi = await Endpoint....\n\n\n## Related Sections\n\n- [Working with Inboxes](#general-example-working-with-inboxes-working-with-inboxes-mbguw0cu)\n- [JS Example](#general-example-working-with-inboxes-js-example-mbguw0cu)\n- [Working with Inboxes](#general-example-working-with-inboxes-root-mbguw0cu)\n\n\n---\n\n**Navigation**: Working with Inboxes > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst threadApi = await Endpoint.createThreadApi(connection);\nconst storeApi = await Endpoint.createStoreApi(connection);\nconst inboxApi = await Endpoint.createInboxApi(connection, threadApi, storeApi);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-working-with-inboxes-content-mbguw0cu)\n- [Working with Inboxes](#general-example-working-with-inboxes-working-with-inboxes-mbguw0cu)\n- [Working with Inboxes](#general-example-working-with-inboxes-root-mbguw0cu)\n\n\n---\n\n# Creating an Inbox\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a structured Private Meta\",\"With Public View\"]}>\n\n\n\n## Related Sections\n\n- [Creating an Inbox](#general-example-creating-an-inbox-creating-an-inbox-mbguw0cu)\n- [Content](#general-example-creating-an-inbox-content-mbguw0cu)\n- [JS Example](#general-example-creating-an-inbox-js-example-mbguw0cu)\n\n\n---\n\n**Navigation**: Creating an Inbox\n\n---\n\n# Creating an Inbox\n\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a structured Private Meta\",\"With Public View\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Basic\",\"With a structured Private Meta\",\"With Public View\"]}>\n<Tab...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Creating an Inbox](#general-example-creating-an-inbox-root-mbguw0cu)\n- [Content](#general-example-creating-an-inbox-content-mbguw0cu)\n- [JS Example](#general-example-creating-an-inbox-js-example-mbguw0cu)\n\n\n---\n\n= {\n    name: 'Contact Form'\n};\nconst users = [{ userId: 'MY_USER', pubKey:...\n- **JS Example**: ```js\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KE...## Related Sections\n\n- [JS Example](#general-example-creating-an-inbox-js-example-mbguw0cu)\n- [JS Example](#general-example-creating-an-inbox-js-example-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-creating-an-inbox-mbguw0cu)\n\n---\n\n**Navigation**: Creating an Inbox > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KEY2' }];\nconst managers = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }];\n\n\nconst inboxId = await inboxApi.createInbox(\n    'CONTEXT_ID',\n    users,\n    managers,\n    serializeObject(\"some public-meta\"),\n    serializeObject(\"some private-meta\"),\n    undefined // optional files config\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-an-inbox-content-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-creating-an-inbox-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-root-mbguw0cu)\n\n\n---\n\n**Navigation**: Creating an Inbox > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst privateMeta = {\n    name: 'Contact Form'\n};\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KEY2' }];\nconst managers = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }];\n\nconst inboxId = await inboxApi.createInbox(\n    'CONTEXT_ID',\n    users,\n    managers,\n    serializeObject(\"some public-meta\"),\n    serializeObject(privateMeta),\n    undefined // optional files config\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-an-inbox-content-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-creating-an-inbox-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-root-mbguw0cu)\n\n\n---\n\n**Navigation**: Creating an Inbox > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KEY2' }];\nconst managers = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }];\n\nconst privateMeta = {\n    name: 'Album'\n};\n\nconst publicMeta = {\n    formScheme: [\n        { question: 'Your name' },\n        { question: 'E-mail' }\n    ]\n};\n\nconst inboxId = await inboxApi.createInbox(\n    'CONTEXT_ID',\n    users,\n    managers,\n    serializeObject(publicMeta),\n    serializeObject(privateMeta),\n    undefined // optional files config\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-an-inbox-content-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-creating-an-inbox-mbguw0cu)\n- [Creating an Inbox](#general-example-creating-an-inbox-root-mbguw0cu)\n\n\n---\n\n# Fetching Inboxes\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Inboxes\",\"By Inbox ID\",\"Paging\"]}>\n\n\n\n## Related Sections\n\n- [Fetching Inboxes](#general-example-fetching-inboxes-fetching-inboxes-mbguw0cv)\n- [JS Example](#general-example-fetching-inboxes-js-example-mbguw0cv)\n- [Content](#general-example-fetching-inboxes-content-mbguw0cv)\n\n\n---\n\n**Navigation**: Fetching Inboxes\n\n---\n\n# Fetching Inboxes\n\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Inboxes\",\"By Inbox ID\",\"Paging\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Inboxes\",\"By Inbox ID\",\"Paging\"]}>\n<Tab >\nFet...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [JS Example](#general-example-fetching-inboxes-js-example-mbguw0cv)\n- [Content](#general-example-fetching-inboxes-content-mbguw0cv)\n- [JS Example](#general-example-fetching-inboxes-js-example-mbguw0cv)\n\n\n---\n\n**Navigation**: Fetching Inboxes > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"asc\"};\n\nconst inboxList = await inboxApi.listInboxes(\n    \"CONTEXT_ID\",\n    defaultListQuery\n);\n\nconst inboxListwithDeserializedMeta = inboxList.readItems.map(inbox => {\n    return {\n        inbox: inbox,\n        privateMeta: deserializeObject(inbox.privateMeta),\n        publicMeta: deserializeObject(inbox.publicMeta)\n    };\n});\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-inboxes-content-mbguw0cv)\n- [Fetching Inboxes](#general-example-fetching-inboxes-fetching-inboxes-mbguw0cv)\n- [Fetching Inboxes](#general-example-fetching-inboxes-root-mbguw0cv)\n\n\n---\n\n**Navigation**: Fetching Inboxes > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst inbox = await inboxApi.getInbox(\"INBOX_ID\");\n\nconst privateMeta = deserializeObject(inbox.privateMeta);\nconst publicMeta = deserializeObject(inbox.publicMeta);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Fetching Inboxes](#general-example-fetching-inboxes-fetching-inboxes-mbguw0cv)\n- [Content](#general-example-fetching-inboxes-content-mbguw0cv)\n- [Fetching Inboxes](#general-example-fetching-inboxes-root-mbguw0cv)\n\n\n---\n\n**Navigation**: Fetching Inboxes > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip:50, limit: 20, sortOrder: \"desc\"};\n\nconst inboxList = await inboxApi.listInboxes(\n    \"CONTEXT_ID\",\n    defaultListQuery\n);\n\nconst inboxListwithDeserializedMeta = inboxList.readItems.map(inbox => {\n    return {\n        inbox: inbox,\n        privateMeta: deserializeObject(inbox.privateMeta),\n        publicMeta: deserializeObject(inbox.publicMeta)\n    };\n});\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-inboxes-content-mbguw0cv)\n- [Fetching Inboxes](#general-example-fetching-inboxes-fetching-inboxes-mbguw0cv)\n- [Fetching Inboxes](#general-example-fetching-inboxes-root-mbguw0cv)\n\n\n---\n\n# Modifying Inboxes\n\n<Tabs items={[\"Renaming Inboxes\",\"Removing Users\",\"Deleting Inbox\"]}>\n\n\n\n## Related Sections\n\n- [Modifying Inboxes](#general-example-modifying-inboxes-modifying-inboxes-mbguw0cw)\n- [Content](#general-example-modifying-inboxes-content-mbguw0cw)\n- [TEXT Example](#general-example-modifying-inboxes-text-example-mbguw0cw)\n\n\n---\n\n**Navigation**: Modifying Inboxes\n\n---\n\n# Modifying Inboxes\n\n\n<Tabs items={[\"Renaming Inboxes\",\"Removing Users\",\"Deleting Inbox\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs items={[\"Renaming Inboxes\",\"Removing Users\",\"Deleting Inbox\"]}>\n<Tab default>\nTo update an In...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-modifying-inboxes-content-mbguw0cw)\n- [TEXT Example](#general-example-modifying-inboxes-text-example-mbguw0cw)\n- [TEXT Example](#general-example-modifying-inboxes-text-example-mbguw0cw)\n\n\n---\n\n# Using Public and Private Keys\n\nYou need a private key to connect the Endpoint to your Bridge. **Private key will never leave the Endpoint**.\n\n# Using Public and Private Keys\n\nYou need a private key to connect the Endpoint to your Bridge. **Private key will never leave the Endpoint**.\n\n\n\n\n## Content\nYou need a private key to connect the Endpoint to your Bridge. **Private key will never leave the Endpoint**.\n- PrivMX Endpoint uses the user's private key to encrypt, decrypt and verify data on the client side only.\n- PrivMX Bridge stores only the public part, i.e., the user's public key and user's ID.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Importing NPM Package\n\nimport { Endpoint, EventQueue, Types } from \"@simplito/privmx-webendpoint\";\n\n\n\n## Related Sections\n\n- [Content](#general-example-importing-npm-package-content-mbguw0cx)\n- [Importing NPM Package](#general-example-importing-npm-package-importing-npm-package-mbguw0cx)\n\n\n---\n\n**Navigation**: Importing NPM Package\n\n---\n\n# Importing NPM Package\n\n\nimport { Endpoint, EventQueue, Types } from \"@simplito/privmx-webendpoint\";\n\n\n\n\n\n\n## Subsections\n\n- **Content**: ...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-importing-npm-package-content-mbguw0cx)\n- [Importing NPM Package](#general-example-importing-npm-package-root-mbguw0cx)\n\n\n---\n\n**Navigation**: Importing NPM Package > Content\n\n---\n\n## Content\n\n\n\n\n\n\n\n## Subsections\n\n- **TS Example**: ```ts\nimport { Endpoint, EventQueue, Types } from \"@simplito/privmx-webendpoint\";\n```...\n\n\n## Related Sections\n\n- [Importing NPM Package](#general-example-importing-npm-package-importing-npm-package-mbguw0cx)\n- [Importing NPM Package](#general-example-importing-npm-package-root-mbguw0cx)\n\n\n---\n\n# Using Bundle\n\nFirst you should copy the `privmx-endpoint-web.js` file (bundle) from the `./node_modules/@simplito/privmx-webendpoint/dist/bundle` directory to your Web Server's public directory.\n\n\n\n## Related Sections\n\n- [Using Bundle](#general-example-using-bundle-using-bundle-mbguw0cy)\n- [Content](#general-example-using-bundle-content-mbguw0cy)\n- [HTML Example](#general-example-using-bundle-html-example-mbguw0cy)\n\n\n---\n\n**Navigation**: Using Bundle\n\n---\n\n# Using Bundle\n\n\nFirst you should copy the `privmx-endpoint-web.js` file (bundle) from the `./node_modules/@simplito/privmx-webendpoint/dist/bundle` directory to your Web Server's public directory.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: First you should copy the `privmx-endpoint-web.js` file (bundle) from the `./node_modules/@simplito...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-using-bundle-content-mbguw0cy)\n- [Using Bundle](#general-example-using-bundle-root-mbguw0cy)\n- [HTML Example](#general-example-using-bundle-html-example-mbguw0cy)\n\n\n---\n\n**Navigation**: Using Bundle > Content\n\n---\n\n## Content\n\n\nFirst you should copy the `privmx-endpoint-web.js` file (bundle) from the `./node_modules/@simplito/privmx-webendpoint/dist/bundle` directory to your Web Server's public directory.\n\nNext, in your `index.html` add script tag to import the bundle:\n\nYou can use it in your app in one of the following methods:\n\n- **From global scope**\n    \n- **CommonJS import**\n   \n- **AMD import**\n   \n\n\n\n\n\n## Subsections\n\n- **HTML Example**: ```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"<public_dir>/privmx-endpoint-web.js\">...\n\n\n## Related Sections\n\n- [Using Bundle](#general-example-using-bundle-using-bundle-mbguw0cy)\n- [HTML Example](#general-example-using-bundle-html-example-mbguw0cy)\n- [Using Bundle](#general-example-using-bundle-root-mbguw0cy)\n\n\n---\n\n**Navigation**: Using Bundle > Content > HTML Example\n\n---\n\n### HTML Example\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"<public_dir>/privmx-endpoint-web.js\"></script>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-using-bundle-content-mbguw0cy)\n- [Using Bundle](#general-example-using-bundle-using-bundle-mbguw0cy)\n- [Using Bundle](#general-example-using-bundle-root-mbguw0cy)\n\n\n---\n\n# Web Endpoint's APIs\n\nYou need your Bridge's instance specific data, mentioned [earlier](#initial-requirements), which you should get during the Bridge's setup process.\n\n\n\n## Related Sections\n\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-web-endpoint's-apis-mbguw0cy)\n- [Content](#general-example-web-endpoint-s-apis-content-mbguw0cy)\n- [JS Example](#general-example-web-endpoint-s-apis-js-example-mbguw0cy)\n\n\n---\n\n**Navigation**: Web Endpoint's APIs\n\n---\n\n# Web Endpoint's APIs\n\n\nYou need your Bridge's instance specific data, mentioned [earlier](#initial-requirements), which you should get during the Bridge's setup process.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: You need your Bridge's instance specific data, mentioned [earlier](#initial-requirements), which you...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-web-endpoint-s-apis-content-mbguw0cy)\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-root-mbguw0cy)\n- [JS Example](#general-example-web-endpoint-s-apis-js-example-mbguw0cy)\n\n\n---\n\n**Navigation**: Web Endpoint's APIs > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst  bridgeUrl = \"http://localhost:9111\";\nconst  solutionId = \"SOLUTION_ID\";\n\nconst  userPrivKey = \"USER_PRIVATE_KEY\";\nconst  userPubKey = \"USER_PUBLIC_KEY\";\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-web-endpoint-s-apis-content-mbguw0cy)\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-web-endpoint's-apis-mbguw0cy)\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-root-mbguw0cy)\n\n\n---\n\n**Navigation**: Web Endpoint's APIs > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nawait Endpoint.setup(\"<public_dir>\");\n// Create connection to the Bridge Server\nconst connection = await Endpoint.connect(userPrivKey, solutionId, bridgeUrl);\n// Initialize the Threads API\nconst threadsApi = await Endpoint.createThreadApi(connection);\n// call some API methods\nconst threads = await threadsApi.listThreads(...);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-web-endpoint-s-apis-content-mbguw0cy)\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-web-endpoint's-apis-mbguw0cy)\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-root-mbguw0cy)\n\n\n---\n\n# Messages Inside Threads\n\nMessages inside Threads are sent in binary format. Before sending a message, you need to decide on the message format and choose\n\n# Messages Inside Threads\n\nMessages inside Threads are sent in binary format. Before sending a message, you need to decide on the message format and choose\n\n\n\n\n## Content\n\nMessages inside Threads are sent in binary format. Before sending a message, you need to decide on the message format and choose\nthe appropriate data serialization method.\n\nFor more information about the Threads architecture and best practices for sending messages, visit the\n[Threads Documentation](../start/threads/overview).\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Serialization of Data\n\nTo send a message you have to use the Endpoint's `sendMessage` method. This method accepts arguments in `Uint8Array`, here are some of\n\n# Serialization of Data\n\nTo send a message you have to use the Endpoint's `sendMessage` method. This method accepts arguments in `Uint8Array`, here are some of\n\n\n\n\n## Content\n\nTo send a message you have to use the Endpoint's `sendMessage` method. This method accepts arguments in `Uint8Array`, here are some of\nthe ways you can serialize your JavaScript objects:\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# Sending Messages\n\n<Tabs groupId=\"variant\" items={[\"basic\",\"markdown\"]}>\n\n\n\n## Related Sections\n\n- [Sending Messages](#general-example-sending-messages-sending-messages-mbguw0cz)\n- [TS Example](#general-example-sending-messages-ts-example-mbguw0cz)\n- [Content](#general-example-sending-messages-content-mbguw0cz)\n\n\n---\n\n**Navigation**: Sending Messages\n\n---\n\n# Sending Messages\n\n\n<Tabs groupId=\"variant\" items={[\"basic\",\"markdown\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"basic\",\"markdown\"]}>\n<Tab>\nExample of sending a message in Plain T...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-sending-messages-content-mbguw0cz)\n- [TS Example](#general-example-sending-messages-ts-example-mbguw0cz)\n- [TS Example](#general-example-sending-messages-ts-example-mbguw0cz)\n\n\n---\n\n**Navigation**: Sending Messages > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst message = 'Message text';\n \nconst encoder = new TextEncoder();\n\nawait threadApi.sendMessage(\n    threadId, \n    serializeObject(\"some public meta-data\"), \n    serializeObject(\"some private meta-data\"), \n    serializeObject(message)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-sending-messages-content-mbguw0cz)\n- [Sending Messages](#general-example-sending-messages-sending-messages-mbguw0cz)\n- [Sending Messages](#general-example-sending-messages-root-mbguw0cz)\n\n\n---\n\n**Navigation**: Sending Messages > Content > TS Example\n\n---\n\n### TS Example\n\n```ts\nconst messageObject = {\n    //output from the chosen WYSIWYG editor\n    //or your own object definition \n};\n\nconst privateMeta = {\n    type: 'markdown'\n};\n\nconst publicMeta = {\n    tag: 'tag'\n};\n\nawait threadApi.sendMessage(\n    threadId, \n    serializeObject(publicMeta), \n    serializeObject(privateMeta),\n    serializeObject(messageObject)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-sending-messages-content-mbguw0cz)\n- [Sending Messages](#general-example-sending-messages-sending-messages-mbguw0cz)\n- [Sending Messages](#general-example-sending-messages-root-mbguw0cz)\n\n\n---\n\n# Receiving Messages\n\nTo get a list of messages inside a Thread, use `getMessages` method. Because data inside messages is in Uint8Array\n\n\n\n## Related Sections\n\n- [Receiving Messages](#general-example-receiving-messages-receiving-messages-mbguw0cz)\n- [Content](#general-example-receiving-messages-content-mbguw0cz)\n- [JS Example](#general-example-receiving-messages-js-example-mbguw0cz)\n\n\n---\n\n**Navigation**: Receiving Messages\n\n---\n\n# Receiving Messages\n\n\nTo get a list of messages inside a Thread, use `getMessages` method. Because data inside messages is in Uint8Array\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To get a list of messages inside a Thread, use `getMessages` method. Because data inside messages i...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-receiving-messages-content-mbguw0cz)\n- [Receiving Messages](#general-example-receiving-messages-root-mbguw0cz)\n- [JS Example](#general-example-receiving-messages-js-example-mbguw0cz)\n\n\n---\n\n**Navigation**: Receiving Messages > Content\n\n---\n\n## Content\n\n\nTo get a list of messages inside a Thread, use `getMessages` method. Because data inside messages is in Uint8Array\nyou have to deserialize it to human-readable string.\n**Endpoint takes care of encrypting your data before sending it to PrivMX Bridge.**\n\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst messages = await thr...\n\n\n## Related Sections\n\n- [Receiving Messages](#general-example-receiving-messages-receiving-messages-mbguw0cz)\n- [JS Example](#general-example-receiving-messages-js-example-mbguw0cz)\n- [Receiving Messages](#general-example-receiving-messages-root-mbguw0cz)\n\n\n---\n\n**Navigation**: Receiving Messages > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst messages = await threadApi.listMessages(threadId, defaultListQuery);\nconst decodedMessages = messages.readItems.map(x =>\n   {\n      return {\n        publicMeta: deserializedObject(x.publicMeta),\n        privateMeta: deserializedObject(x.privateMeta),\n        data: deserializedObject(x.data)\n      }\n   }\n)\nconsole.log(\"messages\", messages);\nconsole.log(\"messages in human-readable format\", decodedMessages);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-receiving-messages-content-mbguw0cz)\n- [Receiving Messages](#general-example-receiving-messages-receiving-messages-mbguw0cz)\n- [Receiving Messages](#general-example-receiving-messages-root-mbguw0cz)\n\n\n---\n\n# Working with Stores\n\nWhen working with Stores, you will use the following:\n\n\n\n## Related Sections\n\n- [Working with Stores](#general-example-working-with-stores-working-with-stores-mbguw0cz)\n- [Content](#general-example-working-with-stores-content-mbguw0cz)\n\n\n---\n\n**Navigation**: Working with Stores\n\n---\n\n# Working with Stores\n\n\nWhen working with Stores, you will use the following:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: When working with Stores, you will use the following:\n\nWhen working with Threads, you will use the...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-working-with-stores-content-mbguw0cz)\n- [Working with Stores](#general-example-working-with-stores-root-mbguw0cz)\n\n\n---\n\n**Navigation**: Working with Stores > Content\n\n---\n\n## Content\n\n\nWhen working with Stores, you will use the following:\n\nWhen working with Threads, you will use the following:\n- `storeApi` - provides methods used to manage Stores in given Context\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst storeApi  = await EndpointFactory.createStoreApi(CONNECTION_ID);\n```...\n\n\n## Related Sections\n\n- [Working with Stores](#general-example-working-with-stores-working-with-stores-mbguw0cz)\n- [Working with Stores](#general-example-working-with-stores-root-mbguw0cz)\n\n\n---\n\n# Creating Stores\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"With `publicMeta`\"]}>\n\n\n\n## Related Sections\n\n- [Creating Stores](#general-example-creating-stores-creating-stores-mbguw0d0)\n- [Content](#general-example-creating-stores-content-mbguw0d0)\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n\n\n---\n\n**Navigation**: Creating Stores\n\n---\n\n# Creating Stores\n\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"With `publicMeta`\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"With `publicMeta`\"]}>\n<Tab>\nCreating a basic...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-creating-stores-content-mbguw0d0)\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n\n\n---\n\n**Navigation**: Creating Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\n// create a new Store with access for user_1 as manager and user_2 as regular user\n// for example, let's put the name of the store as an object in the store's private meta\nconst storeId = await storesApi.createStore(CONTEXT_ID, users, managers,\n    serializeObject(\"some store's public meta-data\"),\n    serializeObject(\"some store's private meta-data\")\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-stores-content-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-creating-stores-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-root-mbguw0d0)\n\n\n---\n\n**Navigation**: Creating Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\nconst privateMeta = {\n    name: 'Photo Album'\n};\n\nconst storeId = storeApi.createStore(\n    CONTEXT_ID,\n    users,\n    managers,\n    serializeObject(\"some public-meta\"),\n    serializeObject(privateMeta)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-stores-content-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-creating-stores-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-root-mbguw0d0)\n\n\n---\n\n**Navigation**: Creating Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\nconst privateMeta = {\n    name: 'Album'\n};\n\nconst publicMeta = {\n    tags: ['TAG1', 'TAG2', 'TAG3']\n};\n\nconst storeId = storeApi.createStore(\n    CONTEXT_ID,\n    users,\n    managers,\n    serializeObject(publicMeta),\n    serializeObject(privateMeta)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-stores-content-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-creating-stores-mbguw0d0)\n- [Creating Stores](#general-example-creating-stores-root-mbguw0d0)\n\n\n---\n\n# Fetching Stores\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Stores\",\"By Store ID\",\"Paging\"]}>\n\n\n\n## Related Sections\n\n- [Fetching Stores](#general-example-fetching-stores-fetching-stores-mbguw0d1)\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n\n\n---\n\n**Navigation**: Fetching Stores\n\n---\n\n# Fetching Stores\n\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Stores\",\"By Store ID\",\"Paging\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Stores\",\"By Store ID\",\"Paging\"]}>\n<Tab>\nFetch...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)\n\n\n---\n\n**Navigation**: Fetching Stores > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Stores\",\"By Store ID\",\"Paging\"]}>\n<Tab>\nFetching the most recent Stores in given Context:\n\n\nAs a result you will receive an object:\n\n\n</Tab>\n\n<Tab>\nFetching the oldest Stores (by creation date) in given Context:\n\n\nAs a result you will receive an object:\n\n</Tab>\n\n<Tab >\nYou can get info about a Store using its `storeId`:\n\n\nAs a result you will receive an `Store` object.\n</Tab>\n\n<Tab>\nYou can change how many items are on a page using `limit` in options object:\n\n\nAs a result you will receive an object:\n\n</Tab>\n</Tabs>\n\nA detailed description of the `Store` object fields can be found [here](../reference/webendpoint/api-reference/types#Store).\n\n---\n\n**Navigation**: Fetching Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst storesList = await storeApi.listStores(\n    CONTEXT_ID,\n    defaultListQuery\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-fetching-stores-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-root-mbguw0d1)\n\n\n---\n\n**Navigation**: Fetching Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// storesList:\n{\n    readItems: [<storeObject1>, <storeObject2>,..., <storeObjectN>],\n    totalAvailable: <number_of_all_stores>\n}\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-fetching-stores-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-root-mbguw0d1)\n\n\n---\n\n**Navigation**: Fetching Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst store = await wnd.storeApi.getStore(storeId);\nconst privateMeta = deserializeObject(store.privateMeta);\nconst publicMeta = deserializeObject(store.publicMeta);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Fetching Stores](#general-example-fetching-stores-fetching-stores-mbguw0d1)\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-root-mbguw0d1)\n\n\n---\n\n**Navigation**: Fetching Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 50, limit: 20, sortOrder: \"asc\"};\n\nconst storesList = await storeApi.listStores(\n    CONTEXT_ID,\n    defaultListQuery\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-stores-content-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-fetching-stores-mbguw0d1)\n- [Fetching Stores](#general-example-fetching-stores-root-mbguw0d1)\n\n\n---\n\n# Modifying Stores\n\nThe `updateStore(...)` method needs all the parameters as in the `createStore(...)` method and a few more. If you want to update \n\n\n\n## Related Sections\n\n- [Modifying Stores](#general-example-modifying-stores-modifying-stores-mbguw0d3)\n- [Content](#general-example-modifying-stores-content-mbguw0d3)\n- [JS Example](#general-example-modifying-stores-js-example-mbguw0d3)\n\n\n---\n\n**Navigation**: Modifying Stores\n\n---\n\n# Modifying Stores\n\n\nThe `updateStore(...)` method needs all the parameters as in the `createStore(...)` method and a few more. If you want to update \n\n\n\n\n\n\n## Subsections\n\n- **Content**: The `updateStore(...)` method needs all the parameters as in the `createStore(...)` method and a fe...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Modifying Stores](#general-example-modifying-stores-root-mbguw0d3)\n- [Content](#general-example-modifying-stores-content-mbguw0d3)\n- [JS Example](#general-example-modifying-stores-js-example-mbguw0d3)\n\n\n---\n\n# Working with Threads\n\nWhen working with Threads, you will use the following:\n\n\n\n## Related Sections\n\n- [Working with Threads](#general-example-working-with-threads-working-with-threads-mbguw0d4)\n- [Content](#general-example-working-with-threads-content-mbguw0d4)\n\n\n---\n\n**Navigation**: Working with Threads\n\n---\n\n# Working with Threads\n\n\nWhen working with Threads, you will use the following:\n\n\n\n\n\n\n## Subsections\n\n- **Content**: When working with Threads, you will use the following:\n- `ThreadApi` - provides methods used to man...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-working-with-threads-content-mbguw0d4)\n- [Working with Threads](#general-example-working-with-threads-root-mbguw0d4)\n\n\n---\n\n**Navigation**: Working with Threads > Content\n\n---\n\n## Content\n\n\nWhen working with Threads, you will use the following:\n- `ThreadApi` - provides methods used to manage Threads in given Context\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst threadApi  = await Endpoint.createThreadApi(connection);\n```...\n\n\n## Related Sections\n\n- [Working with Threads](#general-example-working-with-threads-working-with-threads-mbguw0d4)\n- [Working with Threads](#general-example-working-with-threads-root-mbguw0d4)\n\n\n---\n\n# Creating Threads\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"Public Meta\"]}>\n\n\n\n## Related Sections\n\n- [Creating Threads](#general-example-creating-threads-creating-threads-mbguw0d4)\n- [Content](#general-example-creating-threads-content-mbguw0d4)\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n\n\n---\n\n**Navigation**: Creating Threads\n\n---\n\n# Creating Threads\n\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"Public Meta\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"Public Meta\"]}>\n<Tab >\nCreating a basic, unna...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-creating-threads-content-mbguw0d4)\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n\n\n---\n\n**Navigation**: Creating Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\n// create a new Thread with access for USER_1 as manager and USER_2 as regular user\nconst threadId = await threadsApi.createThread(CONTEXT_ID, users, managers,\n    serializeObject(\"some thread's public meta-data\"),\n    serializeObject(\"some thread's private meta-data\")\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-threads-content-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-creating-threads-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-root-mbguw0d4)\n\n\n---\n\n**Navigation**: Creating Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst privateMeta = {\n    name: 'First thread'\n};\n\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\n// create a new Thread with access for user_1 as manager and user_2 as regular user\nconst threadId = await threadsApi.createThread(CONTEXT_ID, users, managers,\n    serializeObject(\"some thread's public meta-data\"),\n    serializeObject(privateMeta)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-threads-content-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-creating-threads-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-root-mbguw0d4)\n\n\n---\n\n**Navigation**: Creating Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst privateMeta = {\n    name: 'First Thread'\n};\n\nconst publicMeta = {\n    tags: ['TAG1', 'TAG2', 'TAG3']\n};\n\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY},\n    {userId: USER2_ID, pubKey: USER2_PUBLIC_KEY}\n];\n\n// create a new Thread with access for USER_1 as manager and USER_2 as regular user\nconst threadId = await threadsApi.createThread(CONTEXT_ID, users, managers,\n    serializeObject(publicMeta),\n    serializeObject(privateMeta)\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-creating-threads-content-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-creating-threads-mbguw0d4)\n- [Creating Threads](#general-example-creating-threads-root-mbguw0d4)\n\n\n---\n\n# Fetching Threads\n\n<Tabs groupId=\"variant\" items={[\"Recent\",\"Sorting\",\"ThreadID\",\"Paging\"]}>\n\n\n\n## Related Sections\n\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads\n\n---\n\n# Fetching Threads\n\n\n<Tabs groupId=\"variant\" items={[\"Recent\",\"Sorting\",\"ThreadID\",\"Paging\"]}>\n\n\n\n\n\n\n## Subsections\n\n- **Content**: <Tabs groupId=\"variant\" items={[\"Recent\",\"Sorting\",\"ThreadID\",\"Paging\"]}>\n<Tab value=\"recent\" label...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n\n\n---\n\nExample**: ```js\n// threadList:\n{\n    readItems: [<threadObject1>, <threadObject2>,..., <threadObjectN>],\n    t...\n- **JS Example**: ```js\nconst thread = await threadApi.getThread(\n    threadId    \n);const privateMeta = deserialize...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 50, limit: 20, sortOrder: \"asc\"};\nconst threadList = await thr...\n- **JS Example**: ```js\n// threadList:\n{\n    readItems: [THREAD_1,THREAD_2,THREAD_3],\n    totalAvailable: NUMBER_OF_TH...\n\n---\n\nRelated Sections\n\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n- [JS Example](#general-example-fetching-threads-js-example-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\nconst threadList = await threadApi.listThreads(CONTEXT_ID, defaultListQuery);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-threads-content-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-root-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// threadList:\n{\n    readItems: [<threadObject1>, <threadObject2>,..., <threadObjectN>],\n    totalAvailable: <number_of_all_threads>\n}\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-threads-content-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-root-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst thread = await threadApi.getThread(\n    threadId    \n);\n\nconst privateMeta = deserializeObject(thread.privateMeta);\nconst publicMeta = deserializeObject(thread.publicMeta);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-threads-content-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-root-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst defaultListQuery = {skip: 50, limit: 20, sortOrder: \"asc\"};\nconst threadList = await threadApi.listThreads(CONTEXT_ID, defaultListQuery);\n\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-fetching-threads-content-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-root-mbguw0d5)\n\n\n---\n\n**Navigation**: Fetching Threads > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// threadList:\n{\n    readItems: [THREAD_1,THREAD_2,THREAD_3],\n    totalAvailable: NUMBER_OF_THREADS\n}\n```\n\n    \n\n\n\n## Related Sections\n\n- [Fetching Threads](#general-example-fetching-threads-fetching-threads-mbguw0d5)\n- [Content](#general-example-fetching-threads-content-mbguw0d5)\n- [Fetching Threads](#general-example-fetching-threads-root-mbguw0d5)\n\n\n---\n\n# Modifying Threads\n\nDocumentation section\n\n# Modifying Threads\n\nDocumentation section\n\n\n\n\n## Content\n\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.\n\n---\n\n# How Updates Work\n\nTo update a Thread you must always provide a full list of parameters.\n\n\n\n## Related Sections\n\n- [How Updates Work](#general-example-how-updates-work-how-updates-work-mbguw0d7)\n- [Content](#general-example-how-updates-work-content-mbguw0d7)\n- [JS Example](#general-example-how-updates-work-js-example-mbguw0d7)\n\n\n---\n\n**Navigation**: How Updates Work\n\n---\n\n# How Updates Work\n\n\nTo update a Thread you must always provide a full list of parameters.\n\n\n\n\n\n\n## Subsections\n\n- **Content**: To update a Thread you must always provide a full list of parameters.\n\nThe `updateThread(...)` metho...\n- **Related Information**: This example demonstrates practical usage patterns for PrivMX development....\n\n\n## Related Sections\n\n- [Content](#general-example-how-updates-work-content-mbguw0d7)\n- [How Updates Work](#general-example-how-updates-work-root-mbguw0d7)\n- [JS Example](#general-example-how-updates-work-js-example-mbguw0d7)\n\n\n---\n\ner =>...\n- **JS Example**: ```js\nconst thread = await threadApi.getThread(threadId);\n\n// Get all users who were in the Thread,...\n- **JS Example**: ```js\nawait threadApi.deleteThread(threadId);\n```...## Related Sections\n\n- [JS Example](#general-example-how-updates-work-js-example-mbguw0d7)\n- [How Updates Work](#general-example-how-updates-work-how-updates-work-mbguw0d7)\n- [JS Example](#general-example-how-updates-work-js-example-mbguw0d7)",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "application server",
          "example",
          "guide",
          "root",
          "hierarchy-root",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "hierarchical",
          "level-1",
          "vite",
          "level-2",
          "content",
          "level-3",
          "js-example",
          "next.js",
          "express",
          "nginx",
          "/etc/nginx/nginx.conf-or-/etc/nginx/sites-available/your-site",
          "apache",
          ".htaccess-or-httpd.conf",
          "webpack-dev-server",
          "entries",
          "public-connection",
          "ts-example",
          "submitting-entries",
          "fetching-entries",
          "events",
          "files",
          "complexity-high",
          "managing-files",
          "modifying-files",
          "first app",
          "helpers",
          "initial-assumptions",
          "basic-serialization-example---json",
          "create-client-app",
          "sub-chunk",
          "part-1",
          "handling events",
          "usage-examples",
          "inboxes",
          "working-with-inboxes",
          "creating-an-inbox",
          "fetching-inboxes",
          "modifying-inboxes",
          "introduction",
          "importing-npm-package",
          "using-bundle",
          "html-example",
          "web-endpoint's-apis",
          "messages",
          "sending-messages",
          "receiving-messages",
          "stores",
          "working-with-stores",
          "creating-stores",
          "fetching-stores",
          "part-0",
          "modifying-stores",
          "threads",
          "working-with-threads",
          "creating-threads",
          "fetching-threads",
          "how-updates-work",
          "quality:0.75"
        ],
        "sourceFile": "application-server.mdx",
        "relatedMethods": [],
        "lineNumber": 12,
        "useCases": [],
        "commonMistakes": [],
        "dependencies": []
      }
    },
    {
      "id": "general-example-submitting-entries-content-mbguw0cl",
      "content": "**Navigation**: Submitting Entries > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"Prepare Entry\",\"With meta\",\"With Files\"]}>\n<Tab>\n\n\n</Tab>\n<Tab>\n\n\n</Tab>\n\n<Tab>\nInboxes allow you to attach files when sending a reply. Each file is automatically streamed during submission.\nSimilar to Stores, the files can contain private/public metadata.\n\nFile info is located inside Entries:\n\n</Tab>\n</Tabs>\n\n\n\n\n\n\n## Subsections\n\n- **TS Example**: ```ts\nconst inboxHandle = await inboxApi.prepareEntry(\n    \"INBOX_ID\",\n    serializeObject(\"text to...\n- **TS Example**: ```ts\nconst dataToSend = serializeObject({\n        type: 'General inquiry',\n        answer: 'Example...\n- **TS Example**: ```ts\nconst dataToSend = serializeObject({\n    type: 'General inquiry',\n    answer: 'Example answer'...\n\n\n## Related Sections\n\n- [TS Example](#general-example-submitting-entries-ts-example-mbguw0cl)\n- [TS Example](#general-example-submitting-entries-ts-example-mbguw0cl)\n- [Submitting Entries](#general-example-submitting-entries-submitting-entries-mbguw0cl)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "entries",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.75"
        ],
        "sourceFile": "entries.mdx",
        "lineNumber": 32,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-modifying-inboxes-content-mbguw0cw",
      "content": "**Navigation**: Modifying Inboxes > Content\n\n---\n\n## Content\n\n\n<Tabs items={[\"Renaming Inboxes\",\"Removing Users\",\"Deleting Inbox\"]}>\n<Tab default>\nTo update an Inbox you must always provide its current version, as well as:\n- list of users,\n- list of managers,\n- new private and public meta (even if it didn't change).\n\n\n\n</Tab>\n\n<Tab>\nTo remove a user from an Inbox you must provide:\n- list of all the users, without the user you want to remove;\n- list of managers;\n- Inbox's current version;\n- new private and public meta (even if it didn't change).\n\n\n\n</Tab>\n\n<Tab>\nThe snippet below deletes the Inbox and all its data. This action is irreversible.\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n\n## Subsections\n\n- **TEXT Example**: ```text\nconst inbox = await inboxApi.getInbox(\n    inboxId    \n);\n\nconst newUsers = inbox.users.map(...\n- **TEXT Example**: ```text\nconst inbox = await inboxApi.getInbox(inboxId);\n\nconst newUsers = inbox.users\n    .filter(us...\n- **JS Example**: ```js\nawait inboxApi.deleteInbox(\"INBOX_ID\");\n```...\n\n\n## Related Sections\n\n- [Modifying Inboxes](#general-example-modifying-inboxes-modifying-inboxes-mbguw0cw)\n- [TEXT Example](#general-example-modifying-inboxes-text-example-mbguw0cw)\n- [TEXT Example](#general-example-modifying-inboxes-text-example-mbguw0cw)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "inboxes",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.75"
        ],
        "sourceFile": "inboxes.mdx",
        "lineNumber": 189,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-modifying-stores-content-mbguw0d3",
      "content": "**Navigation**: Modifying Stores > Content\n\n---\n\n## Content\n\n\nThe `updateStore(...)` method needs all the parameters as in the `createStore(...)` method and a few more. If you want to update \none of the parameters - provide it in a new modified form. If, on the other hand, you want to leave \nthe parameter unchanged, provide it as it was before. All current values ​​of the parameters of a given Store can be\nobtained using `getStore(threadId)`.\n\n<Tabs items={[\"Renaming Store\",\"Removing Users\",\"Deleting Store\"]}>\n<Tab>\n\n\n</Tab>\n\n<Tab>\nTo remove a user from the Store you must update a list of the users/managers by removing the user you want to get rid of.\nAll the other values required for update can be taken from the current Store.\n\n\n\n</Tab>\n\n<Tab>\nThe snippet below deletes the Store and all its data. This action is irreversible.\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst store = await storeApi.getStore(storeId);\n\nconst newUsers = store.users.map(user => ({...\n- **JS Example**: ```js\nconst userToRemove = 'USERID_TO_REMOVE';\n\nconst store = await storeApi.getStore(storeId);\n\ncon...\n- **JS Example**: ```js\nawait storeApi.deleteStore(storeId);\n```...\n\n\n## Related Sections\n\n- [Modifying Stores](#general-example-modifying-stores-modifying-stores-mbguw0d3)\n- [JS Example](#general-example-modifying-stores-js-example-mbguw0d3)\n- [JS Example](#general-example-modifying-stores-js-example-mbguw0d3)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "stores",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.75"
        ],
        "sourceFile": "stores.mdx",
        "lineNumber": 191,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-fetching-entries-content-mbguw0cm",
      "content": "**Navigation**: Fetching Entries > Content\n\n---\n\n## Content\n\n\nFetching entries requires a secure private connection.\n\n<Tabs groupId={'variant'} items={[\"Fetching entries\",\"Oldest\",\"With Meta\"]}>\n<Tab>\nFetching the most recent Entries submitted to Inbox:\n\n\n\n</Tab>\n<Tab >\nFetching the oldest Entries (by submission date) in given Inbox:\n\n\n</Tab>\n<Tab >\nEntries contain list of submitted files.\nEach file can contain additional metadata useful for providing info about them, for e.g: file name, size, or author.\n\n\n</Tab>\n\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"desc\"};\nconst entries = await inboxA...\n- **JS Example**: ```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"asc\"};\nconst entries = await inboxAp...\n- **JS Example**: ```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"desc\"};\nconst entries = await inboxA...\n\n\n## Related Sections\n\n- [JS Example](#general-example-fetching-entries-js-example-mbguw0cm)\n- [JS Example](#general-example-fetching-entries-js-example-mbguw0cm)\n- [Fetching Entries](#general-example-fetching-entries-fetching-entries-mbguw0cm)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "entries",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.72"
        ],
        "sourceFile": "entries.mdx",
        "lineNumber": 106,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-managing-files-content-mbguw0cn",
      "content": "**Navigation**: Managing Files > Content\n\n---\n\n## Content\n\n\n<Tabs items={[\"Uploading a simple file\",\"Reading a file\",\"List of Files\"]}>\n\n<Tab >\nCreating files in Stores with additional metadata:\n\n\nA detailed code sample of how to upload (stream) a large file can be found [here](../start/stores/uploading-files).\n</Tab>\n\n<Tab >\n\n\n</Tab>\n\n<Tab >\nListing files in a chosen Store:\n\n\nAs a result you will receive an object:\n\nA detailed description of the `File` object fields can be found [here](/reference/js/webendpoint/api-reference/types#file).\n\n</Tab>\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\n// for example, let's put some extra file info in the file's private meta\nconst sampleFileInfo...\n- **JS Example**: ```js\n// read file contents of the file added to the Store\nconst fileInfo = await storesApi.getFile(...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst filesList = await st...\n- **JS Example**: ```js\n// filesList:\n{\n    readItems: [<fileObject1>, <fileObject2>,..., <fileObjectN>],\n    totalAva...\n\n\n## Related Sections\n\n- [JS Example](#general-example-managing-files-js-example-mbguw0cn)\n- [JS Example](#general-example-managing-files-js-example-mbguw0cn)\n- [Managing Files](#general-example-managing-files-managing-files-mbguw0cn)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "files",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "quality:0.72"
        ],
        "sourceFile": "files.mdx",
        "lineNumber": 9,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-create-client-app-content-mbguw0cq-part-0",
      "content": "**Navigation**: Create Client App > Content\n\n---\n\n## Content\n\nFirst, you have to connect to your Bridge instance using `Endpoint.connect` method. It requires the API keys\ngenerated while initializing your local instance earlier.\n\n\nWhen connected, you have access to all SDK methods. This example shows how to create a Thread, send, and download\na message.\n\nTo create a Thread inside the Context, use proper methods. Note that you have to pass user ID - public key\npair to make a list of users and managers.\n\n\n\nWith the Thread created, you can now send the first message.\n\n\n\nTo get a list of messages inside a Thread, use `listMessages` method. Because data inside messages is in `Uint8Array`\nyou have to deserialize it to human-readable string.\n**Endpoint takes care of encrypting your data before sending it to PrivMX Bridge.**\n\n## Subsections\n\n- **JS Example**: ```js\nimport {Endpoint} from \"@simplito/privmx-webendpoint\"\n\nconst connection = await Endpoint.conne...\n- **JS Example**: ```js\n//using constants from initial assumptions\nconst exampleUser = {\n     userId: USER1_ID,\n     p...\n- **JS Example**: ```js\nawait threadApi.sendMessage(\n   threadId, \n   strToUInt8(\"some public meta-data\"), \n   strToUI...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\nconst messagesList = await...",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "first app",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "sub-chunk",
          "part-0",
          "quality:0.72"
        ],
        "sourceFile": "first-app.mdx",
        "lineNumber": 71,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-fetching-inboxes-content-mbguw0cv",
      "content": "**Navigation**: Fetching Inboxes > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"Most Recent\",\"Oldest Inboxes\",\"By Inbox ID\",\"Paging\"]}>\n<Tab >\nFetching the most recent Inboxes in given Context:\n\n\n</Tab>\n\n<Tab>\nFetching the oldest Inboxes (by creation date) in given Context:\n\n\n</Tab>\n\n<Tab>\nYou can get info about an Inbox using its `inboxId`:\n\n\n</Tab>\n\n<Tab>\nYou can change how many items are on a page using `limit` in options object:\n\n\n\n</Tab>\n</Tabs>\n\nRemember that data is transmitted in binary format, so you'll need to parse it back into your desired format.\nYou can use the `deserializeObject` function provided by the SDK for this purpose.\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"asc\"};\n\nconst inboxList = await inbo...\n- **JS Example**: ```js\nconst defaultListQuery = {skip:0, limit: 100, sortOrder: \"desc\"};\n\nconst inboxList = await inb...\n- **JS Example**: ```js\nconst inbox = await inboxApi.getInbox(\"INBOX_ID\");\n\nconst privateMeta = deserializeObject(inbo...\n- **JS Example**: ```js\nconst defaultListQuery = {skip:50, limit: 20, sortOrder: \"desc\"};\n\nconst inboxList = await inb...\n\n\n## Related Sections\n\n- [Fetching Inboxes](#general-example-fetching-inboxes-fetching-inboxes-mbguw0cv)\n- [JS Example](#general-example-fetching-inboxes-js-example-mbguw0cv)\n- [JS Example](#general-example-fetching-inboxes-js-example-mbguw0cv)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "inboxes",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "quality:0.72"
        ],
        "sourceFile": "inboxes.mdx",
        "lineNumber": 107,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-web-endpoint-s-apis-content-mbguw0cy",
      "content": "**Navigation**: Web Endpoint's APIs > Content\n\n---\n\n## Content\n\nYou need your Bridge's instance specific data, mentioned [earlier](#initial-requirements), which you should get during the Bridge's setup process.\n\n\n\nFirst connect to your PrivMX Bridge instance.\nInitialize the Endpoint and its WebAssembly dependencies\n(provide the Endpoint.setup() function with your Web Server's public directory URL/path\n where the Endpoint assets were copied)\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst  bridgeUrl = \"http://localhost:9111\";\nconst  solutionId = \"SOLUTION_ID\";\n\nconst  userPri...\n- **JS Example**: ```js\nawait Endpoint.setup(\"<public_dir>\");\n// Create connection to the Bridge Server\nconst connecti...\n\n\n## Related Sections\n\n- [Web Endpoint's APIs](#general-example-web-endpoint-s-apis-web-endpoint's-apis-mbguw0cy)\n- [JS Example](#general-example-web-endpoint-s-apis-js-example-mbguw0cy)\n- [JS Example](#general-example-web-endpoint-s-apis-js-example-mbguw0cy)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "introduction",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.72"
        ],
        "sourceFile": "introduction.mdx",
        "lineNumber": 94,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-sending-messages-content-mbguw0cz",
      "content": "**Navigation**: Sending Messages > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"basic\",\"markdown\"]}>\n<Tab>\nExample of sending a message in Plain Text:\n\n\n</Tab>\n\n<Tab value='markdown' label='Richtext'>\n\nYour app may require sending messages in more complex formats like Markdown or HTML. Because messages in Threads\ndon't have a specified format, you can take any output from your text editor, serialize, and send it.\n\nThe example below uses `type` field in `publicMeta` to distinguish between different types of messages.\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **TS Example**: ```ts\nconst message = 'Message text';\n \nconst encoder = new TextEncoder();\n\nawait threadApi.sendMess...\n- **TS Example**: ```ts\nconst messageObject = {\n    //output from the chosen WYSIWYG editor\n    //or your own object d...\n\n\n## Related Sections\n\n- [TS Example](#general-example-sending-messages-ts-example-mbguw0cz)\n- [TS Example](#general-example-sending-messages-ts-example-mbguw0cz)\n- [Sending Messages](#general-example-sending-messages-sending-messages-mbguw0cz)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "messages",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.72"
        ],
        "sourceFile": "messages.mdx",
        "lineNumber": 21,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-how-updates-work-content-mbguw0d7-part-0",
      "content": "**Navigation**: How Updates Work > Content\n\n---\n\n## Content\n\nTo update a Thread you must always provide a full list of parameters.\n\nThe `updateThread(...)` method needs all the parameters as in the `createThread(...)` method and a few more. If we want to update\none of the parameters - we provide it in a new modified form. If - on the other hand - we want to leave\nthe parameter unchanged, we provide it as it was before. All current values ​​of the parameters of a given Thread can be\nobtained using `getThread(threadId)`\n\n<Tabs items={[\"Renaming Thread\",\"Removing User\",\"Deleting Thread\"]}>\n<Tab>\n\n\n\n</Tab>\n<Tab>\nTo remove a user from the Thread you must update a list of the users/managers by removing the user you want to get rid of.\nAll the other values required for update can be taken from the current Thread.\n\n\n\n</Tab>\n<Tab>\nThe snippet below deletes Thread and all its data. This action is irreversible.\n\n\n</Tab>\n</Tabs>\n\n## Subsections\n\n- **JS Example**: ```js\nconst thread = await threadApi.getThread(threadId);\n\nconst newUsers = thread.users.map(user =>...\n- **JS Example**: ```js\nconst thread = await threadApi.getThread(threadId);\n\n// Get all users who were in the Thread,...\n- **JS Example**: ```js\nawait threadApi.deleteThread(threadId);\n```...",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "threads",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "sub-chunk",
          "part-0",
          "quality:0.72"
        ],
        "sourceFile": "threads.mdx",
        "lineNumber": 181,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-next-js-js-example-mbguw0cg",
      "content": "**Navigation**: Next.js > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// next.config.mjs\nconst nextConfig = {\n  // ..rest of the configuration\n  headers: async () => {\n    return [\n      {\n        source: '/your-page', // Page containing the scripts\n        headers: [\n          {\n            key: 'Cross-Origin-Embedder-Policy',\n            value: 'require-corp',\n          },\n          {\n            key: 'Cross-Origin-Opener-Policy',\n            value: 'same-origin',\n          },\n        ],\n      },\n      {\n        source: '/privmx-assets/(.*)', // Script files\n        headers: [\n          {\n            key: 'Cross-Origin-Embedder-Policy',\n            value: 'require-corp',\n          },\n          {\n            key: 'Cross-Origin-Opener-Policy',\n            value: 'same-origin',\n          },\n        ],\n      },\n    ];\n  },\n};\n\n\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-next-js-content-mbguw0cg)\n- [Next.js](#general-example-next-js-next.js-mbguw0cg)\n- [Next.js](#general-example-next-js-root-mbguw0cg)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "application server",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "js-example",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "application-server.mdx",
        "lineNumber": 48,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-initial-assumptions-content-mbguw0cq",
      "content": "**Navigation**: Initial Assumptions > Content\n\n---\n\n## Content\n\n\nAll the values below like `BRIDGE_URL`, `SOLUTION_ID`, `CONTEXT_ID`\nshould be replaced by the ones corresponding to your PrivMX Bridge instance.\n\nThe private keys here are for demonstration purposes only.\nNormally, they should be kept separately by each user and stored in a safe place,\nor generated from a password (see the `derivePrivateKey()` method in the Crypto API)\n\nThe initial assumptions for all the code examples below are as follows:\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst BRIDGE_URL = \"http://localhost:9111\";\nconst SOLUTION_ID = \"YOUR_SOLUTION_ID\";\nconst CONT...\n\n\n## Related Sections\n\n- [Initial Assumptions](#general-example-initial-assumptions-initial-assumptions-mbguw0cq)\n- [JS Example](#general-example-initial-assumptions-js-example-mbguw0cq)\n- [Initial Assumptions](#general-example-initial-assumptions-root-mbguw0cq)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "first app",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "first-app.mdx",
        "lineNumber": 30,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-usage-examples-js-example-mbguw0cs",
      "content": "**Navigation**: Usage Examples > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue from the endpoint\nconst eventQueue = await Endpoint.getEventQueue();\n\n// Start the event loop\nconst eventManager = EventManager.startEventLoop({\n    waitEvent: eventQueue.waitEvent\n});\n\n// Create a scoped event manager for thread events\nconst threadEventManager = eventManager.getThreadEventManager(YOUR_THREAD_API);\n\n// Subscribe to the 'threadCreated' event\nconst unsubscribeFromThreadCreated = await threadEventManager.onThreadEvent({\n    event: 'threadCreated',\n    callback: (payload) => {\n        console.log(\"New thread created:\", payload);\n    }\n});\n\n// Subscribe to the 'threadNewMessage' event for a specific thread\nconst unsubscribeFromMessageCreated = await threadEventManager.onMessageEvent(THREAD_ID, {\n    event: 'threadNewMessage',\n    callback: (payload) => {\n        console.log(\"New message in thread:\", payload);\n    }\n});\n\n// Unsubscribe when needed\nawait unsubscribeFromThreadCreated();\nawait unsubscribeFromMessageCreated();\n\n// Stop the event loop when needed\neventManager.stopEventLoop();\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-usage-examples-content-mbguw0cs)\n- [Usage Examples](#general-example-usage-examples-usage-examples-mbguw0cs)\n- [Usage Examples](#general-example-usage-examples-root-mbguw0cs)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "handling events",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "js-example",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "handling-events.mdx",
        "lineNumber": 14,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-modifying-inboxes-text-example-mbguw0cw",
      "content": "**Navigation**: Modifying Inboxes > Content > TEXT Example\n\n---\n\n### TEXT Example\n\n```text\nconst inbox = await inboxApi.getInbox(\n    inboxId    \n);\n\nconst newUsers = inbox.users.map(user => ({\n        //Your application must provide a way,\n        //to get user's public key from their userId.\n        userId: user,\n        pubKey: 'USER_PUBLIC_KEY'\n    })\n);\n\nconst newManagers = newUsers.filter(user =>\n    inbox.managers.find(manager => manager == user.userId));\n\nconst newPrivateMeta = {\n    title: 'New inbox name'\n};\n\nawait inboxApi.updateInbox(\n    inboxId    \n    newUsers,\n    newManagers,\n    inbox.publicMeta,\n    serializeObject(newPrivateMeta),\n    inbox.filesConfig,\n    inbox.version,\n    false, \n    false\n);\n```\n\n*js*\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-modifying-inboxes-content-mbguw0cw)\n- [Modifying Inboxes](#general-example-modifying-inboxes-modifying-inboxes-mbguw0cw)\n- [Modifying Inboxes](#general-example-modifying-inboxes-root-mbguw0cw)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "inboxes",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "text-example",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "inboxes.mdx",
        "lineNumber": 189,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-setting-up-web-endpoint-mbguw0cx",
      "content": "# Setting up Web Endpoint\n\n:::warning\n\n# Setting up Web Endpoint\n\n:::warning\n\n\n\n\n## Content\n\n:::warning\n\nPrivMX Web Endpoint relies heavily on WebAssembly and browser Web Workers.\nBecause of that, Web Endpoint is not compatible with the Node.js environments used on the server side and is limited to **browsers only**.\nWe are actively working on the `@simplito/privmx-endpoint-node` NPM package to support this kind of usage in the future.\n\n:::\n\nPrivMX Web Endpoint is distributed as an NPM package ([@simplito/privmx-webendpoint](https://www.npmjs.com/package/@simplito/privmx-webendpoint)) that contains\nall the necessary assets and helpers to get started.\n\nFollow these steps to get started:\n\n1. Download the NPM package for your target project by calling: `npm i @simplito/privmx-webendpoint`.\n2. Set up your Web Server to host JavaScript assets properly – [see below](#setting-up-web-server-to-host-javascript-assets).\n3. Copy the Endpoint's assets (all .js and .wasm files from `./node_modules/@simplito/privmx-webendpoint/assets`) to your Web Server's public directory.\n\nFinally, to complete the setup process, you have two ways to import the package to your project:\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "introduction",
          "example",
          "guide",
          "quality:0.70"
        ],
        "sourceFile": "introduction.mdx",
        "lineNumber": 33,
        "useCases": [
          "in the future."
        ],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-creating-stores-content-mbguw0d0",
      "content": "**Navigation**: Creating Stores > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"With `publicMeta`\"]}>\n<Tab>\nCreating a basic unnamed Store, which can act as an encrypted block container:\n\n\n</Tab>\n<Tab>\n\nYou can assign any data to private and public meta fields (e.g. the Store's name), as long as they are serialized to `Uint8Array`.\n\n\n</Tab>\n<Tab>\n\nYou can implement a tag system, which allows to create Stores with arbitrary tags.\nPutting them inside `publicMeta` gives your own server the ability to access it using Bridge REST API.\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {u...\n- **JS Example**: ```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {u...\n- **JS Example**: ```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {u...\n\n\n## Related Sections\n\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n- [JS Example](#general-example-creating-stores-js-example-mbguw0d0)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "stores",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "stores.mdx",
        "lineNumber": 23,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-modifying-stores-js-example-mbguw0d3",
      "content": "**Navigation**: Modifying Stores > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst store = await storeApi.getStore(storeId);\n\nconst newUsers = store.users.map(user => ({\n    //Your application must provide a way,\n    //to get user's public key from their userId.\n    userId: user,\n    pubKey: 'USER_PUBLIC_KEY'\n    })\n);\n\nconst newManagers = newUsers.filter(user =>\n    store.managers.find(manager => manager == user.userId));\n\nconst newPrivateMeta = {\n    title: 'New store name'\n};\n\nawait storeApi.updateStore(\n    storeId\n    newUsers,\n    newManagers,\n    store.publicMeta,\n    serializeObject(newPrivateMeta)\n    store.version,\n    false,\n    false\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-modifying-stores-content-mbguw0d3)\n- [Modifying Stores](#general-example-modifying-stores-modifying-stores-mbguw0d3)\n- [Modifying Stores](#general-example-modifying-stores-root-mbguw0d3)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "stores",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "js-example",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "stores.mdx",
        "lineNumber": 191,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-creating-threads-content-mbguw0d4",
      "content": "**Navigation**: Creating Threads > Content\n\n---\n\n## Content\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a Name\",\"Public Meta\"]}>\n<Tab >\nCreating a basic, unnamed Thread, which can act as an encrypted data container:\n\n\n</Tab>\n <Tab >\n\nYou can assign any data to private and public meta fields (e.g. the Thread's name), as long as they are serialized to `Uint8Array`.\n\n\n\n</Tab>\n<Tab >\n\nYou can implement a tag system which allows you to create Threads with arbitrary tags.\nPutting them inside `publicMeta` gives your own server ability to access it using [PrivMX Bridge API](https://bridge.privmx.dev/).\n\n\n\n</Tab>\n</Tabs>\n\n\n\n\n\n\n## Subsections\n\n- **JS Example**: ```js\nconst managers = [\n    {userId: USER1_ID, pubKey: USER1_PUBLIC_KEY}\n];\n\nconst users = [\n    {u...\n- **JS Example**: ```js\nconst privateMeta = {\n    name: 'First thread'\n};\n\nconst managers = [\n    {userId: USER1_ID, p...\n- **JS Example**: ```js\nconst privateMeta = {\n    name: 'First Thread'\n};\n\nconst publicMeta = {\n    tags: ['TAG1', 'TA...\n\n\n## Related Sections\n\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n- [JS Example](#general-example-creating-threads-js-example-mbguw0d4)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "threads",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "threads.mdx",
        "lineNumber": 22,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-how-updates-work-js-example-mbguw0d7",
      "content": "**Navigation**: How Updates Work > Content > JS Example\n\n---\n\n### JS Example\n\n```js\nconst thread = await threadApi.getThread(threadId);\n\nconst newUsers = thread.users.map(user => ({\n    //Your application must provide a way,\n    //to get user's public key from their userId.\n    userId: user,\n    pubKey: 'USER_PUBLIC_KEY'\n    })\n);\n\nconst newManagers = newUsers.filter(user =>\n    thread.managers.find(manager => manager == user.userId));\n\nconst newPrivateMeta = {\n    title: 'New thread name'\n};\n\nawait threadApi.updateThread(\n    threadId\n    newUsers,\n    newManagers,\n    thread.publicMeta,\n    serializeObject(newPrivateMeta),\n    thread.version,\n    false,\n    false\n);\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-how-updates-work-content-mbguw0d7)\n- [How Updates Work](#general-example-how-updates-work-how-updates-work-mbguw0d7)\n- [How Updates Work](#general-example-how-updates-work-root-mbguw0d7)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "threads",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "js-example",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.70"
        ],
        "sourceFile": "threads.mdx",
        "lineNumber": 181,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "Types-class-pagingquery-mbguw0cf",
      "content": "# PagingQuery\n\nContains query parameters for methods returning lists (PagingList)\n\n# PagingQuery\n\nContains query parameters for methods returning lists (PagingList)\n\n## Type Definition\n```typescript\ninterface PagingQuery{...}\n```\n\n## Fields\n- `skip` (number): number of elements to skip from result\n- `limit` (number): limit of elements to return for query\n- `sortOrder` (SortOrder): Order of elements in result. Use \"asc\" for ascending, \"desc\" for descending.\n- `lastId` (string): id of the element from which query results should start\n- `queryAsJson` (string): extra query parameters in serialized JSON\n\nThis type is used throughout the PrivMX API for structured data handling.",
      "metadata": {
        "type": "class",
        "namespace": "Types",
        "className": "PagingQuery",
        "importance": "medium",
        "tags": [
          "types",
          "type",
          "pagingquery",
          "quality:0.68"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "Types-class-thread-mbguw0cf",
      "content": "# Thread\n\nHolds all available information about a Thread.\n\n# Thread\n\nHolds all available information about a Thread.\n\n## Type Definition\n```typescript\ninterface Thread{...}\n```\n\n## Fields\n- `contextId` (string): ID of the Context\n- `threadId` (string): ID ot the Thread\n- `createDate` (number): Thread creation timestamp\n- `creator` (string): \n- `lastModificationDate` (number): Thread last modification timestamp\n- `lastModifier` (string): ID of the user who last modified the Thread\n- `users` (string[]): list of users (their IDs) with access to the Thread\n- `managers` (string[]): list of users (their IDs) with management rights\n- `version` (number): version number (changes on updates)\n- `lastMsgDate` (number): timestamp of last posted message\n- `publicMeta` (Uint8Array): Thread's public metadata\n- `privateMeta` (Uint8Array): Thread's private metadata\n- `policy` (ContainerPolicy): Thread's policies\n- `messagesCount` (number): total number of messages in the Thread\n- `statusCode` (number): status code of retrieval and decryption of the Thread\n\nThis type is used throughout the PrivMX API for structured data handling.",
      "metadata": {
        "type": "class",
        "namespace": "Types",
        "className": "Thread",
        "importance": "medium",
        "tags": [
          "types",
          "type",
          "thread",
          "quality:0.68"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "Types-class-store-mbguw0cf",
      "content": "# Store\n\nHolds all available information about a Store.\n\n# Store\n\nHolds all available information about a Store.\n\n## Type Definition\n```typescript\ninterface Store{...}\n```\n\n## Fields\n- `storeId` (string): ID ot the Store\n- `contextId` (string): ID of the Context\n- `createDate` (number): Store creation timestamp\n- `creator` (string): ID of user who created the Store\n- `lastModificationDate` (number): Thread last modification timestamp\n- `lastFileDate` (number): timestamp of last created file\n- `lastModifier` (string): ID of the user who last modified the Store\n- `users` (string[]): list of users (their IDs) with access to the Store\n- `managers` (string[]): list of users (their IDs) with management rights\n- `version` (number): version number (changes on updates)\n- `publicMeta` (Uint8Array): Store's public metadata\n- `privateMeta` (Uint8Array): Store's private metadata\n- `policy` (ContainerPolicy): Store's policies\n- `filesCount` (number): total number of files in the Store\n- `statusCode` (number): status code of retrieval and decryption of the Store\n\nThis type is used throughout the PrivMX API for structured data handling.",
      "metadata": {
        "type": "class",
        "namespace": "Types",
        "className": "Store",
        "importance": "medium",
        "tags": [
          "types",
          "type",
          "store",
          "quality:0.68"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "Types-class-inbox-mbguw0cf",
      "content": "# Inbox\n\nHolds all available information about an Inbox.\n\n# Inbox\n\nHolds all available information about an Inbox.\n\n## Type Definition\n```typescript\ninterface Inbox{...}\n```\n\n## Fields\n- `inboxId` (string): ID ot the Inbox\n- `contextId` (string): ID of the Context\n- `createDate` (number): Inbox creation timestamp\n- `creator` (string): ID of user who created the Inbox\n- `lastModificationDate` (number): Inbox last modification timestamp\n- `lastModifier` (string): ID of the user who last modified the Inbox\n- `users` (string[]): list of users (their IDs) with access to the Inbox\n- `managers` (string[]): list of users (their IDs) with management rights\n- `version` (number): version number (changes on updates)\n- `publicMeta` (Uint8Array): Inbox' public metadata\n- `privateMeta` (Uint8Array): Inbox' private metadata\n- `filesConfig` (FilesConfig): Inbox' files configuration\n- `policy` (ContainerWithoutItemPolicy): Inbox' policies\n- `statusCode` (number): status code of retrieval and decryption of the Inbox\n\nThis type is used throughout the PrivMX API for structured data handling.",
      "metadata": {
        "type": "class",
        "namespace": "Types",
        "className": "Inbox",
        "importance": "medium",
        "tags": [
          "types",
          "type",
          "inbox",
          "quality:0.68"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-hosting-privmx-web-endpoint-assets-mbguw0cf",
      "content": "# Hosting PrivMX Web Endpoint Assets\n\nTo ensure the proper functionality and security of our library, it is essential to configure your server with specific HTTP headers on **the page containing the scripts** and **the scripts themselves** (e.g., those located in `public/privmx-assets/`).\n\n# Hosting PrivMX Web Endpoint Assets\n\nTo ensure the proper functionality and security of our library, it is essential to configure your server with specific HTTP headers on **the page containing the scripts** and **the scripts themselves** (e.g., those located in `public/privmx-assets/`).\n\n\n\n\n## Content\n\nTo ensure the proper functionality and security of our library, it is essential to configure your server with specific HTTP headers on **the page containing the scripts** and **the scripts themselves** (e.g., those located in `public/privmx-assets/`).\n\nSet the following headers:\n\n- `Cross-Origin-Embedder-Policy: require-corp`\n- `Cross-Origin-Opener-Policy: same-origin`\n\nThese headers are crucial for maintaining a secure execution environment, as they help prevent potential cross-origin attacks and ensure that resources are only shared with origins that comply with the same security policies. Implementing these headers will enable seamless integration and optimal performance of our library in your application.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "application server",
          "example",
          "guide",
          "quality:0.68"
        ],
        "sourceFile": "application-server.mdx",
        "lineNumber": 1,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-initial-requirements-mbguw0cx",
      "content": "# Initial Requirements\n\nTo start developing end-to-end encrypted applications using PrivMX Web Endpoint you need a **PrivMX Bridge** instance, you can find quick start guide [here](../start/quick-start).\n\n# Initial Requirements\n\nTo start developing end-to-end encrypted applications using PrivMX Web Endpoint you need a **PrivMX Bridge** instance, you can find quick start guide [here](../start/quick-start).\n\n\n\n\n## Content\n\nTo start developing end-to-end encrypted applications using PrivMX Web Endpoint you need a **PrivMX Bridge** instance, you can find quick start guide [here](../start/quick-start).\n\nTo connect it to your environment, you need:\n  - `Bridge URL` - URL address of the instance of your PrivMX Bridge\n  - `Solution ID` - ID of the Solution provided by PrivMX Bridge during its initialization process\n  - `User Private Key` - the private key from the user's public-private key pair\n\nWhen you develop a project using PrivMX, you will most likely use some kind of application server – a server to manage users (and their keys), Contexts, etc. \nIt can be new or existing, depending on the specific requirements.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "introduction",
          "example",
          "guide",
          "quality:0.68"
        ],
        "sourceFile": "introduction.mdx",
        "lineNumber": 1,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-setting-up-web-server-to-host-javascript-assets-mbguw0cx",
      "content": "# Setting up Web Server to Host JavaScript Assets\n\nTo properly integrate PrivMX Web Endpoint library, it's crucial to configure your server. This will ensure the library functions correctly and maintain security. \n\n# Setting up Web Server to Host JavaScript Assets\n\nTo properly integrate PrivMX Web Endpoint library, it's crucial to configure your server. This will ensure the library functions correctly and maintain security. \n\n\n\n\n## Content\n\nTo properly integrate PrivMX Web Endpoint library, it's crucial to configure your server. This will ensure the library functions correctly and maintain security. \nYou need to set up specific HTTP headers: \n- set `Cross-Origin-Embedder-Policy` to `require-corp`;\n- set `Cross-Origin-Opener-Policy` to `same-origin`.\n\nThese headers are essential to prevent potential cross-origin attacks and to maintain a secure execution environment.\n\nFor detailed instructions on how to configure these headers in different environments like Vite, Next.js, Express, and Nginx, \nrefer to our [Server Configuration](./application-server) page.\n\nYou can also take a look at our [example projects](https://github.com/simplito/privmx-webendpoint/tree/main/examples)\nto find server configuration samples.\n\n\n\n\n## Related Information\nThis example demonstrates practical usage patterns for PrivMX development.",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "introduction",
          "example",
          "guide",
          "quality:0.68"
        ],
        "sourceFile": "introduction.mdx",
        "lineNumber": 18,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-fetching-stores-content-mbguw0d1-part-1",
      "content": " options object:\n\n\nAs a result you will receive an object:\n\n</Tab>\n</Tabs>\n\nA detailed description of the `Store` object fields can be found [here](../reference/webendpoint/api-reference/types#Store).## Subsections\n\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\n\nconst storesList = await s...\n- **JS Example**: ```js\n// storesList:\n{\n    readItems: [<storeObject1>, <storeObject2>,..., <storeObjectN>],\n    tota...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"asc\"};\n\nconst storesList = await st...\n- **JS Example**: ```js\n// storesList:\n{\n    readItems: [<storeObject1>, <storeObject2>,..., <storeObjectN>],\n    tota...\n- **JS Example**: ```js\nconst store = await wnd.storeApi.getStore(storeId);\nconst privateMeta = deserializeObject(stor...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 50, limit: 20, sortOrder: \"asc\"};\n\nconst storesList = await st...\n- **JS Example**: ```js\n// storesList:\n{\n    readItems: [<storeObject1>, <storeObject2>,..., <storeObjectN>],\n    tota...\n\n## Related Sections\n\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)\n- [JS Example](#general-example-fetching-stores-js-example-mbguw0d1)",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "stores",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "sub-chunk",
          "part-1",
          "quality:0.68"
        ],
        "sourceFile": "stores.mdx",
        "lineNumber": 108,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "merged-Types-class-sortorder-mbguw0cf-22",
      "content": "# SortOrder\n\n\n\n# SortOrder\n\n\n\n## Type Definition\n```typescript\ninterface SortOrder{...}\n```\n\n## Fields\nNo fields defined\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# Event\n\nHolds Event details\n\n# Event\n\nHolds Event details\n\n## Type Definition\n```typescript\ninterface Event{...}\n```\n\n## Fields\n- `type` (string): event type\n- `channel` (string): channel\n- `connectionId` (number): id of source connection\n- `data` (unknown): \n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# PagingList\n\nContains results of listing methods\n\n# PagingList\n\nContains results of listing methods\n\n## Type Definition\n```typescript\ninterface PagingList{...}\n```\n\n## Fields\n- `totalAvailable` (number): total items available to get\n- `readItems` (T[]): list of items read during single method call\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# Context\n\nContains base Context information\n\n# Context\n\nContains base Context information\n\n## Type Definition\n```typescript\ninterface Context{...}\n```\n\n## Fields\n- `userId` (string): ID of user requesting information\n- `contextId` (string): ID of context\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# UserWithPubKey\n\nContains ID of user and the corresponding public key\n\n# UserWithPubKey\n\nContains ID of user and the corresponding public key\n\n## Type Definition\n```typescript\ninterface UserWithPubKey{...}\n```\n\n## Fields\n- `userId` (string): ID of the user\n- `pubKey` (string): user's public key\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# UserInfo\n\nContains Information about user\n\n# UserInfo\n\nContains Information about user\n\n## Type Definition\n```typescript\ninterface UserInfo{...}\n```\n\n## Fields\n- `user` (UserWithPubKey): User publicKey and userId\n- `isActive` (boolean): is user connected to the Bridge\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# Message\n\nHolds information about the Message.\n\n# Message\n\nHolds information about the Message.\n\n## Type Definition\n```typescript\ninterface Message{...}\n```\n\n## Fields\n- `info` (ServerMessageInfo): message's information created by server\n- `publicMeta` (Uint8Array): message's public metadata\n- `privateMeta` (Uint8Array): message's private metadata\n- `data` (Uint8Array): message's data\n- `authorPubKey` (string): public key of an author of the message\n- `statusCode` (number): status code of retrieval and decryption of the message\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# ServerMessageInfo\n\nHolds message's information created by server\n\n# ServerMessageInfo\n\nHolds message's information created by server\n\n## Type Definition\n```typescript\ninterface ServerMessageInfo{...}\n```\n\n## Fields\n- `threadId` (string): ID of the Thread\n- `messageId` (string): ID of the message\n- `createDate` (number): message's creation timestamp\n- `author` (string): ID of the user who created the message\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# File\n\nHolds information about the file.\n\n# File\n\nHolds information about the file.\n\n## Type Definition\n```typescript\ninterface File{...}\n```\n\n## Fields\n- `info` (ServerFileInfo): file's information created by server\n- `publicMeta` (Uint8Array): file's public metadata\n- `privateMeta` (Uint8Array): file's private metadata\n- `size` (number): file's size\n- `authorPubKey` (string): public key of an author of the file\n- `statusCode` (number): \n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# ServerFileInfo\n\nHolds file's information created by server\n\n# ServerFileInfo\n\nHolds file's information created by server\n\n## Type Definition\n```typescript\ninterface ServerFileInfo{...}\n```\n\n## Fields\n- `storeId` (string): ID of the Store\n- `fileId` (string): ID of the file\n- `createDate` (number): file's creation timestamp\n- `author` (string): ID of the user who created the file\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# InboxPublicView\n\nHolds Inbox' public information\n\n# InboxPublicView\n\nHolds Inbox' public information\n\n## Type Definition\n```typescript\ninterface InboxPublicView{...}\n```\n\n## Fields\n- `inboxId` (string): ID of the Inbox\n- `version` (number): version of the Inbox\n- `publicMeta` (Uint8Array): Inbox' public metadata\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# InboxEntry\n\nHolds information about Inbox' entry\n\n# InboxEntry\n\nHolds information about Inbox' entry\n\n## Type Definition\n```typescript\ninterface InboxEntry{...}\n```\n\n## Fields\n- `entryId` (string): ID of the entry\n- `inboxId` (string): ID of the Inbox\n- `data` (Uint8Array): entry data\n- `files` (File[]): list of files attached to the entry\n- `authorPubKey` (string): public key of the author of an entry\n- `createDate` (number): Inbox entry creation timestamp\n- `statusCode` (number): status code of retrieval and decryption of the Inbox entry\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# FilesConfig\n\nHolds Inbox files configuration\n\n# FilesConfig\n\nHolds Inbox files configuration\n\n## Type Definition\n```typescript\ninterface FilesConfig{...}\n```\n\n## Fields\n- `minCount` (number): minimum number of files required when sending inbox entry\n- `maxCount` (number): maximum number of files allowed when sending inbox entry\n- `maxFileSize` (number): maximum file size allowed when sending inbox entry\n- `maxWholeUploadSize` (number): maximum size of all files in total allowed when sending inbox entry\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# ContainerWithoutItemPolicy\n\nHolds Container policies settings\n\n# ContainerWithoutItemPolicy\n\nHolds Container policies settings\n\n## Type Definition\n```typescript\ninterface ContainerWithoutItemPolicy{...}\n```\n\n## Fields\n- `get` (PolicyEntry): determine who can get a container\n- `update` (PolicyEntry): determine who can update a container\n- `delete` (PolicyEntry): determine who can delete a container\n- `updatePolicy` (PolicyEntry): determine who can update the policy of a container\n- `updaterCanBeRemovedFromManagers` (PolicyBooleanEntry): determine whether the updater can be removed from the list of managers\n- `ownerCanBeRemovedFromManagers` (PolicyBooleanEntry): determine whether the owner can be removed from the list of managers\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# ContainerPolicy\n\nHolds Container policies settings\n\n# ContainerPolicy\n\nHolds Container policies settings\n\n## Type Definition\n```typescript\ninterface ContainerPolicy{...} extends ContainerWithoutItemPolicy\n```\n\n## Fields\n- `item` (ItemPolicy): item policies\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# PolicyEntry\n\n\n\n# PolicyEntry\n\n\n\n## Type Definition\n```typescript\ninterface PolicyEntry{...}\n```\n\n## Fields\nNo fields defined\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# PolicyBooleanEntry\n\n\n\n# PolicyBooleanEntry\n\n\n\n## Type Definition\n```typescript\ninterface PolicyBooleanEntry{...}\n```\n\n## Fields\nNo fields defined\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# ItemPolicy\n\nHolds Container's item policies settings\n\n# ItemPolicy\n\nHolds Container's item policies settings\n\n## Type Definition\n```typescript\ninterface ItemPolicy{...}\n```\n\n## Fields\n- `get` (PolicyEntry): determine who can get an item\n- `listMy` (PolicyEntry): determine who can list items created by me\n- `listAll` (PolicyEntry): determine who can list all items\n- `create` (PolicyEntry): determine who can create an item\n- `update` (PolicyEntry): determine who can update an item\n- `delete` (PolicyEntry): determine who can delete an item\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# Error\n\nHolds error details\n\n# Error\n\nHolds error details\n\n## Type Definition\n```typescript\ninterface Error{...}\n```\n\n## Fields\n- `code` (number): error code\n- `name` (string): error name\n- `scope` (string): error scope\n- `description` (string): error description\n- `full` (string): all available data about the error\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# BIP39\n\n\n\n# BIP39\n\n\n\n## Type Definition\n```typescript\ninterface BIP39{...}\n```\n\n## Fields\n- `mnemonic` (string): BIP-39 mnemonic\n- `entropy` (Uint8Array): BIP-39 entropy\n- `extKey` (ExtKey): Ecc Key\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# VerificationRequest\n\n\n\n# VerificationRequest\n\n\n\n## Type Definition\n```typescript\ninterface VerificationRequest{...}\n```\n\n## Fields\n- `contextId` (string): Id of the Context\n- `senderId` (string): Id of the sender\n- `senderPubKey` (string): Public key of the sender\n- `date` (number): The data creation date\n- `bridgeIdentity` (BridgeIdentity): Bridge Identity\n\nThis type is used throughout the PrivMX API for structured data handling.\n\n---\n\n# BridgeIdentity\n\nBridge server identification details.\n\n# BridgeIdentity\n\nBridge server identification details.\n\n## Type Definition\n```typescript\ninterface BridgeIdentity{...}\n```\n\n## Fields\n- `url` (string): Bridge URL\n- `pubKey` (string): Bridge public Key\n- `instanceId` (string): Bridge instance Id given by PKI\n\nThis type is used throughout the PrivMX API for structured data handling.",
      "metadata": {
        "type": "class",
        "namespace": "Types",
        "className": "SortOrder",
        "importance": "medium",
        "tags": [
          "types",
          "type",
          "sortorder",
          "event",
          "paginglist",
          "context",
          "userwithpubkey",
          "userinfo",
          "message",
          "servermessageinfo",
          "file",
          "serverfileinfo",
          "inboxpublicview",
          "inboxentry",
          "filesconfig",
          "containerwithoutitempolicy",
          "containerpolicy",
          "policyentry",
          "policybooleanentry",
          "itempolicy",
          "error",
          "bip39",
          "verificationrequest",
          "bridgeidentity",
          "quality:0.67"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": [],
        "relatedMethods": [],
        "dependencies": []
      }
    },
    {
      "id": "general-example-webpack-dev-server-js-example-mbguw0cj",
      "content": "**Navigation**: Webpack Dev Server > Content > JS Example\n\n---\n\n### JS Example\n\n```js\n// webpack.config.cjs\nconst path = require('path');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst host = process.env.HOST || 'localhost';\nmodule.exports = {\n  devServer: {\n    static: [{\n      directory: path.join(__dirname, 'public'),\n      publicPath: '/public'\n    }],\n    compress: true,\n    liveReload: false,\n    host,\n    port: 4001,\n    headers: {\n      \"Cross-Origin-Embedder-Policy\": \"require-corp\",\n      \"Cross-Origin-Opener-Policy\": \"same-origin\",\n\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n    }\n  }\n};\n\n```\n\n    \n\n\n\n## Related Sections\n\n- [Content](#general-example-webpack-dev-server-content-mbguw0cj)\n- [Webpack Dev Server](#general-example-webpack-dev-server-webpack-dev-server-mbguw0cj)\n- [Webpack Dev Server](#general-example-webpack-dev-server-root-mbguw0cj)\n",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "application server",
          "example",
          "guide",
          "hierarchical",
          "level-3",
          "js-example",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "quality:0.67"
        ],
        "sourceFile": "application-server.mdx",
        "lineNumber": 167,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-usage-examples-content-mbguw0cs-part-0",
      "content": "**Navigation**: Usage Examples > Content\n\n---\n\n## Content\n\n<Tabs groupId=\"tool\" items={[\"Threads\",\"Stores\",\"Inboxes\",\"Connection\"]}>\n<Tab>\nThe example below demonstrates how to use the `EventManager` for Thread events.\n\n\n\nFor more information regarding Thread-related events please visit [Threads docs](../start/threads/listening-for-changes).\n</Tab>\n<Tab>\nThe example below demonstrates how to use the `EventManager` for Store events.\n\n\n\nFor more information regarding Store-related events please visit [Store docs](./../../stores/using-stores/05-realtime-updating.mdx).\n</Tab>\n\n<Tab>\nThe example below demonstrates how to use the `EventManager` for Inbox events.\n\n\n\n</Tab>\n\n<Tab>\nThe example below demonstrates how to use the `EventManager` for connection events.\n\n\n</Tab>\n</Tabs>\n\n## Subsections\n\n- **JS Example**: ```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...\n- **JS Example**: ```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...\n- **JS Example**: ```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...\n- **JS Example**: ```js\nimport { EventManager } from '@simplito/privmx-webendpoint/extra';\n\n// Get the event queue fro...",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "handling events",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "sub-chunk",
          "part-0",
          "quality:0.67"
        ],
        "sourceFile": "handling-events.mdx",
        "lineNumber": 14,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-creating-an-inbox-content-mbguw0cu-part-0",
      "content": "**Navigation**: Creating an Inbox > Content\n\n---\n\n## Content\n\n\n<Tabs groupId=\"variant\" items={[\"Basic\",\"With a structured Private Meta\",\"With Public View\"]}>\n<Tab>\nCreating a basic unnamed Inbox, which can be used if your app needs only one Inbox and you don't need a distinction between them:\n\n\n</Tab>\n     \n<Tab >\n\nYou can assign any data to private and public meta fields (e.g. the name of the Inbox), as long as they are serialized to Uint8Array.\nIn this case, use the `serializeObject` function from the SDK to serialize a JavaScript object into a binary format:\n\n\n</Tab>\n<Tab>\n\nIn Inboxes, `publicMeta` is exposed as `InboxPublicView`. To get it - call the getInboxPublicView(...) method.\nNote that users don't have to be added to the Inbox to have access to this method - they only need it's ID and they can connect using connectPublic(...) method.\n\nPutting data inside `publicMeta` also gives your own server the ability to access it using [PrivMX Bridge API](https://bridge.privmx.dev/).\n\n\n\n</Tab>\n</Tabs>\n\n## Subsections\n\n- **JS Example**: ```js\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KE...\n- **JS Example**: ```js\nconst privateMeta = {\n    name: 'Contact Form'\n};\nconst users = [{ userId: 'MY_USER', pubKey:...\n- **JS Example**: ```js\nconst users = [{ userId: 'MY_USER', pubKey: 'PUB_KEY' }, { userId: 'MY_USER2', pubKey: 'PUB_KE...",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "inboxes",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "hybrid-chunked",
          "complexity-medium",
          "focus-tutorial",
          "sub-chunk",
          "part-0",
          "quality:0.67"
        ],
        "sourceFile": "inboxes.mdx",
        "lineNumber": 28,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "general-example-fetching-threads-content-mbguw0d5-part-0-part-0",
      "content": "**Navigation**: Fetching Threads > Content\n\n---\n\nContent\n\n<Tabs groupId=\"variant\" items={[\"Recent\",\"Sorting\",\"ThreadID\",\"Paging\"]}>\n<Tab value=\"recent\" label=\"Most Recent\">\nFetching the most recent Threads in given Context:\n\nAs a result you will receive an object:\n\n</Tab>\n\n<Tab value={\"sorting\"} label={\"Oldest Threads\"}>\nFetching the oldest Threads (by creation date) in given Context:\n\nAs a result you will receive an object:\n\n</Tab>\n\n<Tab value={\"threadID\"} label={\"By Thread ID\"}>\nYou can get info about a Thread using its `threadId`:\n\nAs a result you will receive an `Thread` object.\n</Tab>\n\n<Tab value={\"paging\"} label={\"Paging\"}>\nYou can change how many items are on a page using `limit` in options object:\n\nAs a result you will receive an object:\n\n</Tab>\n</Tabs>\n\nA detailed description of the `Thread` object fields can be found [here](../reference/webendpoint/api-reference/types#thread).\n\nSubsections\n\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"desc\"};\nconst threadList = await th...\n- **JS Example**: ```js\n// threadList:\n{\n    readItems: [<threadObject1>, <threadObject2>,..., <threadObjectN>],\n    t...\n- **JS Example**: ```js\nconst defaultListQuery = {skip: 0, limit: 100, sortOrder: \"asc\"};\nconst threadList = await thr...\n- **JS Example**: ```js\n// threadList:\n{\n    readItems: [<threadObject1>, <threadObject2>,..., <threadObjectN>],\n    t...\n- **JS Example**: ```js\nconst thread = await threadApi.getThread(\n    threadId    \n);",
      "metadata": {
        "type": "example",
        "namespace": "general",
        "importance": "medium",
        "tags": [
          "threads",
          "example",
          "guide",
          "hierarchical",
          "level-2",
          "content",
          "sub-chunk",
          "part-0",
          "hybrid-chunked",
          "complexity-high",
          "focus-tutorial",
          "sub-chunk",
          "part-0",
          "quality:0.63"
        ],
        "sourceFile": "threads.mdx",
        "lineNumber": 104,
        "useCases": [],
        "commonMistakes": []
      }
    },
    {
      "id": "Events-class-eventapi-mbguw0cf",
      "content": "# EventApi\n\nClass representing instance of Custom Events API\n\n# EventApi\n\nClass representing instance of Custom Events API\n\n## Available Methods:\n- emitEvent()\n- subscribeForCustomEvents()\n- unsubscribeFromCustomEvents()\n\n## Class Type: class\n## Namespace: Core API\n\nThis class provides core functionality for PrivMX operations.",
      "metadata": {
        "type": "class",
        "namespace": "Events",
        "className": "EventApi",
        "importance": "medium",
        "tags": [
          "events",
          "class",
          "eventapi",
          "quality:0.60"
        ],
        "sourceFile": "spec/out.js.json",
        "useCases": [],
        "commonMistakes": []
      }
    }
  ]
}